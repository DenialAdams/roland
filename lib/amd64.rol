import "shared.rol";
import "malloc.rol";
import "ryu/f2s.rol";
import "ryu/d2s.rol";

proc print(s: String) {

   let written: usize = 0;
   let buf: &u8 = s.pointer;
   loop {
      let ret = write(1, buf, s.length);
      if ret < 0 {
         unreachable();
      }
      written = written + ret as usize;
      if written >= s.length {
         break;
      }
      buf = (s.pointer transmute usize + written) transmute &u8;
   }
}

proc println(s: String) {
   print(s);
   print("\n");
}

proc println_bool(value: bool) {
   println(bool_to_string(value));
}

proc count_digits(value: u64) -> u8 {
   let digit_count: u8 = 0;

   loop {
      if value <= 9 {
         return digit_count + 1;
      }

      digit_count = digit_count + 1;
      value = value / 10;
   }
}

proc f32_to_string(f: f32) -> String {
   let result: &u8 = typed_malloc(16, 1).buf;
   return ryu_f2s_buffered(f, result);
}

proc f64_to_string(f: f64) -> String {
   let result: &u8 = typed_malloc(25, 1).buf;
   return ryu_d2s_buffered(f, result);
}

proc _wasi_int_to_string_inner(value: u64, buf: &u8) -> String {
   let digit_count = count_digits(value);
   let digit_count_for_loop = digit_count as usize - 1;

   let next_digit: u8 = 0;
   let i: usize = 0;

   loop {
      if value <= 9 {
         next_digit = value as u8;
         let ptr = ((buf transmute usize) + digit_count_for_loop - i) transmute &u8;
         ptr~ = next_digit + 48;
         i = i + 1;
         break;
      }
      next_digit = (value % 10) as u8;
      value = value / 10;
      let ptr = ((buf transmute usize) + digit_count_for_loop - i) transmute &u8;
      ptr~ = next_digit + 48;
      i = i + 1;
   }

   return String {
      length: i,
      pointer: buf,
   };
}

proc uint_to_string(value: u64) -> String {
   let buf = typed_malloc(20, 1).buf;
   return _wasi_int_to_string_inner(value, buf);
}

proc int_to_string(value: i64) -> String {
   if value == I64_MIN {
      return "-9223372036854775808";
   } else if value < 0 {
      let buf = typed_malloc(20, 1).buf;
      buf~ = "-".pointer~;
      let adjusted_buf = buf transmute usize;
      adjusted_buf = adjusted_buf + 1;
      let ustring = _wasi_int_to_string_inner(-value as u64, adjusted_buf transmute &u8);
      return String {
         length: ustring.length + 1,
         pointer: buf,
      };
   } else {
      return uint_to_string(value as u64);
   }
}

const USIZE_MIN: usize = U64_MIN transmute usize;
const USIZE_MAX: usize = U64_MAX transmute usize;

const ISIZE_MIN: isize = I64_MIN transmute isize;
const ISIZE_MAX: isize = I64_MAX transmute isize;

// MARK: small int arithmetic

proc add_u8(x: u8, y: u8) -> u8 {
   return (x as u32 + y as u32) as u8;
}

proc add_i8(x: i8, y: i8) -> i8 {
   return (x as i32 + y as i32) as i8;
}

proc add_u16(x: u16, y: u16) -> u16 {
   return (x as u32 + y as u32) as u16;
}

proc add_i16(x: i16, y: i16) -> i16 {
   return (x as i32 + y as i32) as i16;
}

proc sub_u8(x: u8, y: u8) -> u8 {
   return (x as u32 - y as u32) as u8;
}

proc sub_i8(x: i8, y: i8) -> i8 {
   return (x as i32 - y as i32) as i8;
}

proc sub_u16(x: u16, y: u16) -> u16 {
   return (x as u32 - y as u32) as u16;
}

proc sub_i16(x: i16, y: i16) -> i16 {
   return (x as i32 - y as i32) as i16;
}

proc mul_u8(x: u8, y: u8) -> u8 {
   return (x as u32 * y as u32) as u8;
}

proc mul_i8(x: i8, y: i8) -> i8 {
   return (x as i32 * y as i32) as i8;
}

proc mul_u16(x: u16, y: u16) -> u16 {
   return (x as u32 * y as u32) as u16;
}

proc mul_i16(x: i16, y: i16) -> i16 {
   return (x as i32 * y as i32) as i16;
}

proc shl_u8(x: u8, y: u8) -> u8 {
   return (x as u32 << (y & 0b111) as u32) as u8;
}

proc shl_i8(x: i8, y: i8) -> i8 {
   return (x as i32 << (y & 0b111) as i32) as i8;
}

proc shl_u16(x: u16, y: u16) -> u16 {
   return (x as u32 << (y & 0b1111) as u32) as u16;
}

proc shl_i16(x: i16, y: i16) -> i16 {
   return (x as i32 << (y & 0b1111) as i32) as i16;
}

// MARK: System Calls

extern proc syscall1(code: u64, a1: u64) -> u64;
extern proc syscall3(code: u64, a1: u64, a2: u64, a3: u64) -> u64;
extern proc syscall4(code: u64, a1: u64, a2: u64, a3: u64, a4: u64) -> u64;

proc exit_group(status: i32) -> ! {
   syscall1(231, status as u64);
   unreachable();
}

proc brk(address: usize) -> usize {
   return syscall1(12, address as u64) as usize;
}

const RESOLVE_NO_XDEV: u64 = 0x01;
const RESOLVE_NO_MAGICLINKS: u64 = 0x02;
const RESOLVE_NO_SYMLINKS: u64 = 0x04;
const RESOLVE_BENATH: u64 = 0x08;
const RESOLVE_IN_ROOT: u64 = 0x10;
const RESOLVE_CACHED: u64 = 0x20;

const O_RDONLY: u64 = 0o0;
const O_WRONLY: u64 = 0o1;
const O_RDWR: u64 = 0o2;
const O_CREAT: u64 = 0o100;
const O_EXCL: u64 = 0o200;
const O_NOCTTY: u64 = 0o400;
const O_TRUNC: u64 = 0o1000;
const O_APPEND: u64 = 0o2000;
const O_NONBLOCK: u64 = 0o4000;
const O_SYNC: u64 = 0o4010000;
const O_ASYNC: u64 = 0o20000;
const O_DIRECTORY: u64 = 0o200000;
const O_NOFOLLOW: u64 = 0o400000;
const O_CLOEXEC: u64 = 0o2000000;
const O_DIRECT: u64 = 0o40000;
const O_NOATIME: u64 = 0o1000000;
const O_PATH: u64 = 0o10000000;
const O_DSYNC: u64 = 0o10000;
const O_TMPFILE: u64 = (0o20000000 | O_DIRECTORY);
// no O_LARGEFILE b/c i don't see us doing 32 bit linux support.
// no O_FSYNC, use O_SYNC. no O_NDELAY, use O_NONBLOCK.

struct open_how {
   flags: u64,
   mode: u64,
   resolve: u64,
}

proc openat2(dirfd: i32, path_name: &u8, open_how: &open_how) -> i32 {
   return syscall4(437, dirfd as u64, path_name transmute u64, open_how transmute u64, sizeof$<open_how>() as u64) as i32;
}

proc write(fd: i32, buf: &u8, nbyte: usize) -> isize {
   return syscall3(1, fd as u64, buf transmute u64, nbyte transmute u64) as isize;
}