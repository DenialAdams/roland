import "f2s_full_table.rol";

proc pow5factor_32(value: u32) -> u32 {
  let count: u32 = 0;
  loop {
   assert(value != 0);
   let q: u32 = value / 5;
   let r: u32 = value % 5;
   if (r != 0) {
      break;
   }
   value = q;
   count = count + 1;
  }
  return count;
}

// Returns true if value is divisible by 5^p.
proc multipleOfPowerOf5_32(value: u32, p: u32) -> bool {
  return pow5factor_32(value) >= p;
}

// Returns true if value is divisible by 2^p.
proc multipleOfPowerOf2_32(value: u32, p: u32) -> bool {
  // __builtin_ctz doesn't appear to be faster here.
  return (value & ((1 << p) - 1)) == 0;
}

// It seems to be slightly faster to avoid uint128_t here, although the
// generated code for uint128_t looks slightly nicer.
proc mulShift32(m: u32, factor: u64, shift: i32) -> u32 {
  assert(shift > 32);

  // The casts here help MSVC to avoid calls to the __allmul library
  // function.
  let factorLo: u32 = factor truncate u32;
  let factorHi: u32 = (factor >> 32) truncate u32;
  let bits0: u64 = m extend u64 * factorLo extend u64;
  let bits1: u64 = m extend u64 * factorHi extend u64;

  let sum: u64  = (bits0 >> 32) + bits1;
  let shiftedSum: u64 = sum >> (shift - 32) transmute u32 extend u64;
  assert(shiftedSum <= U32_MAX extend u64);
  return shiftedSum truncate u32;
}

proc mulPow5InvDivPow2(m: u32, q: u32, j: i32) -> u32 {
  return mulShift32(m, _RYU_FLOAT_POW5_INV_SPLIT[q extend usize], j);
}

proc mulPow5divPow2(m: u32, i: u32, j: i32) -> u32 {
  return mulShift32(m, _RYU_FLOAT_POW5_SPLIT[i extend usize], j);
}
