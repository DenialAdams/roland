// Returns the number of decimal digits in v, which must not contain more than 9 digits.
proc _ryu_decimalLength9(v: u32) -> u32{
  // Function precondition: v is not a 10-digit number.
  // (f2s: 9 digits are sufficient for round-tripping.)
  // (d2fixed: We print 9-digit blocks.)
  assert(v < 1000000000);
  if (v >= 100000000) { return 9; }
  if (v >= 10000000) { return 8; }
  if (v >= 1000000) { return 7; }
  if (v >= 100000) { return 6; }
  if (v >= 10000) { return 5; }
  if (v >= 1000) { return 4; }
  if (v >= 100) { return 3; }
  if (v >= 10) { return 2; }
  return 1;
}

// Returns e == 0 ? 1 : [log_2(5^e)]; requires 0 <= e <= 3528.
proc _ryu_log2pow5(e: i32) -> i32 {
  // This approximation works up to the point that the multiplication overflows at e = 3529.
  // If the multiplication were done in 64 bits, it would fail at 5^4004 which is just greater
  // than 2^9297.
  assert(e >= 0);
  assert(e <= 3528);
  return (((e transmute u32) * 1217359) >> 19) transmute i32;
}

// Returns e == 0 ? 1 : ceil(log_2(5^e)); requires 0 <= e <= 3528.
proc _ryu_pow5bits(e: i32) -> i32 {
  // This approximation works up to the point that the multiplication overflows at e = 3529.
  // If the multiplication were done in 64 bits, it would fail at 5^4004 which is just greater
  // than 2^9297.
  assert(e >= 0);
  assert(e <= 3528);
  return ((((e transmute u32) * 1217359) >> 19) + 1) transmute i32;
}

// Returns e == 0 ? 1 : ceil(log_2(5^e)); requires 0 <= e <= 3528.
proc _ryu_ceil__ryu_log2pow5(e: i32) -> i32 {
  return _ryu_log2pow5(e) + 1;
}

// Returns floor(log_10(2^e)); requires 0 <= e <= 1650.
proc _ryu_log10Pow2(e: i32) -> u32{
  // The first value this approximation fails for is 2^1651 which is just greater than 10^297.
  assert(e >= 0);
  assert(e <= 1650);
  return ((e transmute u32) * 78913) >> 18;
}

// Returns floor(log_10(5^e)); requires 0 <= e <= 2620.
proc _ryu_log10Pow5(e: i32) -> u32 {
  // The first value this approximation fails for is 5^2621 which is just greater than 10^1832.
  assert(e >= 0);
  assert(e <= 2620);
  return ((e transmute u32) * 732923) >> 20;
}

proc _ryu_copy_special_str(result: &u8, sign: bool, exponent: bool, mantissa: bool) -> usize {
  if (mantissa) {
    let text = "NaN";
    _ryu_memcpy(result, text.pointer, text.length);
    return text.length;
  }
  if (sign) {
    result~ = "-".pointer~;
  }
  if (exponent) {
    let text = "Infinity";
    _ryu_memcpy(_ryu_offset_ptr_forward(result, sign extend usize), text.pointer, text.length);
    return sign extend usize + text.length;
  }
  let text = "0E0";
  _ryu_memcpy(_ryu_offset_ptr_forward(result, sign extend usize), text.pointer, text.length);
  return sign extend usize + text.length;
}

proc _ryu_offset_ptr_forward(ptr: &u8, offset: usize) -> &u8 {
  return (ptr transmute usize + offset) transmute &u8;
}

proc _ryu_memcpy(dest: &u8, src: &u8, length: usize) {
  for i in 0..length {
    (((dest transmute usize) + i) transmute &u8)~ = (((src transmute usize) + i) transmute &u8)~;
  }
}
