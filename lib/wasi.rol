import "shared.rol";
import "ryu/f2s.rol";
import "ryu/d2s.rol";

builtin proc wasm_memory_size() -> usize;
builtin proc wasm_memory_grow(pages: usize) -> usize;

struct ciovec {
   buf: &u8,
   buf_len: usize,
}

struct prestat {
   tag: u8,
   u: u32,
}

extern proc fd_write(handle: usize, strings_to_write: &ciovec, strings_to_write_len: usize, written_ptr: &usize) -> isize;
extern proc path_open(fd: usize, dirflags: u32, path: String, oflags: u16, fs_rights_base: u64, fs_rights_inheriting: u64, fdflags: u16, ret: &usize) -> isize;
extern proc path_close(fd: usize) -> isize;
extern proc fd_prestat_get(fd: usize, result: &prestat) -> isize;

proc print(s: String) {
   let data = [
      ciovec {
         buf: s.pointer,
         buf_len: s.length,
      },
   ];

   let written: usize = 0;
   loop {
      fd_write(1, &data[0], data.length, &written);
      let remaining_len = &data[0].buf_len;
      if written >= remaining_len~ {
         break;
      } else {
         data[0].buf = (data[0].buf transmute usize + written) transmute &u8;
         remaining_len~ = remaining_len~ - written;
      }
   }
}

proc println(s: String) {
   let data = [
      ciovec {
         buf: s.pointer,
         buf_len: s.length,
      },
      ciovec {
         buf: "\n".pointer,
         buf_len: "\n".length,
      },
   ];

   let written: usize = 0;
   loop {
      fd_write(1, &data[0], data.length, &written);
      let remaining_len = &data[0].buf_len;
      if written > remaining_len~ {
         break;
      } else {
         data[0].buf = (data[0].buf transmute usize + written) transmute &u8;
         remaining_len~ = remaining_len~ - written;
      }
   }
}

proc println_bool(value: bool) {
   println(bool_to_string(value));
}

proc count_digits(value: u64) -> u8 {
   let digit_count: u8 = 0;

   loop {
      if value <= 9 {
         return digit_count + 1;
      }

      digit_count = digit_count + 1;
      value = value / 10;
   }

   unreachable();
}

proc f32_to_string(f: f32) -> String {
   let result: &u8 = malloc(16);
   return ryu_f2s_buffered(f, result);
}

proc f64_to_string(f: f64) -> String {
   let result: &u8 = malloc(25);
   return ryu_d2s_buffered(f, result);
}

proc int_to_string(value: u64) -> String {
   let digit_count = count_digits(value);
   let digit_count_for_loop = digit_count as usize - 1;
   let buf = malloc(digit_count as usize);

   let next_digit: u8 = 0;
   let i: usize = 0;

   loop {
      if value <= 9 {
         next_digit = value as u8;
         let ptr = ((buf transmute usize) + digit_count_for_loop - i) transmute &u8;
         ptr~ = next_digit + 48;
         i = i + 1;
         break;
      }
      next_digit = (value % 10) as u8;
      value = value / 10;
      let ptr = ((buf transmute usize) + digit_count_for_loop - i) transmute &u8;
      ptr~ = next_digit + 48;
      i = i + 1;
   }

   return String {
      length: i,
      pointer: buf,
   };
}

proc malloc(bytes: usize) -> &u8 {
   let num_new_pages = (bytes / 65536) + (bytes % 65536 != 0) as usize;
   let current_page_start = wasm_memory_grow(num_new_pages) * 65536;
   return current_page_start transmute &u8;
}
