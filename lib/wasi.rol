import "wasm_shared.rol";
import "ryu/f2s.rol";
import "ryu/d2s.rol";

builtin proc wasm_memory_size() -> usize;
builtin proc wasm_memory_grow(pages: usize) -> usize;

struct ciovec {
   buf: &u8,
   buf_len: usize,
}

struct prestat {
   tag: u8,
   u: u32,
}

extern proc fd_write(handle: usize, strings_to_write: &ciovec, strings_to_write_len: usize, written_ptr: &usize) -> isize;
extern proc path_open(fd: usize, dirflags: u32, path: String, oflags: u16, fs_rights_base: u64, fs_rights_inheriting: u64, fdflags: u16, ret: &usize) -> isize;
extern proc fd_close(fd: usize) -> isize;
extern proc fd_prestat_get(fd: usize, result: &prestat) -> isize;

proc print(s: String) {
   let data = [
      ciovec {
         buf: s.pointer,
         buf_len: s.length,
      },
   ];

   let written: usize = 0;
   loop {
      fd_write(1, &data[0], data.length, &written);
      let remaining_len = &data[0].buf_len;
      if written >= remaining_len~ {
         break;
      } else {
         data[0].buf = (data[0].buf transmute usize + written) transmute &u8;
         remaining_len~ = remaining_len~ - written;
      }
   }
}

proc println(s: String) {
   let data = [
      ciovec {
         buf: s.pointer,
         buf_len: s.length,
      },
      ciovec {
         buf: "\n".pointer,
         buf_len: "\n".length,
      },
   ];

   let written: usize = 0;
   loop {
      fd_write(1, &data[0], data.length, &written);
      let remaining_len = &data[0].buf_len;
      if written > remaining_len~ {
         break;
      } else {
         data[0].buf = (data[0].buf transmute usize + written) transmute &u8;
         remaining_len~ = remaining_len~ - written;
      }
   }
}

proc println_bool(value: bool) {
   println(bool_to_string(value));
}

proc count_digits(value: u64) -> u8 {
   let digit_count: u8 = 0;

   loop {
      if value <= 9 {
         return digit_count + 1;
      }

      digit_count = digit_count + 1;
      value = value / 10;
   }
}

proc f32_to_string(f: f32) -> String {
   let result: &u8 = malloc(16);
   return ryu_f2s_buffered(f, result);
}

proc f64_to_string(f: f64) -> String {
   let result: &u8 = malloc(25);
   return ryu_d2s_buffered(f, result);
}

proc _wasi_int_to_string_inner(value: u64, buf: &u8) -> String {
   let digit_count = count_digits(value);
   let digit_count_for_loop = digit_count as usize - 1;

   let next_digit: u8 = 0;
   let i: usize = 0;

   loop {
      if value <= 9 {
         next_digit = value as u8;
         let ptr = ((buf transmute usize) + digit_count_for_loop - i) transmute &u8;
         ptr~ = next_digit + 48;
         i = i + 1;
         break;
      }
      next_digit = (value % 10) as u8;
      value = value / 10;
      let ptr = ((buf transmute usize) + digit_count_for_loop - i) transmute &u8;
      ptr~ = next_digit + 48;
      i = i + 1;
   }

   return String {
      length: i,
      pointer: buf,
   };
}

proc uint_to_string(value: u64) -> String {
   let buf = malloc(20);
   return _wasi_int_to_string_inner(value, buf);
}

proc int_to_string(value: i64) -> String {
   if value == I64_MIN {
      return "-9223372036854775808";
   } else if value < 0 {
      let buf = malloc(20);
      buf~ = "-".pointer~;
      let adjusted_buf = buf transmute usize;
      adjusted_buf = adjusted_buf + 1;
      let ustring = _wasi_int_to_string_inner(-value as u64, adjusted_buf transmute &u8);
      return String {
         length: ustring.length + 1,
         pointer: buf,
      };
   } else {
      return uint_to_string(value as u64);
   }
}


// MARK: allocator

const _WASM_PAGE_SIZE: usize = 65535;

// This struct field ordering is very important!
struct _free_list_node {
   size: usize,
   next: &_free_list_node,
}

static free_list_head: &_free_list_node = 0 transmute &_free_list_node; 

proc malloc(bytes: usize) -> &u8 {
   if bytes == 0 {
      return 0 transmute &u8;
   }

   // ALLOCATED: [size, XXXX]
   // FREE: [size, ptr, ____]

   bytes = bytes + sizeof$<usize>();
   if bytes < sizeof$<_free_list_node>() {
      bytes = sizeof$<_free_list_node>();
   }

   let prev_ptr: &&_free_list_node = &free_list_head;
   let cur_node = &free_list_head;
   while (cur_node~ transmute usize != 0) {
      if cur_node~~.size >= bytes {
         let saved = (cur_node~ transmute usize + sizeof$<usize>()) transmute &u8;
         
         // Remove this node from the list
         prev_ptr~ = cur_node~~.next;

         return saved;
      } else {
         prev_ptr = cur_node;
         cur_node = &cur_node~~.next;
      }
   }

   // No suitable node. Allocate a new one.
   let cur_pages = wasm_memory_size();
   let num_new_pages = (bytes / _WASM_PAGE_SIZE) + (bytes % _WASM_PAGE_SIZE != 0) as usize;
   if cur_pages + num_new_pages > 65535 {
      // Can't alloc!
      return 0 transmute &u8;
   }
   let current_page_start = wasm_memory_grow(num_new_pages) * _WASM_PAGE_SIZE;
   (current_page_start transmute &usize)~ = bytes;
   // insert free node for remainder of page size
   {
      let rem = _WASM_PAGE_SIZE - (bytes % _WASM_PAGE_SIZE);
      if rem < sizeof$<_free_list_node>() {
         (current_page_start transmute &usize)~ = _WASM_PAGE_SIZE * num_new_pages;
      } else {
         ((current_page_start + bytes) transmute &_free_list_node)~ = _free_list_node {
            size: rem,
            next: 0 transmute &_free_list_node,
         };
         free((current_page_start + bytes + sizeof$<usize>()) transmute &u8);
      }
   }
   return (current_page_start + sizeof$<usize>()) transmute &u8;
}

proc free(ptr: &u8) {
   if ptr transmute usize == 0 {
      return;
   }

   let cur_node = &free_list_head;
   while cur_node~ transmute usize != 0 {
      cur_node = &cur_node~~.next;
   }

   cur_node~ = (ptr transmute usize - sizeof$<usize>()) transmute &_free_list_node;
   cur_node~~.next = 0 transmute &_free_list_node; 
}
