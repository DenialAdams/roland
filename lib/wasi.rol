import "wasm_shared.rol";
import "malloc.rol";
import "ryu/f2s.rol";
import "ryu/d2s.rol";
import "number_to_string.rol";

builtin proc wasm_memory_size() -> usize;
builtin proc wasm_memory_grow(pages: usize) -> usize;

struct ciovec {
   buf: &u8,
   buf_len: usize,
}

struct prestat {
   tag: u8,
   u: u32,
}

extern proc fd_write(handle: usize, strings_to_write: &ciovec, strings_to_write_len: usize, written_ptr: &usize) -> isize;
extern proc path_open(fd: usize, dirflags: u32, path: String, oflags: u16, fs_rights_base: u64, fs_rights_inheriting: u64, fdflags: u16, ret: &usize) -> isize;
extern proc fd_close(fd: usize) -> isize;
extern proc fd_prestat_get(fd: usize, result: &prestat) -> isize;

proc print(s: String) {
   let data = [
      ciovec {
         buf: s.pointer,
         buf_len: s.length,
      },
   ];

   let written: usize = 0;
   loop {
      fd_write(1, &data[0], data.length, &written);
      let remaining_len = &data[0].buf_len;
      if written >= remaining_len~ {
         break;
      } else {
         data[0].buf = (data[0].buf transmute usize + written) transmute &u8;
         remaining_len~ = remaining_len~ - written;
      }
   }
}

proc println(s: String) {
   let data = [
      ciovec {
         buf: s.pointer,
         buf_len: s.length,
      },
      ciovec {
         buf: "\n".pointer,
         buf_len: "\n".length,
      },
   ];

   let written: usize = 0;
   loop {
      fd_write(1, &data[0], data.length, &written);
      let remaining_len = &data[0].buf_len;
      if written > remaining_len~ {
         break;
      } else {
         data[0].buf = (data[0].buf transmute usize + written) transmute &u8;
         remaining_len~ = remaining_len~ - written;
      }
   }
}

proc println_bool(value: bool) {
   println(bool_to_string(value));
}

const _WASM_PAGE_SIZE: usize = 65535;

proc brk(new_break: usize) -> usize {
   // First page is reserved for stack, statics
   static BRK: usize = _WASM_PAGE_SIZE + 1;

   if new_break <= BRK {
      return BRK;
   }

   let needed_pages = new_break / _WASM_PAGE_SIZE + (new_break % _WASM_PAGE_SIZE != 0) as usize;
   if needed_pages > 65535 {
      return BRK;
   }

   wasm_memory_grow(needed_pages - wasm_memory_size());
   BRK = new_break;

   return BRK;
}