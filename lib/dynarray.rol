struct DynArray<T> {
   buf: &T,
   length: usize,
   capacity: usize,
}

proc da_append<T>(x: &DynArray<T>, item: T) {
    if x~.length == x~.capacity {
        let old_ptr = x~.buf;
        let desired_capacity = ifx x~.capacity == 0 4 else x~.capacity * 2;
        let new_block = typed_malloc(desired_capacity, alignof$<T>());
        assert(new_block.length >= desired_capacity);
        x~.capacity = new_block.length;
        x~.buf = new_block.buf;
        memcpy(x~.buf, old_ptr, x~.length * sizeof$<T>());
        free(old_ptr transmute &u8);
    }
    (((x~.buf transmute usize) + sizeof$<T>() * x~.length) transmute &T)~ = item;
    x~.length = x~.length + 1;
}

proc da_get<T>(x: &DynArray<T>, index: usize) -> &T {
    return ((x~.buf transmute usize) + sizeof$<T>() * index) transmute &T;
}

proc da_init<T>() -> DynArray<T> {
    return DynArray$<T> {
        buf: 0 transmute &T,
        length: 0,
        capacity: 0,
    };
}

proc da_free<T>(x: &DynArray<T>) {
    free(x~.buf transmute &u8);
}