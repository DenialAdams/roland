builtin proc num_variants<T>() -> u64 where T: Enum;

builtin proc sqrt(x: f64) -> f64;
builtin proc sqrt_32(x: f32) -> f32;
// The following *almost* works now:
//builtin proc sqrt$T(x: T) -> T where T: Float;
// but we need to somehow split this into two bodies during compile

builtin proc unreachable() -> !;

builtin proc sizeof<T>() -> usize;
builtin proc alignof<T>() -> usize;

builtin proc proc_name() -> String;

struct String {
   pointer: &u8,
   length: usize,
}

const U8_MIN: u8 = 0;
const U8_MAX: u8 = 255;
const U16_MIN: u16 = 0;
const U16_MAX: u16 = 65535;
const U32_MIN: u32 = 0;
const U32_MAX: u32 = 4294967295;
const U64_MIN: u64 = 0;
const U64_MAX: u64 = 18446744073709551615;

const I8_MIN: i8 = -128;
const I8_MAX: i8 = 127;
const I16_MIN: i16 = -32768;
const I16_MAX: i16 = 32767;
const I32_MIN: i32 = -2147483648;
const I32_MAX: i32 = 2147483647;
const I64_MIN: i64 = -9223372036854775808;
const I64_MAX: i64 = 9223372036854775807;

const USIZE_MIN: usize = U32_MIN transmute usize;
const USIZE_MAX: usize = U32_MAX transmute usize;

const ISIZE_MIN: isize = I32_MIN transmute isize;
const ISIZE_MAX: isize = I32_MAX transmute isize;

const F64_INFINITY: f64 = 0x7ff0000000000000 transmute f64;
const F64_NEG_INFINITY: f64 = 0xfff0000000000000 transmute f64;

const F32_INFINITY: f32 = 0x7f800000 transmute f32;
const F32_NEG_INFINITY: f32 = 0xff800000 transmute f32;

proc assert(condition: bool) {
   if !condition {
      unreachable();
   }
}

proc bool_to_string(b: bool) -> String {
   return ifx b "true" else "false";
}

proc f32_to_i8(x: f32) -> i8 {
   if x as i32 > I8_MAX as i32 {
      return I8_MAX;
   } else if x as i32 < I8_MIN as i32 {
      return I8_MIN;
   }
   return x as i8;
}

proc f32_to_i16(x: f32) -> i16 {
   if x as i32 > I16_MAX as i32 {
      return I16_MAX;
   } else if x as i32 < I16_MIN as i32 {
      return I16_MIN;
   }
   return x as i16;
}

proc f64_to_i8(x: f64) -> i8 {
   if x as i32 > I8_MAX as i32 {
      return I8_MAX;
   } else if x as i32 < I8_MIN as i32 {
      return I8_MIN;
   }
   return x as i8;
}

proc f64_to_i16(x: f64) -> i16 {
   if x as i32 > I16_MAX as i32 {
      return I16_MAX;
   } else if x as i32 < I16_MIN as i32 {
      return I16_MIN;
   }
   return x as i16;
}

proc unit() -> unit {

}
