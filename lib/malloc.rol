
// This struct field ordering is very important!
struct _free_list_node {
   size: usize,
   next: &_free_list_node,
}

static free_list_head: &_free_list_node = 0 transmute &_free_list_node;

struct MemoryBlock {
   buf: &u8,
   size: usize,
}

const PREFIX_SIZE: usize = sizeof$<usize>() + 1;

proc malloc(bytes: usize, alignment: usize) -> MemoryBlock {
   if bytes == 0 {
      return MemoryBlock {
         buf: 0 transmute &u8,
         size: 0,
      };
   }

   // ALLOCATED: [size, 0xFF, <padding>, XXXX]
   // FREE: [_free_list_node, 0xFF, ____]

   bytes = bytes + PREFIX_SIZE;

   let prev_ptr: &&_free_list_node = &free_list_head;
   let cur_node = &free_list_head;
   while cur_node~ transmute usize != 0 {
      let buf_start = (cur_node~ transmute usize + PREFIX_SIZE);
      let padding = buf_start % alignment;
      if (cur_node~~.size + padding) >= bytes {
         // We assume that fresh memory is zeroed, and so won't conflict with our marker byte.
         // But we can assume no such thing for re-used memory. Zero them.
         memset((cur_node~ transmute usize + PREFIX_SIZE) transmute &u8, 0, padding);
         let saved = MemoryBlock {
            buf: (cur_node~ transmute usize + PREFIX_SIZE + padding) transmute &u8,
            size: cur_node~~.size - PREFIX_SIZE - padding,
         };

         // Remove this node from the list
         prev_ptr~ = cur_node~~.next;

         return saved;
      }
      prev_ptr = cur_node;
      cur_node = &cur_node~~.next;
   }

   // No suitable node. Allocate a new one.
   let cur_address = brk(0);
   // Adjust allocation request for alignment
   let padding = cur_address % alignment;
   bytes = bytes + padding;
   // Ensure that we are allocating enough space such that when we free it we can record metadata
   if bytes < sizeof$<_free_list_node>() {
      bytes = sizeof$<_free_list_node>();
   }
   let new_address = brk((cur_address + bytes) as usize);
   if new_address < cur_address + bytes {
      return MemoryBlock {
         buf: 0 transmute &u8,
         size: 0,
      };
   }
   (cur_address transmute &usize)~ = bytes;
   ((cur_address transmute usize + sizeof$<usize>()) transmute &u8)~ = 0xFF;
   return MemoryBlock {
      buf: (cur_address as usize + PREFIX_SIZE + padding) transmute &u8,
      size: bytes - PREFIX_SIZE - padding,
   };
}

proc free(ptr: &u8) {
   if ptr transmute usize == 0 {
      return;
   }

   let cur_node = &free_list_head;
   while cur_node~ transmute usize != 0 {
      cur_node = &cur_node~~.next;
   }

   while ((ptr transmute usize - 1) transmute &u8)~ != 0xFF {
      ptr = (ptr transmute usize - 1) transmute &u8;
   }

   cur_node~ = (ptr transmute usize - PREFIX_SIZE) transmute &_free_list_node;
   cur_node~~.next = 0 transmute &_free_list_node;
}

struct TypedMallocResult<T> {
   buf: &T,
   length: usize,
}

proc typed_malloc<T>(n: usize, alignment: usize) -> TypedMallocResult<T> {
   // TODO: Fix "this condition will always be false" occuring in templated functions and remove blah
   // also, if we actually pass a ZST type, we will still get the warning
   let blah = false;
   if sizeof$<T>() == 0 or blah {
      return TypedMallocResult$<T> {
         buf: 0 transmute &T,
         length: 0,
      };
   }
   // TODO: make alignment an optional parameter, with default value alignof$<T>();
   let new_block = malloc(sizeof$<T>() * n, alignment);
   return TypedMallocResult$<T> {
      buf: new_block.buf transmute &unit transmute &T,
      length: new_block.size / sizeof$<T>(),
   };
}