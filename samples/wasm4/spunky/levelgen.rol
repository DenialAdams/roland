// Guaranteed to have left-right exits.
static HALLWAY_ROOMS: [[Tile; 100]; 5];
// Guaranteed to have top entry and left-right exit.
static LANDING_ROOMS: [[Tile; 100]; 5];
// Guaranteed to have a downward exit and left-right exit.
static DROP_ROOMS: [[Tile; 100]; 7];
// No guarantees on exit.
static BONUS_ROOMS: [[Tile; 100]; 1];

proc make_maps() {
   let w = Tile::Wall;
   let o = Tile::Air;
   let s = Tile::Spike;
   let c = Tile::Coin;

   DROP_ROOMS[0] =
   [
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,c,c,o,o,o,o,
      w,o,o,w,w,w,w,o,o,w,
   ];

   DROP_ROOMS[1] =
   [
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,w,o,o,o,o,w,o,o,
      o,o,o,o,c,c,o,o,o,o,
      o,o,o,w,w,w,w,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,w,s,s,s,s,w,o,o,
      o,o,o,w,w,w,w,o,o,o,
      o,o,o,c,w,w,c,o,o,o,
      w,o,o,w,w,w,w,o,o,w,
   ];

    DROP_ROOMS[2] =
    [
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,c,c,o,o,o,o,
      o,o,o,o,w,w,o,o,o,o,
      o,o,o,o,c,c,o,o,o,o,
      o,w,o,o,o,o,o,o,w,o,
      w,w,s,o,o,o,o,s,w,w,
   ];

   DROP_ROOMS[3] =
    [
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,w,w,o,o,w,w,o,o,
      o,w,o,o,c,c,o,o,w,o,
      o,o,o,o,w,w,o,o,o,o,
      w,o,o,o,o,o,o,o,o,w,
      o,w,o,o,o,o,o,o,w,o,
      o,o,o,o,o,o,o,o,o,o,
      w,w,w,o,o,o,o,w,w,w,
      w,w,s,o,o,o,o,s,w,w,
   ];

   DROP_ROOMS[4] =
    [
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,c,c,o,o,o,o,
      o,o,o,o,s,s,o,o,o,o,
      o,o,w,o,w,w,o,w,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,w,o,o,o,o,o,o,w,o,
      w,w,s,o,o,o,o,s,w,w,
   ];


   DROP_ROOMS[5] =
   [
      o,o,o,o,o,o,o,o,o,o,
      w,o,o,o,o,o,o,o,o,w,
      w,w,o,o,o,o,o,o,w,w,
      w,w,o,o,o,o,o,o,w,w,
      w,w,o,o,o,o,o,o,w,w,
      w,w,o,o,o,o,o,o,w,w,
      w,w,o,o,o,o,o,o,w,w,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,c,c,o,o,o,o,
      w,w,w,w,o,o,w,w,w,w,
   ];


   DROP_ROOMS[6] =
   [
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,c,o,o,o,o,c,o,o,
      o,o,w,o,o,o,o,w,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,c,c,o,o,o,o,
      w,o,o,w,w,w,w,o,o,w,
   ];

   HALLWAY_ROOMS[0] =
   [
      w,w,w,w,w,w,w,w,w,w,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      w,w,w,w,w,w,w,w,w,w,
   ];

   HALLWAY_ROOMS[1] =
   [
      w,w,w,w,w,w,w,w,w,w,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,s,o,o,s,o,o,o,s,
      w,w,w,w,w,w,w,w,w,w,
   ];

   HALLWAY_ROOMS[2] =
   [
      w,w,w,w,w,w,w,w,w,w,
      o,o,o,w,w,w,w,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,w,o,o,o,o,w,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,s,s,s,s,s,s,o,o,
      w,w,w,w,w,w,w,w,w,w,
   ];

   HALLWAY_ROOMS[3] =
   [
      w,w,w,w,w,w,w,w,w,w,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,c,o,o,o,o,
      o,c,o,o,o,w,o,o,c,o,
      o,w,o,s,s,s,s,o,w,o,
      o,o,o,w,w,w,w,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      w,w,w,w,w,w,w,w,w,w,
   ];

   HALLWAY_ROOMS[4] =
   [
      w,w,w,w,w,w,w,w,w,w,
      o,w,w,w,w,w,w,w,w,o,
      o,o,w,w,w,w,w,w,o,o,
      o,o,o,w,w,w,w,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,c,o,o,c,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,s,s,o,o,s,s,o,o,
      w,w,w,w,w,w,w,w,w,w,
   ];



   LANDING_ROOMS[0] =
   [
      o,o,o,o,o,o,o,o,o,o,
      o,w,o,o,o,o,o,o,o,o,
      o,o,w,o,o,o,o,o,o,o,
      o,o,o,w,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,w,w,w,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,w,w,w,o,o,w,w,w,o,
      o,o,o,o,o,o,o,o,o,o,
      w,w,w,w,w,w,w,w,w,w,
   ];
   LANDING_ROOMS[1] =
   [
      w,o,o,o,o,o,o,o,o,w,
      o,w,o,o,o,o,o,o,w,o,
      o,w,w,o,o,o,o,w,w,o,
      o,o,o,w,o,o,w,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,c,c,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,s,o,o,o,o,
      w,w,w,w,w,w,w,w,w,w,
   ];

     LANDING_ROOMS[2] =
   [
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,c,o,w,w,w,w,o,c,o,
      o,c,o,o,o,o,o,o,c,o,
      o,w,o,o,o,o,o,o,w,o,
      o,o,o,o,w,w,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,w,o,o,o,o,w,o,o,
      o,o,o,o,s,s,o,o,o,o,
      w,w,w,w,w,w,w,w,w,w,
   ];

   LANDING_ROOMS[3] =
   [
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,c,c,o,o,o,o,
      o,o,o,o,w,w,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      c,o,s,o,o,o,o,s,o,c,
      w,w,w,w,o,o,w,w,w,w,
   ];

     LANDING_ROOMS[4] =
   [
      w,o,o,o,o,o,o,o,o,o,
      o,w,o,o,o,o,o,o,o,o,
      o,o,w,w,o,o,o,o,o,c,
      o,o,o,o,w,o,o,o,c,w,
      o,o,o,o,o,w,o,o,w,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,o,o,o,o,
      o,o,o,o,o,o,s,o,o,o,
      w,w,w,w,w,w,w,w,w,w,
   ];

   BONUS_ROOMS[0] =
   [
      w,w,w,w,w,w,w,w,w,w,
      w,w,w,w,w,w,w,w,w,w,
      w,w,w,w,w,w,w,w,w,w,
      w,w,w,w,w,w,w,w,w,w,
      w,w,w,w,w,w,w,w,w,w,
      w,w,w,w,w,w,w,w,w,w,
      w,w,w,w,w,w,w,w,w,w,
      w,w,w,w,w,w,w,w,w,w,
      w,w,w,w,w,w,w,w,w,w,
      w,w,w,w,w,w,w,w,w,w,
   ];
}

proc carve_path() {
   let starting_cell = rand_range(0, 3);

   let current_cell = starting_cell truncate i32;
   let ending_cell = current_cell;

   let LEFT_EXIT: u8 = 1;
   let RIGHT_EXIT: u8 = 2;
   let UP_EXIT: u8 = 4;
   let DOWN_EXIT: u8 = 8;
   let resulting_types: [u8; 16] =
      [0, 0, 0, 0,
       0, 0, 0, 0,
       0, 0, 0, 0,
       0, 0, 0, 0];
      // 00 01 02 03
      // 04 05 06 07
      // 08 09 10 11
      // 12 13 14 15

   loop {
      let where_to_go = rand_range(1, 5);

      let direction: i32 = 0;
      let next_direction: i32 = 0;
      if where_to_go == 1 or where_to_go == 2 {
         // left
         if (current_cell % 4 == 0) {
            direction = 4;
            next_direction = 1;
         } else {
            direction = -1;
         }
      } else if where_to_go == 3 or where_to_go == 4 {
         // right
         if (current_cell % 4 == 3) {
            direction = 4;
            next_direction = -1;
         } else {
            direction = 1;
         }
      } else if where_to_go == 5 {
         // down
         direction = 4;
      }

      if direction == 4 and current_cell >= 12 {
         // path is done
         ending_cell = current_cell;
         break;
      }



      {
         let cur_cell_usize = current_cell transmute usize;
         let resulting_cell = (current_cell + direction) transmute usize;
         if direction == -1 {
            resulting_types[cur_cell_usize] = resulting_types[cur_cell_usize] | LEFT_EXIT;
            resulting_types[cur_cell_usize] = resulting_types[cur_cell_usize] | RIGHT_EXIT;
            resulting_types[resulting_cell] = resulting_types[resulting_cell] | LEFT_EXIT;
            resulting_types[resulting_cell] = resulting_types[resulting_cell] | RIGHT_EXIT;
         } else if direction == 1 {
            resulting_types[cur_cell_usize] = resulting_types[cur_cell_usize] | LEFT_EXIT;
            resulting_types[cur_cell_usize] = resulting_types[cur_cell_usize] | RIGHT_EXIT;
            resulting_types[resulting_cell] = resulting_types[resulting_cell] | LEFT_EXIT;
            resulting_types[resulting_cell] = resulting_types[resulting_cell] | RIGHT_EXIT;
         } else if direction == 4 {
            resulting_types[cur_cell_usize] = resulting_types[cur_cell_usize] | LEFT_EXIT;
            resulting_types[cur_cell_usize] = resulting_types[cur_cell_usize] | RIGHT_EXIT;
            resulting_types[resulting_cell] = resulting_types[resulting_cell] | LEFT_EXIT;
            resulting_types[resulting_cell] = resulting_types[resulting_cell] | RIGHT_EXIT;
            resulting_types[cur_cell_usize] = resulting_types[cur_cell_usize] | DOWN_EXIT;
            resulting_types[resulting_cell] = resulting_types[resulting_cell] | UP_EXIT;
         }

         current_cell = current_cell + direction;
      }

      if next_direction > 0 {
         direction = next_direction;
         next_direction = 0;

         let cur_cell_usize = current_cell transmute usize;
         let resulting_cell = (current_cell + direction) transmute usize;
         if direction == -1 {
            resulting_types[cur_cell_usize] = resulting_types[cur_cell_usize] | LEFT_EXIT;
            resulting_types[cur_cell_usize] = resulting_types[cur_cell_usize] | RIGHT_EXIT;
            resulting_types[resulting_cell] = resulting_types[resulting_cell] | LEFT_EXIT;
            resulting_types[resulting_cell] = resulting_types[resulting_cell] | RIGHT_EXIT;
         } else if direction == 1 {
            resulting_types[cur_cell_usize] = resulting_types[cur_cell_usize] | LEFT_EXIT;
            resulting_types[cur_cell_usize] = resulting_types[cur_cell_usize] | RIGHT_EXIT;
            resulting_types[resulting_cell] = resulting_types[resulting_cell] | LEFT_EXIT;
            resulting_types[resulting_cell] = resulting_types[resulting_cell] | RIGHT_EXIT;
         } else if direction == 4 {
            resulting_types[cur_cell_usize] = resulting_types[cur_cell_usize] | LEFT_EXIT;
            resulting_types[cur_cell_usize] = resulting_types[cur_cell_usize] | RIGHT_EXIT;
            resulting_types[resulting_cell] = resulting_types[resulting_cell] | LEFT_EXIT;
            resulting_types[resulting_cell] = resulting_types[resulting_cell] | RIGHT_EXIT;
            resulting_types[cur_cell_usize] = resulting_types[cur_cell_usize] | DOWN_EXIT;
            resulting_types[resulting_cell] = resulting_types[resulting_cell] | UP_EXIT;
         }

         current_cell = current_cell + direction;
      }
   }

   for cell_i in 0..resulting_types.length {
      let current_row = cell_i / 4;
      let current_col = cell_i % 4;
      let cell_flags = resulting_types[cell_i];
      let is_hallway = (((cell_flags & LEFT_EXIT) > 0) & ((cell_flags & RIGHT_EXIT) > 0));
      let is_landing = is_hallway & ((cell_flags & UP_EXIT) > 0);
      let is_drop = is_hallway & ((cell_flags & DOWN_EXIT) > 0);

      let map = DROP_ROOMS[0];
      if is_drop {
         let drop_map = rand_range(0, (DROP_ROOMS.length - 1) extend u64);
         map = DROP_ROOMS[drop_map truncate usize];
       } else if is_landing {
         let landing_map = rand_range(0, (LANDING_ROOMS.length - 1) extend u64);
         map = LANDING_ROOMS[landing_map truncate usize];
      } else if is_hallway {
         let hallway_map = rand_range(0, (HALLWAY_ROOMS.length - 1) extend u64);
         map = HALLWAY_ROOMS[hallway_map truncate usize];
      } else {
         map = BONUS_ROOMS[0];
      }

      if cell_i == starting_cell truncate usize {
         // set the player spawn position
         let start_tile: usize = 0;
         loop {
            let test_tile = rand_range(10, map.length extend u64) truncate usize;

            if test_tile % 10 == 0 or test_tile % 10 == 9 {
               continue;
            }

            if map[test_tile] == Tile::Wall and map[test_tile - 10] == Tile::Air {
               start_tile = test_tile - 10;
               break;
            }
         }
         let start_index = ((current_row * 400) + current_col * 10) transmute usize;
         let c_offset = (start_tile / 10) * 40;
         let r_offset = (start_tile % 10);
         let final = start_index + c_offset + r_offset;
         let x = ((final % 40) * 16) truncate f64;
         let y = ((final / 40) * 16) truncate f64;
         PLAYER_POSITION.x = x;
         PLAYER_POSITION.y = y;
      }

      if cell_i == ending_cell transmute usize {
         // stick an exit into the map
         loop {
            let test_tile = rand_range(10, map.length extend u64) truncate usize;

            if test_tile % 10 == 0 or test_tile % 10 == 9 {
               continue;
            }

            if map[test_tile] == Tile::Wall and map[test_tile - 10] == Tile::Air {
               map[test_tile - 10] = Tile::Door;
               break;
            }
         }
      }

      // Hardcode a particular room for testing purposes.
      // map = DROP_ROOMS[0];

      let start_index = ((current_row * 400) + current_col * 10) transmute usize;
      TILES[start_index] = map[0];
      TILES[start_index + 1] = map[1];
      TILES[start_index + 2] = map[2];
      TILES[start_index + 3] = map[3];
      TILES[start_index + 4] = map[4];
      TILES[start_index + 5] = map[5];
      TILES[start_index + 6] = map[6];
      TILES[start_index + 7] = map[7];
      TILES[start_index + 8] = map[8];
      TILES[start_index + 9] = map[9];
      TILES[start_index + 40] = map[10];
      TILES[start_index + 41] = map[11];
      TILES[start_index + 42] = map[12];
      TILES[start_index + 43] = map[13];
      TILES[start_index + 44] = map[14];
      TILES[start_index + 45] = map[15];
      TILES[start_index + 46] = map[16];
      TILES[start_index + 47] = map[17];
      TILES[start_index + 48] = map[18];
      TILES[start_index + 49] = map[19];
      TILES[start_index + 80] = map[20];
      TILES[start_index + 81] = map[21];
      TILES[start_index + 82] = map[22];
      TILES[start_index + 83] = map[23];
      TILES[start_index + 84] = map[24];
      TILES[start_index + 85] = map[25];
      TILES[start_index + 86] = map[26];
      TILES[start_index + 87] = map[27];
      TILES[start_index + 88] = map[28];
      TILES[start_index + 89] = map[29];
      TILES[start_index + 120] = map[30];
      TILES[start_index + 121] = map[31];
      TILES[start_index + 122] = map[32];
      TILES[start_index + 123] = map[33];
      TILES[start_index + 124] = map[34];
      TILES[start_index + 125] = map[35];
      TILES[start_index + 126] = map[36];
      TILES[start_index + 127] = map[37];
      TILES[start_index + 128] = map[38];
      TILES[start_index + 129] = map[39];
      TILES[start_index + 160] = map[40];
      TILES[start_index + 161] = map[41];
      TILES[start_index + 162] = map[42];
      TILES[start_index + 163] = map[43];
      TILES[start_index + 164] = map[44];
      TILES[start_index + 165] = map[45];
      TILES[start_index + 166] = map[46];
      TILES[start_index + 167] = map[47];
      TILES[start_index + 168] = map[48];
      TILES[start_index + 169] = map[49];
      TILES[start_index + 200] = map[50];
      TILES[start_index + 201] = map[51];
      TILES[start_index + 202] = map[52];
      TILES[start_index + 203] = map[53];
      TILES[start_index + 204] = map[54];
      TILES[start_index + 205] = map[55];
      TILES[start_index + 206] = map[56];
      TILES[start_index + 207] = map[57];
      TILES[start_index + 208] = map[58];
      TILES[start_index + 209] = map[59];
      TILES[start_index + 240] = map[60];
      TILES[start_index + 241] = map[61];
      TILES[start_index + 242] = map[62];
      TILES[start_index + 243] = map[63];
      TILES[start_index + 244] = map[64];
      TILES[start_index + 245] = map[65];
      TILES[start_index + 246] = map[66];
      TILES[start_index + 247] = map[67];
      TILES[start_index + 248] = map[68];
      TILES[start_index + 249] = map[69];
      TILES[start_index + 280] = map[70];
      TILES[start_index + 281] = map[71];
      TILES[start_index + 282] = map[72];
      TILES[start_index + 283] = map[73];
      TILES[start_index + 284] = map[74];
      TILES[start_index + 285] = map[75];
      TILES[start_index + 286] = map[76];
      TILES[start_index + 287] = map[77];
      TILES[start_index + 288] = map[78];
      TILES[start_index + 289] = map[79];
      TILES[start_index + 320] = map[80];
      TILES[start_index + 321] = map[81];
      TILES[start_index + 322] = map[82];
      TILES[start_index + 323] = map[83];
      TILES[start_index + 324] = map[84];
      TILES[start_index + 325] = map[85];
      TILES[start_index + 326] = map[86];
      TILES[start_index + 327] = map[87];
      TILES[start_index + 328] = map[88];
      TILES[start_index + 329] = map[89];
      TILES[start_index + 360] = map[90];
      TILES[start_index + 361] = map[91];
      TILES[start_index + 362] = map[92];
      TILES[start_index + 363] = map[93];
      TILES[start_index + 364] = map[94];
      TILES[start_index + 365] = map[95];
      TILES[start_index + 366] = map[96];
      TILES[start_index + 367] = map[97];
      TILES[start_index + 368] = map[98];
      TILES[start_index + 369] = map[99];
   }
}
