(import "wasi_unstable" "fd_write" 
(func $fd_write (param i32) (param i32) (param i32) (param i32) (result i32)
)
)
(memory 1)
(export "memory" (memory 0))
(export "_start" (func $main))
(data 0 (i32.const 0) "\n")
(data 0 (i32.const 1) "true")
(data 0 (i32.const 5) "false")
(data 0 (i32.const 10) "-")
(data 0 (i32.const 11) "0")
(data 0 (i32.const 12) ".")
(data 0 (i32.const 13) "E")
(data 0 (i32.const 14) "NaN")
(data 0 (i32.const 17) "Infinity")
(data 0 (i32.const 25) "0E0")
(data 0 (i32.const 32) "\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\20\9a\99\99\99\99\99\99\99\99\99\99\99\99\99\99\19\15\ae\47\e1\7a\14\ae\47\e1\7a\14\ae\47\e1\7a\14\de\24\06\81\95\43\8b\6c\e7\fb\a9\f1\d2\4d\62\10\96\d4\09\68\22\6c\78\7a\a5\2c\43\1c\eb\e2\36\1a\ab\43\6e\86\1b\f0\f9\61\84\f0\68\e3\88\b5\f8\14\22\36\58\38\49\f3\c7\b4\36\8d\ed\b5\a0\f7\c6\10\6a\23\8d\c0\0e\52\a6\87\57\48\af\bc\9a\f2\d7\1a\88\4f\d7\66\a5\41\b8\9f\df\39\8c\30\e2\8e\79\15\07\a6\12\1f\51\01\2d\e6\b2\94\d6\26\e8\0b\2e\11\a4\09\51\cb\81\68\ae\d6\b7\ba\bd\d7\d9\df\7c\1b\ea\3a\a7\a2\34\ed\f1\de\5f\95\64\79\e1\7f\fd\15\bb\c8\85\e8\f6\f0\27\7f\19\11\ea\2d\81\99\97\11\f8\0d\d6\40\be\b4\0c\65\c2\81\76\49\68\c2\25\1c\93\71\de\33\98\90\70\ea\01\9b\2b\a1\86\9b\84\16\43\c1\7e\29\e0\a6\f3\21\9b\15\56\e7\9e\af\03\12\37\35\31\0f\cd\d7\85\69\2b\bc\89\d8\97\b2\d2\1c\f9\90\5a\3f\d7\df\37\21\89\96\d4\46\46\f5\0e\17\fa\73\48\cc\45\e6\5f\e7\a0\ab\43\d2\d1\5d\72\12\5d\86\0d\7a\3c\3d\66\a5\34\ac\d2\b6\4f\c9\83\1d\b1\9e\d7\94\63\97\1e\51\5d\23\42\92\0c\a1\9c\17\c1\4b\79\dd\82\df\7e\da\7d\4f\9b\0e\0a\b4\e3\12\68\ac\5b\62\d1\98\64\2a\96\e5\5e\17\10\20\39\1e\53\f0\e2\81\a7\e0\b6\ee\44\51\b2\12\40\b3\2d\18\a9\26\4f\ce\52\4d\92\58\6a\a7\8e\a8\99\c2\57\13\41\a4\7e\b0\b7\7b\50\27\aa\d8\7d\da\f5\d0\f2\1e\34\50\65\c0\5f\c9\a6\52\bb\13\cb\ae\c4\40\c2\18\90\a6\ea\99\4c\d4\eb\0e\c9\0f\3c\f2\36\9a\ce\13\80\0a\11\c3\ad\53\79\b1\41\19\60\50\be\f6\b0\1f\67\08\74\02\8b\dc\2d\c1\67\47\b3\a6\fe\5e\5a\19\52\a0\29\35\6f\b0\24\34\86\9f\c2\eb\fe\4b\48\14\db\19\ee\90\f2\59\1d\90\9e\7f\68\89\65\d6\39\10\5f\29\b0\b4\1d\c3\fb\4c\97\32\a7\a8\d5\23\f6\19\b2\ba\59\5d\b1\35\96\3d\ac\5b\1f\ba\77\e9\c4\14\28\62\e1\7d\27\5e\ab\97\56\49\4c\fb\92\87\9d\10\0d\9d\68\c9\d8\c9\ab\f2\f0\0e\7a\f8\b7\a5\95\1a\3e\17\ba\3a\7a\a1\bc\5b\5a\72\2e\2d\93\84\44\15\cb\45\fb\2e\c8\1a\ca\af\ae\8e\8b\8a\42\9d\03\11\45\09\92\b1\a6\f7\dc\b2\4a\e4\78\aa\9d\fb\38\1b\04\a1\41\c1\eb\92\7d\f5\6e\83\2d\55\b1\2f\c7\15\03\b4\67\67\89\75\64\c4\58\9c\57\77\27\26\6c\11\d2\ec\a5\d8\db\88\6d\6d\f4\c6\25\f2\0b\3d\e0\1b\db\23\eb\46\16\07\be\8a\c3\38\1e\28\a3\fd\4c\16\49\b6\55\d2\11\6c\fe\6e\9c\60\4b\53\4f\31\d7\11\0e\8a\ef\b6\4f\13\97\b1\60\67\45\85\18\82\8b\1c\a5\a1\bf\f8\72\0f\ac\27\1a\b9\6a\37\ad\01\d6\16\1e\4e\99\60\c2\72\56\b9\e1\60\55\2c\24\ce\44\12\95\16\c2\cd\03\1e\57\f5\35\ce\bb\13\6d\e3\3a\1d\ab\ab\01\0b\03\18\ac\2a\2b\d8\2f\76\8a\4f\62\17\56\89\34\6f\02\e0\bc\bb\55\13\f3\c4\6e\0c\b5\12\89\a8\ed\b1\d0\cc\c7\92\ef\1e\b8\d4\4a\7a\ee\1d\07\ba\57\8e\40\0a\d3\db\f2\4b\93\10\6f\fb\f1\17\06\c8\df\71\00\d5\a8\7c\f5\6f\0f\da\58\fc\27\13\d6\0c\66\e9\33\bb\a7\fa\bb\4c\b2\29\8e\60\a6\1e\11\d7\84\87\29\fc\52\95\c9\a3\8e\54\0b\1a\85\18\0e\ac\d0\d2\ba\c9\a8\aa\07\83\d8\76\6f\ae\9d\13\e3\ac\1a\1e\5e\dc\da\dd\a5\d1\c0\57\b2\b0\62\1f\4f\8a\48\4b\4b\b0\48\7e\51\41\9a\ac\8e\c0\1b\19\d9\a1\d3\d5\d5\59\6d\cb\da\cd\e1\56\a5\33\16\14\7b\81\dc\77\11\7b\57\3c\e2\d7\e7\ab\ea\c2\11\10\2a\cf\60\59\82\5e\f2\c6\36\26\a6\ac\aa\04\b6\19\bb\a5\80\47\68\18\f5\6b\c5\51\eb\56\55\9d\91\14\96\84\00\06\ed\79\2a\23\d1\a7\22\df\dd\7d\74\10\56\07\34\a3\e1\8f\dd\d1\81\0c\d1\31\96\fc\53\1a\45\6c\f6\e8\1a\73\e4\a7\34\3d\a7\f4\44\fd\0f\15\9e\56\f8\53\e2\28\1d\53\5d\97\52\5d\6a\97\d9\10\62\57\8d\b9\03\db\61\eb\2e\f2\50\95\10\bf\f5\1a\e8\45\a4\c7\cf\48\4e\bc\58\5b\da\dd\a6\65\91\15\20\6b\83\6c\d9\d3\71\63\ad\e2\e1\17\1f\1e\41\11\cd\11\9f\ad\28\86\1c\9f\48\04\03\f3\64\63\9b\1b\0b\db\18\be\53\6b\b0\e5\06\9d\35\8f\1d\e9\15\16\a2\15\47\cb\0f\89\f3\ea\6b\4a\91\72\e4\20\ab\11\37\bc\71\78\4c\db\b8\44\46\aa\1b\84\6d\01\45\1c\5f\63\c1\c6\d6\15\c7\03\05\55\49\03\be\9a\9d\16\19\e9\cd\6b\45\de\38\36\37\77\07\69\fe\ae\17\12\c1\41\16\46\a2\63\c1\56\58\58\72\0e\97\b1\f2\1c\ce\67\ab\d1\81\1c\01\df\79\13\f5\71\12\8e\28\17\a5\ec\55\41\ce\16\34\7f\61\dc\90\c1\0e\d8\86\12\6e\47\56\35\7d\24\20\65\02\c7\e7\68\e4\8c\a4\1d\25\39\78\f7\30\1d\80\ea\01\6c\b9\20\1d\d7\b6\17\84\fa\2c\f9\f3\b0\99\bb\34\23\61\4d\17\ac\f8\12\39\f7\47\28\53\4e\5c\5f\54\38\68\15\f2\ac\5a\1e\2e\2c\d3\b9\75\0b\7d\7f\43\60\53\44\5b\8a\48\18\58\23\dc\c7\f7\d5\30\99\cf\19\a9\36\7c\3b\6d\13\26\d2\f9\72\8c\89\b4\8e\b2\8f\0e\f1\f9\2b\15\1f\b8\41\2e\8f\a3\07\2a\72\28\a6\0b\f4\c7\bc\dd\18\fa\9a\be\a5\4f\39\bb\c1\86\1e\d6\5c\06\97\e4\13\f6\f7\30\09\19\c2\5e\9c\d7\30\f0\fa\d6\24\d4\1f\f8\5f\5a\07\14\68\e5\49\79\8d\26\2f\df\83\76\19\60\e6\e1\05\10\20\51\6e\c7\0a\52\bf\e5\cf\5e\14\1a\85\81\d1\0c\80\da\f1\05\6f\0e\99\84\d9\4b\10\f5\d4\68\82\14\00\c4\4f\d6\e4\e3\f4\a0\f5\12\1a\2b\77\ed\01\aa\99\69\d9\11\b7\1c\f7\b3\f7\db\14\bc\c5\8a\01\88\14\ee\ad\74\92\b0\c5\5c\f9\af\10\2c\09\de\68\a6\ed\7c\49\54\ea\80\6f\94\28\b3\1a\24\d4\e4\53\b8\57\ca\3a\10\55\9a\bf\76\20\5c\15\83\76\1d\43\60\79\3b\62\73\aa\ae\ff\5e\80\16\11\9e\bd\c8\d1\66\f5\2b\9d\b8\10\b1\32\cb\33\57\1b\7f\64\6d\41\52\c4\bc\7d\60\0d\f4\8e\a2\5c\df\15\cc\b6\8a\67\db\69\fd\ca\e6\3d\c3\d8\4e\7d\7f\11\df\8a\77\72\c5\0f\2f\ab\d7\2f\05\8e\e4\2e\ff\1b\80\d5\92\5b\04\73\f2\88\ac\8c\6a\3e\1d\bf\65\16\66\44\42\49\d0\28\f5\d3\56\3d\55\98\4a\ff\ea\11\a3\a0\03\42\4d\41\88\b9\57\95\bb\f3\10\32\ab\1c\e9\e6\02\68\d7\cd\39\61\79\77\fc\c2\40\5b\ef\16\54\52\02\20\79\71\61\e7\2d\f9\c9\68\cd\15\59\12\86\50\9d\99\8e\b5\68\a5\7c\5b\76\74\15\56\5b\1d\d2\a6\4a\e1\3e\91\20\51\fd\15\c5\f6\dd\44\7c\17\0e\1f\a2\1a\ff\40\4d\a7\ca\44\37\92\b1\d0\c9\12\4a\cb\69\f7\64\ce\ae\0b\11\6e\58\50\4f\b4\0f\1e\3b\3c\ee\c5\50\d8\8b\3c\a7\f1\79\73\3f\90\0c\18\c9\c9\f1\37\da\79\09\ca\85\f4\c7\c2\32\40\3d\13\db\42\e9\bf\f6\c2\a8\a9\6f\ba\0c\9e\b7\66\c8\1e\e3\9b\ba\cc\2b\cf\53\21\26\95\70\7e\2c\52\a0\18\82\49\95\70\89\72\a9\1a\b8\dd\26\65\f0\74\b3\13\9d\75\88\1a\0f\84\75\f7\8c\2f\3e\08\e7\87\85\1f\17\5e\a0\7b\72\36\91\5f\0a\26\98\06\ec\9f\37\19\df\e4\19\96\5b\f8\40\19\d5\84\46\05\f0\7f\2c\14\4c\ea\47\ab\af\c6\00\e1\10\37\05\d1\8c\99\23\10\47\dd\3f\45\4c\a4\67\ce\e7\24\d5\b4\47\8f\d2\19\06\b1\cc\9d\d6\e9\52\d8\1f\b7\dd\c3\9f\72\a8\14\38\27\0a\4b\45\ee\db\79\19\2c\7e\69\19\c2\86\10\59\d8\a9\11\a2\e3\5f\29\8f\46\30\0f\8f\36\71\1a\7a\13\bb\a7\81\1c\b3\ba\a5\6b\f3\d8\d8\5e\27\15\2f\a9\95\ec\9a\e3\28\62\51\89\8f\ad\e0\4b\ec\10\17\75\ef\e0\f7\38\0e\9d\e8\0e\4c\af\9a\ac\13\1b\79\2a\59\1a\93\2d\d8\b0\53\72\d6\25\e2\56\a9\15\2e\55\47\48\0f\be\79\8d\dc\c1\de\b7\81\45\54\11\7c\bb\0b\da\7e\96\8f\15\94\9c\97\8c\cf\08\ba\1b\97\2f\d6\14\ff\11\a6\77\76\b0\df\d6\72\6d\2e\16\79\8c\de\43\ff\a7\51\f9\91\f3\b2\78\f5\bd\be\11\8e\ad\fd\d2\fe\3f\1c\c2\1c\ec\b7\5a\22\63\64\1c\d8\8a\64\42\32\33\b0\01\17\f0\5f\15\b5\b5\b6\16\46\a2\83\9b\8e\c2\59\01\ac\59\e6\dd\90\c4\2b\12\a3\03\39\5f\17\04\f6\ce\ac\c2\a3\fc\1a\d4\12\1d\83\9c\2d\4c\ac\69\5e\72\bd\9b\1c\ca\48\43\42\17\9c\e3\8a\d6\89\54\18\f5\fd\e2\16\08\07\69\9b\12\c6\05\ab\bd\0f\54\8d\ee\2f\6b\f1\0c\d8\74\c5\1d\05\6b\22\fe\72\76\d7\be\8c\22\c1\70\46\2a\d1\17\04\bc\4e\cb\28\c5\12\ff\d6\4e\67\8d\6b\bb\0d\13\a0\f9\7d\78\74\3b\51\cb\24\7e\d8\7b\12\5f\7c\1e\4d\61\fe\f9\29\c9\0d\09\b7\31\ad\fc\41\7f\63\18\0a\81\cb\94\21\d4\d7\a0\c5\27\24\ca\34\cc\82\13\77\ce\78\54\cf\b9\bf\67\6f\0c\6d\43\21\ad\37\1f\f9\71\2d\dd\a5\94\cc\1f\59\70\8a\cf\4d\57\f9\18\c7\f4\bd\7d\51\dd\d6\7f\7a\f3\a1\3f\3e\ac\fa\13\0b\ee\2f\c9\e8\2e\be\ff\c3\b8\9c\32\fd\79\f7\1f\d6\24\f3\a0\20\bf\31\66\36\fa\16\c2\fd\c7\92\19\78\1d\5c\1a\1a\cc\27\b8\5e\fb\ab\01\cb\6c\75\14\60\e4\7c\7b\ae\09\53\93\18\c9\bc\67\a2\f0\5d\10\99\a0\94\c5\b0\42\eb\1e\f4\74\94\3f\6a\e7\2f\1a\e1\e6\76\04\27\02\89\e5\5c\2a\dd\32\88\1f\f3\14\e7\eb\2b\9d\85\ce\a0\b7\b0\ee\b0\28\a0\7f\c2\10\d8\df\df\61\6f\4a\01\59\b4\4a\4e\74\33\cc\d0\1a\ad\4c\e6\e7\25\d5\cd\e0\29\a2\3e\90\8f\d6\73\15\f1\d6\51\86\51\77\71\4d\ee\b4\cb\d9\72\78\29\11\e8\57\e9\d6\e8\be\e8\7b\b0\54\ac\8f\84\8d\75\1b\20\13\21\df\53\32\ba\fc\59\dd\89\0c\6a\a4\f7\15\80\42\e7\18\43\28\c8\63\ae\4a\6e\70\ee\e9\92\11\66\6a\d8\27\38\0d\0d\06\17\11\4a\1a\17\43\1e\1c\eb\21\ad\ec\2c\a4\3d\6b\12\74\6e\7b\12\9c\7e\16\56\4e\57\bd\f0\1c\fe\88\db\5c\58\fc\41\e3\fe\11\23\4a\25\62\b4\94\96\41\5f\61\8d\60\36\05\cb\1c\e9\d4\1d\e8\29\aa\ab\67\7f\e7\3d\4d\f8\d0\08\17\87\dd\17\20\bb\21\56\b9\32\b9\64\d7\f9\73\6d\12\a5\95\8c\66\2b\69\23\c2\ea\c1\3a\f2\c2\ec\7b\1d\1d\de\d6\1e\89\ba\82\ce\bb\34\62\5b\02\57\96\17\18\18\df\4b\07\62\35\a5\fc\f6\b4\e2\01\ac\de\12\59\f3\64\79\d8\9c\88\3b\94\f1\87\37\36\13\31\1e\e1\f5\83\c7\46\4a\6d\fc\dc\5a\06\c6\91\42\27\18\1a\2b\03\06\9f\6e\57\30\17\af\9e\d1\a7\9b\52\13\90\de\d1\3c\cb\7d\25\1a\25\18\31\1c\a6\92\ea\1e\40\e5\a7\30\3c\fe\1d\48\b7\79\5a\e3\84\a8\bb\18\00\51\86\c0\c9\31\4b\d3\c5\c7\ae\82\9d\53\c9\13\cd\b4\a3\cd\42\e9\11\52\09\a6\17\d1\c8\85\a8\1f\a4\90\1c\3e\02\21\db\74\07\b8\df\40\3a\9e\53\19\50\0d\4a\cb\01\b4\15\f7\05\60\19\67\fb\e4\42\14\a7\0a\08\09\9b\29\de\f8\37\b3\7a\52\fc\83\35\10\d7\dd\0c\a8\91\42\30\8e\59\b8\2a\b7\93\39\ef\19\13\4b\0a\20\0e\02\8d\3e\e1\f9\ee\f8\42\61\bf\14\0f\3c\08\80\3e\9b\3d\65\e7\c7\58\fa\9b\1a\99\10\e4\2c\0d\00\64\f8\c8\6e\a5\0c\8e\90\f9\90\8e\1a\ea\23\a4\99\e9\f9\d3\8b\b7\a3\71\40\61\da\3e\15\bb\1c\50\e1\ba\94\a9\3c\f9\82\f4\99\1a\15\ff\10\2b\61\b3\9b\c4\ba\75\c7\8e\d1\20\c3\5d\bb\31\1b\89\1a\29\16\6a\95\c4\d2\0b\0e\e7\68\b1\62\c1\15\a1\7b\ba\11\88\77\d0\db\6f\3e\1f\87\27\82\67\11\9b\92\5d\1c\40\bf\80\2c\e6\63\98\3e\3f\d0\d8\1b\49\75\e4\49\33\cc\33\bd\51\b6\46\65\ff\0c\47\16\d4\5d\50\6e\8f\d6\8f\ca\a7\5e\05\51\cc\70\d2\11\53\c9\b3\e3\4b\57\19\44\d9\fd\6e\4e\ad\e7\83\1c\a9\3a\f6\82\09\79\47\03\e1\97\25\a5\8a\ec\cf\16\ba\fb\c4\68\d4\60\6c\cf\80\79\84\ea\6e\f0\3f\12\2a\f9\07\0e\87\34\7a\e5\9a\f5\d3\10\4b\1a\33\1d\22\94\39\0b\6c\90\2e\51\e2\2a\43\da\08\15\5c\17\b5\a9\c7\d5\bc\a6\8b\da\81\55\cf\e1\d3\10\b0\12\87\0f\d9\22\2e\71\df\90\9c\55\e5\02\53\81\e6\1d\6c\0c\14\4f\8b\5a\4c\da\16\de\1d\cf\a8\9a\eb\17\8a\a3\a9\a5\a2\7b\a3\ae\78\7e\b1\a5\20\e2\22\13\a9\05\a9\a2\6a\5f\d2\7d\27\97\b5\a2\9a\36\9e\1e\54\d1\20\82\88\7f\db\97\1f\ac\f7\4e\15\92\7e\18\77\a7\80\ce\06\66\7c\79\4c\23\c6\d8\dd\74\98\13\f1\0b\01\e4\0a\70\2d\8f\ad\6b\a3\27\96\54\5a\1f\5a\d6\00\50\a2\59\24\0c\be\ef\b5\1f\78\10\15\19\15\45\9a\d9\81\14\1d\70\fe\f2\f7\b2\f9\d9\10\14\77\6a\7b\14\9b\43\17\c0\fe\5b\c6\28\2e\7b\0d\10\f2\43\92\ed\c4\05\f2\cc\ca\2c\0a\0e\7d\2b\af\19\c2\9c\0e\be\d0\37\5b\0a\6f\bd\a1\71\ca\22\8c\14\ce\e3\3e\cb\73\f9\48\08\8c\97\b4\27\d5\1b\70\10\b0\9f\64\78\ec\5b\0e\da\ac\25\54\0c\55\f9\4c\1a\c0\7f\50\60\f0\af\3e\7b\bd\b7\a9\d6\10\61\0a\15\33\66\40\80\f3\bf\cb\95\97\2c\ee\de\73\1a\d5\10\52\70\cd\66\52\66\ac\ef\58\47\b0\64\b9\90\ee\1a\db\59\a4\b8\0e\85\23\26\47\6c\f3\b6\fa\a6\8b\15\49\ae\b6\93\d8\d0\82\1e\6c\23\29\5f\95\85\3c\11\75\b0\8a\1f\f4\1a\9e\fd\ac\38\a8\fe\ee\08\94\1b\f7\59\d5\b2\29\af\b1\97\bd\93\86\98\25\07\10\16\2c\7b\77\f5\ba\25\8e\ac\97\dc\9e\13\1e\6c\a6\11\13\c5\58\22\2b\09\7d\7a\bf\2d\fe\b8\c9\79\3d\1c\76\6a\ad\4e\ef\a0\fd\61\cc\57\cb\60\a1\94\97\16\c5\ee\bd\0b\59\1a\fe\e7\09\13\09\e7\4d\dd\12\12\3a\b1\fc\45\5b\5d\63\a6\dc\84\0e\d8\af\fb\ea\1c\c8\8d\30\6b\af\4a\1c\85\b0\d0\3e\13\f3\62\22\17\d4\d7\26\bc\f2\6e\e3\d0\26\da\cb\75\c2\e8\81\12\86\8c\a4\c6\ea\17\9f\b4\d7\29\46\89\9d\a7\9c\1d\6b\70\50\05\ef\df\18\2a\46\ee\04\a1\17\86\b0\17\89\f3\d9\9d\25\b3\e0\54\6b\8b\9d\4d\79\9e\f3\12\74\52\f6\62\6f\eb\cd\87\78\45\2f\7c\28\97\52\1e\5d\a8\5e\82\bf\22\0b\d3\c6\6a\bf\c9\86\12\42\18\e4\b9\4b\68\cc\1b\3c\0f\9f\88\ff\3a\d2\0e\68\13\6d\29\79\40\7a\2c\60\18\98\da\98\91\83\e4\0c\1f\24\21\94\33\c8\56\b3\46\13\e2\13\0e\36\1d\d7\18\b6\4d\43\29\a0\78\8f\38\dc\b4\dc\a4\91\4a\df\13\8a\af\6b\a8\66\27\7f\5a\60\21\61\a1\82\aa\cb\1f\a2\bf\ef\b9\eb\85\32\15\4d\b4\4d\b4\9b\bb\6f\19\4e\99\8c\61\89\d1\8e\aa\3d\90\a4\f6\e2\62\59\14\0c\e1\d6\1a\a1\a7\d8\ee\ca\d9\b6\2b\4f\82\47\10\45\9b\24\5e\9b\72\27\7e\11\f6\8a\df\b1\03\0c\1a\04\49\1d\18\49\f5\85\fe\0d\f8\3b\19\5b\69\d6\14\d0\a0\4a\13\d4\5d\9e\cb\a4\f9\2f\14\7c\87\ab\10\4d\01\11\52\53\c9\63\df\3a\5c\e6\b9\f9\0b\ac\1a\71\67\da\74\0f\a1\1c\19\2f\b0\1e\fb\fa\6f\56\15\c1\52\48\2a\d9\80\b0\ad\25\c0\4b\2f\2f\f3\11\11\34\51\0d\aa\8e\34\e7\15\09\cd\12\b2\7e\eb\4f\1b\c4\0d\71\ee\3e\5d\1f\ab\6d\0a\0f\28\32\89\d9\15\9d\a4\8d\8b\65\17\19\bc\57\08\0c\20\28\d4\7a\11\94\3a\7c\12\3c\f2\f4\2c\59\0d\e0\cc\d9\b9\f7\1b\43\95\96\db\fc\f4\c3\f0\e0\3d\b3\70\e1\c7\5f\16\03\11\12\16\97\5d\36\5a\1a\cb\f5\26\81\39\e6\11\04\e8\1c\f0\24\fc\56\90\90\de\22\0b\35\8f\a3\1c\d0\ec\e3\8c\1d\30\df\d9\a6\4b\82\a2\5d\3f\e9\16\da\23\83\3d\b1\59\7f\e1\eb\a2\ce\4e\b1\32\54\12\5c\39\38\2f\b5\c2\cb\68\79\d1\7d\e4\4e\84\53\1d\e3\2d\60\bf\5d\35\d6\53\94\a7\64\50\72\03\76\17\1c\8b\e6\65\b1\2a\78\a9\76\ec\b6\a6\8e\cf\c4\12\fa\44\d7\6f\b5\aa\26\0f\f1\13\8b\d7\7d\b2\07\1e\62\6a\df\bf\2a\22\52\3f\27\43\6f\ac\64\28\06\18\4e\88\7f\99\88\4e\db\65\1f\9c\f2\89\50\20\38\13\4a\0d\cc\28\74\4a\c5\6f\65\93\ea\0f\b4\33\c0\1e\3b\a4\09\87\f6\a1\6a\59\84\0f\22\73\f6\c2\99\18\96\b6\07\6c\f8\e7\ee\ad\36\d9\b4\f5\91\35\ae\13\56\57\0c\e0\f3\3f\7e\49\24\f5\ba\22\83\22\7d\1f\45\ac\d6\4c\f6\ff\64\d4\e9\90\95\e8\68\e8\30\19\d1\89\78\3d\f8\ff\83\43\ee\73\44\ed\53\20\27\14\74\a1\93\97\c6\cc\9c\cf\f1\8f\03\f1\0f\4d\1f\10\52\02\b9\25\a4\47\61\7f\1c\b3\05\e8\7f\ae\cb\19\0f\35\c7\b7\e9\d2\4d\cc\16\5c\d1\ec\ff\f1\a2\14\d9\90\d2\5f\21\0f\0b\3d\12\b0\da\23\33\5b\82\10\c1\e7\50\99\68\4b\ab\61\50\b3\2a\06\85\2b\6a\1a\67\b9\40\14\ba\a2\22\4e\40\5c\55\6b\6a\bc\21\15\53\94\00\dd\94\e8\4e\0b\cd\49\44\bc\ee\c9\e7\10\51\ed\00\c8\87\da\17\12\48\a9\d3\c6\4a\76\0c\1b\da\bd\00\a0\6c\48\46\db\6c\87\dc\6b\d5\91\a3\15\af\64\cd\4c\bd\06\05\49\8a\9f\e3\ef\dd\a7\4f\11\b1\3a\e2\7a\c8\0a\08\a8\43\ff\38\e6\2f\a6\b2\1b\f4\2e\e8\fb\39\a2\39\53\69\ff\93\1e\f3\84\28\16\5d\f2\ec\2f\fb\b4\c7\75\87\ff\0f\b2\f5\03\ba\11\2e\ea\47\e6\91\21\d9\22\3f\ff\7f\b6\22\d3\5c\1c\f2\54\06\85\41\81\7a\b5\65\ff\ff\91\e8\a8\b0\16\f5\43\38\37\01\01\62\c4\b7\32\33\db\86\ed\26\12\ee\9f\f3\f1\01\68\36\3a\59\84\eb\91\a4\15\0b\1d\8b\19\f6\27\9b\b9\5e\fb\e0\69\bc\74\50\11\3c\17\d6\7a\5e\86\e2\fa\7e\2f\e7\87\63\5d\40\74\96\12\56\91\fd\d6\d0\f7\97\e5\71\d9\38\62\cd\86\bd\1d\ab\da\ca\78\0d\93\79\84\c1\7a\2d\e8\3d\d2\ca\17\56\15\6f\2d\71\42\61\d0\9a\c8\8a\86\31\a8\08\13\22\22\18\af\4e\6a\68\4d\91\da\aa\3d\4f\40\74\1e\e8\b4\79\f2\3e\88\53\a4\da\ae\88\64\3f\00\5d\18\87\5d\61\28\ff\6c\dc\e9\ae\58\6d\50\cc\99\7d\13\a4\95\68\0d\65\ae\60\a9\e4\8d\48\1a\7a\5c\2f\1f\83\44\ed\3d\b7\be\b3\ba\83\71\a0\ae\61\b0\f2\18\36\9d\8a\31\2c\32\f6\2e\36\c1\e6\be\e7\59\f5\13\f0\61\77\82\13\1d\bd\e4\89\9b\d7\97\3f\f6\ee\1f\5a\4e\2c\35\a9\7d\ca\83\a1\af\df\df\32\f8\8b\19\15\a5\56\f7\20\fe\a1\9c\e7\f2\b2\4c\c2\f9\6f\14\aa\1d\12\f9\b3\31\1b\4a\b9\28\8f\70\9b\94\59\10\dd\95\b6\c1\ec\b5\5e\43\f5\0d\e5\80\c5\ed\28\1a\4a\de\5e\01\57\5e\e5\35\c4\a4\1d\67\04\8b\ed\14\d5\b1\18\01\ac\7e\b7\c4\69\1d\7e\52\d0\08\be\10\22\b6\5a\9b\79\97\25\a1\0f\2f\30\b7\b3\a7\c9\1a\81\5e\15\49\61\ac\b7\4d\d9\58\f3\f8\c2\1f\6e\15\9b\4b\44\07\81\23\c6\d7\ad\e0\f5\93\35\e6\24\11\2b\ac\d3\3e\9b\05\3d\59\49\34\56\86\22\3d\6e\1b\bc\89\dc\cb\15\9e\fd\e0\6d\c3\11\05\82\ca\f1\15\63\a1\e3\6f\11\18\fe\b3\24\69\41\37\9b\3b\8e\11\d1\9b\d2\7f\b5\59\63\86\07\75\35\25\c5\c5\16\1c\0e\e3\0e\33\91\14\e9\d1\d2\90\f7\50\37\9e\78\16\0b\1c\3f\8f\da\76\ba\74\75\0d\c6\40\2c\18\fa\11\78\c6\31\e5\90\24\f7\ed\bb\48\a3\67\e0\59\c3\1c\2d\05\5b\b7\40\1d\2c\8b\c9\d3\b5\1f\4d\ae\02\17\24\04\7c\5f\cd\7d\56\6f\d4\0f\2b\e6\70\8b\68\12\06\6d\c6\98\48\c9\f0\7e\ed\b2\11\3d\4e\12\74\1d\9f\bd\9e\e0\06\a1\c0\98\57\c2\a7\fd\a4\0e\90\17\e6\ca\4b\4d\d2\80\00\47\79\9b\ec\ca\50\a5\d9\12\a2\44\79\48\1d\ce\00\d8\8e\c5\ad\44\81\08\29\1e\82\d0\2d\6d\17\d8\33\13\3f\d1\57\9d\9a\d3\20\18\ce\a6\24\24\79\46\f6\a8\65\a7\ac\4a\15\76\4d\13\7d\a4\3a\a0\8e\3d\bd\74\6f\a5\7a\77\88\56\e2\1e\64\50\95\e6\3e\31\64\5d\8c\b7\fb\c5\06\12\b5\18\b7\a6\aa\eb\cb\8d\b6\4a\70\2c\96\d1\6b\0e\c4\13\57\a4\aa\12\13\16\24\11\1a\47\f0\e8\12\17\a0\1f\df\e9\ee\0e\dc\44\83\da\14\6c\f3\53\42\df\4c\19\80\21\bf\d8\7c\9d\02\e2\43\23\29\43\68\7f\3d\14\33\81\32\7a\fd\7d\68\4e\36\1c\54\cf\b9\32\31\10\b8\ce\50\90\95\c9\40\4a\bd\c6\b9\4b\29\51\e8\19\c6\0b\a7\a6\77\d4\33\08\31\d2\c7\6f\87\da\b9\14\6b\09\ec\1e\c6\76\29\a0\8d\0e\d3\bf\d2\ae\94\10\df\db\ac\64\a3\57\42\00\49\17\b8\ff\1d\7e\87\1a\19\e3\23\ea\b5\df\01\cd\a0\12\60\99\b1\31\39\15\ae\b5\1c\88\91\4c\ce\70\4d\75\e6\ad\27\8e\fa\10\e2\55\94\a6\b5\ad\e3\1a\af\bb\70\49\0c\7d\2a\1b\e8\77\43\85\c4\57\e9\7b\f2\62\8d\07\3d\97\bb\15\87\f9\35\04\6a\79\87\c9\8e\b5\0a\06\64\df\62\11\71\c2\bc\06\10\8f\a5\75\e4\88\77\d6\6c\65\d1\1b\27\35\ca\6b\a6\a5\b7\f7\e9\d3\92\ab\f0\1d\41\16\1f\c4\a1\bc\1e\1e\c6\5f\ee\0f\0f\56\8d\b1\cd\11\65\d3\02\61\64\63\a3\ff\16\b3\b1\89\48\4f\7c\1c\51\dc\9b\4d\50\1c\e9\32\df\28\8e\d4\06\d9\c9\16\0e\7d\49\71\73\e3\20\8f\b2\20\d8\76\05\14\3b\12\7c\2e\0f\82\85\05\9b\7e\ea\cd\59\f1\3b\53\2b\1d\ca\be\a5\01\9e\37\af\cb\ee\d7\47\f4\2f\dc\55\17\a1\98\84\34\4b\f9\58\09\bf\ac\6c\c3\8c\16\ab\12")
(data 0 (i32.const 5504) "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\40\1f\00\00\00\00\00\00\00\00\00\00\00\00\00\00\88\13\00\00\00\00\00\00\00\00\00\00\00\00\00\00\6a\18\00\00\00\00\00\00\00\00\00\00\00\00\00\80\84\1e\00\00\00\00\00\00\00\00\00\00\00\00\00\d0\12\13\00\00\00\00\00\00\00\00\00\00\00\00\00\84\d7\17\00\00\00\00\00\00\00\00\00\00\00\00\00\65\cd\1d\00\00\00\00\00\00\00\00\00\00\00\00\20\5f\a0\12\00\00\00\00\00\00\00\00\00\00\00\00\e8\76\48\17\00\00\00\00\00\00\00\00\00\00\00\00\a2\94\1a\1d\00\00\00\00\00\00\00\00\00\00\00\40\e5\9c\30\12\00\00\00\00\00\00\00\00\00\00\00\90\1e\c4\bc\16\00\00\00\00\00\00\00\00\00\00\00\34\26\f5\6b\1c\00\00\00\00\00\00\00\00\00\00\80\e0\37\79\c3\11\00\00\00\00\00\00\00\00\00\00\a0\d8\85\57\34\16\00\00\00\00\00\00\00\00\00\00\c8\4e\67\6d\c1\1b\00\00\00\00\00\00\00\00\00\00\3d\91\60\e4\58\11\00\00\00\00\00\00\00\00\00\40\8c\b5\78\1d\af\15\00\00\00\00\00\00\00\00\00\50\ef\e2\d6\e4\1a\1b\00\00\00\00\00\00\00\00\00\92\d5\4d\06\cf\f0\10\00\00\00\00\00\00\00\00\80\f6\4a\e1\c7\02\2d\15\00\00\00\00\00\00\00\00\20\b4\9d\d9\79\43\78\1a\00\00\00\00\00\00\00\00\94\90\02\28\2c\2a\8b\10\00\00\00\00\00\00\00\00\b9\34\03\32\b7\f4\ad\14\00\00\00\00\00\00\00\40\e7\01\84\fe\e4\71\d9\19\00\00\00\00\00\00\00\88\30\81\12\1f\2f\e7\27\10\00\00\00\00\00\00\00\aa\7c\21\d7\e6\fa\e0\31\14\00\00\00\00\00\00\80\d4\db\e9\8c\a0\39\59\3e\19\00\00\00\00\00\00\a0\c9\52\24\b0\08\88\ef\8d\1f\00\00\00\00\00\00\04\be\b3\16\6e\05\b5\b5\b8\13\00\00\00\00\00\00\85\ad\60\9c\c9\46\22\e3\a6\18\00\00\00\00\00\40\e6\d8\78\03\7c\d8\ea\9b\d0\1e\00\00\00\00\00\e8\8f\87\2b\82\4d\c7\72\61\42\13\00\00\00\00\00\e2\73\69\b6\e2\20\79\cf\f9\12\18\00\00\00\00\80\da\d0\03\64\1b\69\57\43\b8\17\1e\00\00\00\00\90\88\62\82\1e\b1\a1\16\2a\d3\ce\12\00\00\00\00\b4\2a\fb\22\66\1d\4a\9c\f4\87\82\17\00\00\00\00\61\f5\b9\ab\bf\a4\5c\c3\f1\29\63\1d\00\00\00\a0\5c\39\54\cb\f7\e6\19\1a\37\fa\5d\12\00\00\00\c8\b3\47\29\be\b5\60\a0\e0\c4\78\f5\16\00\00\00\ba\a0\99\b3\2d\e3\78\c8\18\f6\d6\b2\1c\00\00\40\74\04\40\90\fc\8d\4b\7d\cf\59\c6\ef\11\00\00\50\91\05\50\b4\7b\71\9e\5c\43\f0\b7\6b\16\00\00\a4\f5\06\64\a1\da\0d\c6\33\54\ec\a5\06\1c\00\80\86\59\84\de\a4\a8\c8\5b\a0\b4\b3\27\84\11\00\20\e8\6f\25\16\ce\d2\ba\72\c8\a1\a0\31\e5\15\00\28\e2\cb\ae\9b\81\87\69\8f\3a\ca\08\7e\5e\1b\00\59\6d\3f\4d\01\b1\f4\a1\99\64\7e\c5\0e\1b\11\40\af\48\8f\a0\41\dd\71\0a\c0\fd\dd\76\d2\61\15\10\db\1a\b3\08\92\54\0e\0d\30\7d\95\14\47\ba\1a\ea\c8\f0\6f\45\db\f4\28\08\3e\6e\dd\6c\6c\b4\10\24\fb\ec\cb\16\12\32\33\8a\cd\c9\14\88\87\e1\14\ed\39\e8\7e\9c\96\fe\bf\ec\40\fc\19\6a\e9\19\1a\34\24\51\cf\21\1e\ff\f7\93\a8\3d\50\e2\31\50\10\41\6d\25\43\aa\e5\fe\f5\b8\12\4d\e4\5a\3e\64\14\92\c8\ee\d3\14\9f\7e\33\67\57\60\9d\f1\4d\7d\19\b6\7a\ea\08\da\46\5e\00\41\6d\b8\04\6e\a1\dc\1f\b2\8c\92\45\48\ec\3a\a0\48\44\f3\c2\e4\e4\e9\13\de\2f\f7\56\5a\a7\49\c8\5a\15\b0\f3\1d\5e\e4\18\d6\fb\b4\ec\30\11\5c\7a\b1\1a\9c\70\a5\75\1d\1f\65\1d\f1\93\be\8a\79\ec\ae\90\61\66\87\69\72\13\bf\64\ed\38\6e\ed\97\a7\da\f4\f9\3f\e9\03\4f\18\ef\bd\28\c7\c9\e8\7d\51\11\72\f8\8f\e3\c4\62\1e\b5\76\79\1c\7e\b1\ee\d2\4a\47\fb\39\0e\bb\fd\12\62\d4\97\a3\dd\5d\aa\87\1d\19\7a\c8\d1\29\bd\17\7b\c9\7d\0c\55\f5\94\e9\64\9f\98\3a\46\74\ac\1d\ed\9d\ce\27\55\19\fd\11\9f\63\9f\e4\ab\c8\8b\12\68\45\c2\71\aa\5f\7c\d6\86\3c\c7\dd\d6\ba\2e\17\c2\d6\32\0e\95\77\1b\8c\a8\0b\39\95\8c\69\fa\1c\39\c6\df\28\bd\2a\91\57\49\a7\43\dd\f7\81\1c\12\c8\b7\17\73\6c\75\75\ad\1b\91\94\d4\75\a2\a3\16\ba\a5\dd\8f\c7\d2\d2\98\62\b5\b9\49\13\8b\4c\1c\94\87\ea\b9\bc\c3\83\9f\5d\11\14\0e\ec\d6\af\11\79\29\65\e8\ab\b4\64\07\b5\15\99\11\a7\cc\1b\16\d7\73\7e\e2\d6\e1\3d\49\22\5b\ff\d5\d0\bf\a2\1b\66\08\8f\4d\26\ad\c6\6d\f5\98\bf\85\e2\b7\45\11\80\ca\f2\e0\6f\58\38\c9\32\7f\2f\27\db\25\97\15\20\7d\2f\d9\8b\6e\86\7b\ff\5e\fb\f0\51\ef\fc\1a\34\ae\bd\67\17\05\34\ad\5f\1b\9d\36\93\15\de\10\c1\19\ad\41\5d\06\81\98\37\62\44\04\f8\9a\15\15\32\60\18\92\f4\47\a1\7e\c5\7a\55\05\b6\01\5b\1a\1f\3c\4f\db\f8\cc\24\6f\bb\6c\55\c3\11\e1\78\10\27\0b\23\12\37\00\ee\4a\ea\c7\2a\34\56\19\97\14\f0\cd\ab\d6\44\80\a9\dd\e4\79\35\c1\ab\df\bc\19\b6\60\2b\06\2b\f0\89\0a\2f\6c\c1\58\cb\0b\16\10\e4\38\b6\c7\35\6c\2c\cd\3a\c7\f1\2e\be\8e\1b\14\1d\c7\a3\39\43\87\77\80\09\39\ae\ba\6d\72\22\19\e4\b8\0c\08\14\69\95\e0\4b\c7\59\29\09\0f\6b\1f\8e\f3\07\85\ac\61\5d\6c\8f\1c\d8\b9\65\e9\a2\13\72\f0\49\a6\17\ba\74\47\b3\23\4e\28\bf\a3\8b\18\8f\6c\dc\8f\9d\e8\51\19\a0\ac\61\f2\ae\8c\ae\1e\d9\c3\e9\79\62\31\d3\0f\e4\0b\7d\57\ed\17\2d\13\cf\34\64\18\bb\fd\c7\13\dd\4e\5c\ad\e8\5d\f8\17\03\42\7d\de\29\fd\b9\58\94\62\b3\d8\62\75\f6\1d\42\49\0e\2b\3a\3e\74\b7\9c\1d\70\c7\5d\09\ba\12\92\db\d1\b5\c8\4d\51\e5\03\25\4c\39\b5\8b\68\17\77\52\46\e3\3a\a1\a5\de\44\2e\9f\87\a2\ae\42\1d\8a\f3\0b\ce\c4\84\27\0b\eb\7c\c3\94\25\ad\49\12\6d\f0\8e\01\f6\65\f1\cd\25\5c\f4\f9\6e\18\dc\16\88\ac\f2\81\73\bf\6d\41\2f\73\71\b8\8a\1e\93\1c\d5\ab\37\31\a8\97\e4\88\fd\e7\46\b3\16\f3\db\11\ca\96\85\3d\92\bd\1d\eb\fc\a1\18\60\dc\ef\52\16\7d\fc\e6\cc\f6\2c\e5\25\7c\ca\1e\78\d3\ab\e7\1b\ce\5d\10\40\1a\3c\af\97\8d\3e\13\2b\64\cb\70\11\42\75\14\d0\20\0b\9b\fd\30\0e\d8\35\3d\fe\cc\15\92\92\19\04\e9\cd\01\3d\bd\11\4e\83\cc\3d\40\1b\9b\fb\8f\a2\b1\20\21\46\16\cb\10\d2\9f\26\08\11\82\fa\33\0b\de\68\a9\d7\db\fd\94\c6\47\30\4a\15\23\f9\00\8e\15\c3\93\cd\52\3d\3a\b8\59\bc\9c\1a\b6\9b\c0\78\ed\59\7c\c0\53\66\24\13\b8\f5\a1\10\a3\c2\f0\d6\68\70\9b\b0\e8\7f\ed\17\26\73\ca\14\4c\f3\ac\0c\83\4c\c2\dc\e2\df\e8\9d\ef\0f\fd\19\0f\18\ec\e7\d1\6f\f9\c9\ed\8b\b1\c2\f5\29\3e\10\13\1e\e7\61\c6\cb\77\3c\e9\ee\5d\33\73\b4\4d\14\98\e5\60\fa\b7\be\95\8b\a3\6a\35\00\90\21\61\19\fe\1e\f9\f8\65\2e\7b\6e\4c\c5\42\00\f4\69\b9\1f\5f\b3\9b\bb\ff\fc\0c\c5\4f\bb\29\80\38\e2\d3\13\37\a0\82\aa\3f\3c\50\b6\23\2a\34\a0\c6\da\c8\18\44\48\23\95\4f\4b\e4\a3\ac\34\41\48\78\11\fb\1e\2b\0d\36\bd\11\af\6e\e6\eb\c0\28\2d\eb\ea\5c\13\75\90\83\2c\d6\5a\0a\e0\26\f1\72\f8\a5\25\34\18\93\74\a4\b7\8b\f1\0c\98\70\ad\8f\76\0f\2f\41\1e\dc\c8\c6\52\f7\16\08\5f\66\cc\19\aa\69\bd\e8\12\13\7b\78\27\b5\1c\ca\f6\7f\3f\a0\14\c4\ec\a2\17\d7\99\56\71\e2\a3\7c\f4\5f\4f\c8\19\f5\a7\8b\1d\26\20\d6\86\6d\e6\cd\f8\9b\31\1d\30\f9\48\77\12\30\a8\8b\e8\08\60\01\f7\02\7e\24\7c\37\1b\15\17\3c\92\ae\22\0b\b8\c1\b4\83\9d\2d\5b\05\62\da\1c\65\1b\ad\f5\06\13\f9\50\72\82\fc\58\43\7d\08\12\3f\62\18\b3\c8\57\37\e5\0e\a3\3b\2f\94\9c\8a\16\cf\7a\de\df\ba\2d\85\9e\d2\8b\0a\3b\b9\43\2d\1c\c1\0c\eb\cb\94\3c\13\a3\63\97\e6\c4\53\4a\9c\11\f1\cf\e5\fe\b9\0b\d8\8b\3c\3d\20\b6\e8\5c\03\16\ee\43\9f\7e\a8\0e\ce\ae\8b\4c\a8\e3\22\34\84\1b\75\8a\23\4f\29\c9\40\4d\d7\2f\49\ce\95\a0\32\11\12\6d\ec\a2\73\fb\90\20\cd\7b\db\41\bb\48\7f\15\56\88\a7\8b\50\3a\b5\68\c0\5a\52\12\ea\1a\df\1a\36\b5\48\57\72\44\71\41\b8\78\73\4b\d2\70\cb\10\83\e2\1a\ed\8e\95\cd\51\e6\56\50\de\06\4d\fe\14\24\9b\61\a8\f2\fa\40\e6\9f\6c\e4\95\48\e0\3d\1a\f7\00\3d\a9\d7\9c\e8\ef\e3\c3\ae\5d\2d\ac\66\10\34\41\8c\93\0d\c4\e2\eb\dc\74\1a\b5\38\57\80\14\81\51\6f\f8\10\75\db\26\14\12\61\e2\06\6d\a0\19\f1\92\45\9b\2a\29\49\98\4c\ab\7c\4d\24\44\04\10\ad\f7\16\42\75\73\5b\be\1f\d6\db\60\2d\55\05\14\98\b5\9c\92\52\50\f2\ad\a7\cb\12\b9\78\aa\06\19\ff\e2\43\37\67\e4\6e\99\91\7e\57\e7\16\55\48\1f\df\6d\8a\82\c0\4e\e5\ff\1a\af\96\50\2e\35\8d\13\57\09\2d\a3\70\a2\de\bf\e1\5a\bc\e4\79\82\70\18\ad\4b\f8\cb\0c\4b\d6\2f\9a\71\eb\5d\18\a3\8c\1e\4c\2f\7b\ff\e7\ee\e5\5d\00\27\b3\3a\ef\e5\17\13\1f\fb\59\ff\a1\6a\5f\75\c0\f0\5f\09\6b\df\dd\17\e7\79\30\7f\4a\45\b7\92\f0\ec\b7\cb\45\57\d5\1d\30\4c\7e\8f\4e\8b\b2\5b\16\f4\52\9f\8b\56\a5\12\3c\df\5d\33\22\2e\9f\f2\1b\b1\27\87\2e\ac\4e\17\0b\57\35\c0\aa\f9\46\ef\62\9d\f1\28\3a\57\22\1d\67\56\21\b8\0a\5c\8c\d5\5d\02\97\59\84\76\35\12\01\ac\29\66\0d\73\ef\4a\f5\c2\fc\6f\25\d4\c2\16\01\17\b4\bf\d0\4f\ab\9d\b2\f3\fb\cb\2e\89\73\1c\60\8e\d0\77\e2\11\8b\a2\4f\78\7d\3f\bd\35\c8\11\f9\b1\c4\15\5b\d6\2d\8b\63\d6\5c\8f\2c\43\3a\16\77\de\35\db\f1\4b\f9\6d\fc\0b\34\b3\f7\d3\c8\1b\0a\ab\01\29\77\cf\bb\c4\7d\87\00\d0\7a\84\5d\11\cd\15\42\f3\54\c3\ea\35\5d\a9\00\84\99\e5\b4\15\40\9b\12\30\2a\74\65\83\b4\d3\00\e5\ff\1e\22\1b\08\a1\0b\5e\9a\68\1f\d2\50\84\20\ef\5f\53\f5\10\4a\89\8e\f5\c0\42\a7\06\65\a5\e8\ea\37\a8\32\15\9d\2b\f2\32\71\13\51\48\be\ce\a2\e5\45\52\7f\1a\42\5b\d7\bf\26\ac\32\ed\36\c1\85\af\6b\93\8f\10\12\32\cd\6f\30\57\7f\a8\84\31\67\9b\46\78\b3\14\97\7e\c0\8b\fc\2c\9f\d2\e5\fd\40\42\58\56\e0\19\1e\4f\58\d7\1d\7c\a3\a3\af\9e\68\29\f7\35\2c\10\e6\62\2e\4d\25\5b\8c\8c\5b\c6\c2\f3\74\43\37\14\9f\fb\79\a0\ee\71\af\6f\f2\77\b3\30\52\14\45\19\87\7a\98\48\6a\4e\9b\0b\ef\55\e0\bc\66\59\96\1f\94\4c\5f\6d\02\11\41\67\b5\35\0c\36\e0\f7\bd\13\ba\1f\b7\08\43\55\11\c1\22\43\8f\43\d8\75\ad\18\a8\e7\e4\ca\93\aa\55\71\eb\13\73\54\4e\d3\d8\1e\c9\10\cf\5e\9c\8a\d5\26\73\ec\c7\f4\10\84\47\13\fb\d4\82\76\43\ed\8a\f0\8f\e7\f9\31\15\65\19\18\3a\8a\23\54\94\a8\ad\ec\73\61\78\7e\5a\be\1f\1e\64\36\96\b4\5c\89\ec\73\e8\3c\0b\8f\f8\d6\d3\12\fd\c3\bb\e1\b3\ab\e7\90\22\0c\ce\b2\b6\cc\88\17\fd\b4\2a\da\a0\96\21\35\2b\8f\81\5f\e4\ff\6a\1d\1e\b1\5a\88\24\fe\34\01\7b\f9\b0\bb\ee\df\62\12\65\5d\71\aa\ad\3d\82\c1\d9\37\9d\6a\ea\97\fb\16\bf\b4\0d\15\19\cd\e2\31\d0\85\44\05\e5\7d\ba\1c\f7\90\28\ad\2f\c0\2d\1f\a2\d3\4a\23\af\8e\f4\11\35\b5\72\98\3b\30\f9\a6\8a\88\1d\ec\5a\b2\71\16\82\62\8f\7e\4a\7c\b7\50\ad\ea\24\a7\f1\1e\0e\1c\91\9d\19\8f\ae\ad\72\52\ac\12\77\08\57\d3\88\11\f6\04\e0\32\1a\59\0f\67\57\d7\94\ca\2c\08\eb\15\33\06\98\bf\60\2f\d3\40\2d\0d\3a\fd\37\ca\65\1b\e0\03\bf\77\9c\fd\83\48\3c\48\44\fe\62\9e\1f\11\d8\c4\ae\95\03\fd\a4\5a\4b\5a\d5\bd\fb\85\67\15\0e\76\1a\7b\44\3c\4e\31\de\b0\4a\ad\7a\67\c1\1a\c9\89\f0\cc\aa\e5\d0\de\8a\ae\4e\ac\ac\e0\b8\10\3b\ac\2c\80\15\1f\85\96\2d\5a\62\d7\d7\18\e7\14\4a\d7\37\e0\da\66\26\fc\b8\f0\3a\cd\0d\df\20\1a\8e\e6\22\cc\48\00\98\9d\73\d6\44\a0\68\8b\54\10\32\a0\2b\ff\5a\00\fe\84\10\0c\56\c8\42\ae\69\14\3e\88\f6\be\71\80\3d\a6\14\8f\6b\7a\d3\19\84\19\4e\2a\b4\2e\8e\e0\cc\cf\d9\72\06\59\48\20\e5\1f\70\9a\30\dd\58\0c\e0\21\c8\07\a4\37\2d\34\ef\13\0d\c1\7c\14\6f\0f\58\2a\ba\09\8d\85\38\01\eb\18\50\f1\9b\d9\4a\13\ee\b4\28\4c\f0\a6\86\c1\25\1f\d2\76\01\c8\0e\cc\14\71\99\2f\56\28\f4\98\77\13\86\d4\01\7a\12\ff\59\cd\7f\bb\6b\32\31\7f\55\18\a8\49\82\18\d7\7e\b0\c0\5f\aa\06\7f\fd\de\6a\1e\09\6e\51\6f\46\4f\6e\d8\7b\2a\64\6f\5e\cb\02\13\8b\c9\25\0b\18\e3\89\ce\1a\35\3d\0b\36\7e\c3\17\ee\3b\ef\0d\de\5b\2c\82\61\82\0c\8e\c3\5d\b4\1d\75\85\b5\c8\6a\b9\5b\f1\7c\d1\c7\38\9a\ba\90\12\d2\e6\e2\7a\c5\a7\b2\2d\dc\c5\f9\c6\40\e9\34\17\86\a0\9b\d9\b6\51\1f\39\53\37\b8\f8\90\23\02\1d\54\44\01\48\12\93\b3\03\94\22\73\9b\3a\56\21\12\69\95\01\da\d6\77\a0\04\39\eb\4f\42\c9\ab\a9\16\c3\fa\81\90\cc\95\c8\45\07\e6\e3\92\bb\16\54\1c\ba\3c\51\da\9f\5d\9d\8b\c4\6f\ce\3b\35\8e\b4\11\e8\8b\e5\d0\07\b5\84\ae\b5\0b\c2\8a\c2\b1\21\16\e3\ee\1e\c5\49\e2\25\1a\a3\8e\72\2d\33\1e\aa\1b\4d\55\33\1b\6e\ad\57\f0\25\99\67\fc\df\52\4a\11\a1\2a\00\a2\c9\98\6d\6c\6f\7f\81\fb\97\e7\9c\15\49\35\80\0a\fc\fe\88\47\4b\df\61\fa\7d\21\04\1b\4e\21\90\86\5d\9f\b5\0c\8f\2b\7d\bc\ee\94\e2\10\a1\29\34\e8\34\07\e3\cf\72\76\9c\6b\2a\3a\1b\15\0a\34\41\22\02\c9\db\83\0f\94\83\06\b5\08\62\1a\86\c0\68\55\a1\5d\69\b2\89\3c\12\24\71\45\7d\10\a7\f0\c2\aa\09\b5\03\1f\ac\cb\16\6d\cd\96\9c\14\d1\ac\73\15\4c\a2\c4\26\97\7e\5c\c8\80\bc\c3\19\03\4c\68\8d\6f\e5\3a\78\1e\cf\39\7d\d0\55\1a\10\03\5f\c2\70\cb\9e\49\16\e6\42\88\9c\44\eb\20\14\c4\f6\f2\4c\7e\06\dc\9b\9f\53\aa\c3\15\26\29\19\76\b4\2f\e0\1d\08\d3\82\87\e8\94\34\9b\6f\73\1f\c9\d0\1d\ac\12\e5\c3\b1\54\11\dd\00\c1\25\a8\13\fc\44\25\57\57\de\34\de\a9\55\14\41\31\2f\92\18\3b\96\ee\2c\ed\15\c2\55\14\6b\59\91\fd\ba\b6\1e\e5\1d\15\3c\b4\4d\99\b5\ec\e2\d7\7a\de\34\32\13\5e\65\1a\4b\21\a1\ff\e2\a7\db\8d\19\16\c2\fe\17\b6\fe\e0\9d\69\89\bf\db\91\52\f1\9f\9b\72\fe\1d\31\9f\ac\02\e2\b5\57\29\9b\d3\f6\43\a1\07\bf\12\fe\c6\57\83\5a\a3\ad\f3\81\88\f4\94\89\c9\6e\17\bd\b8\2d\24\31\0c\99\70\a2\aa\31\fa\eb\7b\4a\1d\76\93\9c\b6\9e\a7\5f\86\a5\0a\5f\7c\73\8d\4e\12\54\b8\43\64\86\91\f7\e7\4e\cd\76\5b\d0\30\e2\16\69\a6\54\fd\e7\75\f5\a1\a2\80\54\72\04\bd\9a\1c\01\e8\54\fe\b0\69\39\a5\65\d0\74\c7\22\b6\e0\11\02\22\ea\3d\1d\c4\87\0e\7f\04\52\79\ab\e3\58\16\82\aa\64\8d\24\b5\29\d2\9e\85\a6\57\96\1c\ef\1b\91\ea\5e\d8\36\11\5a\43\83\13\c8\f6\dd\71\75\11\36\a5\76\8e\84\95\30\14\64\18\7a\74\55\ce\d2\15\83\4e\14\b2\e5\ba\3c\19\7d\9e\98\d1\ea\81\47\1b\12\b1\4c\8f\cf\f4\c5\2f\0e\63\ff\c2\32\b1\0c\11\56\dd\1f\73\03\72\b7\bb\d1\3b\bf\73\7f\dd\4f\15\ac\d4\e7\4f\84\4e\a5\2a\c6\0a\af\50\df\d4\a3\1a\eb\e4\f0\b1\12\51\a7\da\bb\66\6d\92\0b\65\a6\10\26\1e\6d\5e\57\25\51\d1\6a\c0\08\77\4e\fe\cf\14\b0\65\08\36\ad\6e\a5\85\85\f0\ca\14\e2\fd\03\1a\8e\3f\c5\41\2c\65\87\73\53\d6\fe\4c\ad\7e\42\10\71\8f\36\52\77\3e\69\50\e8\8b\3e\a0\58\1e\53\14\4e\33\c4\26\15\8e\83\64\e2\2e\4e\c8\ee\e5\67\19\22\40\75\70\9a\71\a4\fd\9a\ba\61\7a\6a\df\c1\1f\15\48\49\86\00\c7\86\de\a0\14\7d\8c\a2\2b\d9\13\1a\9a\db\a7\c0\78\28\16\c9\59\9c\2f\8b\76\cf\18\a1\80\d2\d1\f0\96\b2\5b\3b\70\83\fb\2d\54\03\1f\64\90\23\83\56\9e\4f\19\25\26\32\bd\9c\14\62\13\7e\74\ec\23\ec\85\a3\5f\ae\af\7e\ec\c3\99\3a\18\9d\91\e7\2c\67\67\8c\f7\99\5b\9e\e7\34\40\49\1e\02\bb\10\7c\a0\c0\b7\3a\40\f9\c2\10\21\c8\ed\12\c3\e9\14\9b\c8\b0\65\49\90\b7\f3\54\29\3a\a9\17\33\24\da\c1\fa\1c\bf\5b\74\a5\30\aa\b3\88\93\1d\a0\56\28\b9\1c\72\57\b9\68\67\5e\4a\70\35\7c\12\48\6c\72\e7\a3\4e\ad\e7\42\01\f6\5c\cc\42\1b\17\5a\07\4f\e1\4c\a2\98\a1\93\81\33\74\7f\13\e2\1c\98\64\d1\0c\70\65\ff\44\fc\30\a0\a8\2f\4c\0d\12\be\bd\05\10\cc\3e\3f\56\3b\3d\c8\92\3b\9f\90\16\2e\2d\07\14\7f\0e\cf\2b\8a\4c\7a\77\0a\c7\34\1c\3d\7c\84\6c\0f\69\61\5b\d6\6f\ac\8a\66\fc\a0\11\4c\9b\a5\47\53\c3\39\f2\cb\8b\57\2d\80\3b\09\16\1f\02\8f\19\28\34\c8\ee\be\6e\ad\38\60\8a\8b\1b\53\61\f9\0f\99\20\3d\55\37\65\6c\23\7c\36\37\11\a8\b9\f7\53\bf\68\8c\2a\85\7e\47\2c\1b\04\85\15\12\a8\f5\28\ef\82\2f\75\26\5e\59\f7\21\45\e6\1a\0b\89\99\79\d5\b1\3d\09\d8\da\97\3a\35\eb\cf\10\4e\eb\ff\d7\4a\1e\8d\0b\8e\d1\3d\89\02\e6\03\15\22\e6\ff\8d\dd\65\70\8e\f1\45\8d\2b\83\df\44\1a\d5\ef\bf\78\aa\3f\06\f9\b6\4b\38\fb\b1\0b\6b\10\ca\eb\ef\16\95\cf\47\b7\a4\5e\06\7a\9e\ce\85\14\bd\e6\ab\5c\7a\c3\19\e5\4d\f6\87\18\46\42\a7\19\36\70\eb\79\2c\1a\30\af\f0\f9\54\cf\6b\89\08\10\43\4c\66\98\b7\20\fc\da\6c\38\2a\c3\c6\ab\0a\14\54\df\7f\7e\e5\28\bb\11\88\c6\f4\73\b8\56\0d\19\2a\d7\1f\de\1e\f3\29\16\2a\f8\f1\90\66\ac\50\1f\7a\e6\d3\4a\f3\37\da\4d\1a\3b\97\1a\c0\6b\92\13\19\e0\88\1d\f0\c5\50\e1\e0\09\3d\21\b0\06\77\18\1f\18\eb\24\6c\f7\a4\19\59\4c\8c\29\5c\c8\94\1e\13\ef\12\97\a3\1a\07\b0\b7\af\f7\99\39\fd\1c\13\d8\aa\d7\7c\4c\e1\08\9c\a5\9b\75\00\88\3c\e4\17\8e\95\0d\9c\9f\19\0b\03\8f\02\93\00\aa\4b\dd\1d\79\7d\88\c1\03\f0\e6\61\99\e1\5b\40\4a\4f\aa\12\d7\9c\ea\b1\04\ac\60\ba\ff\d9\72\d0\1c\e3\54\17\0d\44\65\de\05\d7\f8\a8\7f\90\8f\04\e4\1b\2a\1d\88\4a\ff\aa\63\86\9b\c9\4f\ba\d9\82\6e\51\3a\12\2a\1d\bf\95\fc\67\02\bc\e3\28\90\23\ca\e5\c8\16\74\e4\2e\bb\fb\01\03\ab\1c\33\74\ac\3c\1f\7b\1c\c9\4e\fd\54\3d\e1\e1\ea\f1\9f\c8\eb\85\f3\cc\11\7b\a2\3c\aa\8c\59\9a\65\ee\c7\ba\66\67\30\40\16\1a\cb\cb\d4\ef\ef\00\ff\e9\79\69\40\81\3c\d0\1b\f0\5e\ff\e4\f5\95\60\3f\32\ec\41\c8\d0\25\62\11\ac\36\3f\5e\73\bb\38\cf\3e\67\52\fa\44\af\ba\15\57\04\cf\35\50\ea\06\83\0e\01\e7\38\16\5b\29\1b\b6\62\a1\21\72\52\e4\11\a9\60\90\e3\ed\d8\f9\10\64\bb\09\aa\0e\67\5d\56\d3\78\74\5c\29\4f\38\15\3d\2a\8c\54\d2\c0\f4\2b\08\97\91\b3\f3\62\86\1a\66\9a\d7\74\83\f8\78\1b\65\fe\3a\50\d8\fd\93\10\00\81\0d\52\a4\36\57\62\fe\bd\49\64\4e\fd\b8\14\40\e1\90\66\4d\04\ed\fa\7d\2d\5c\fd\a1\3c\e7\19\c8\8c\1a\60\b0\22\d4\bc\6e\9c\59\3e\e5\85\30\10\fa\2f\21\78\5c\2b\09\6c\8a\03\f0\8d\5e\a7\3c\14\f8\7b\29\96\33\76\0b\07\6d\04\6c\31\36\d1\4b\19\f6\da\b3\7b\c0\53\ce\48\88\05\c7\bd\83\c5\9e\1f\da\68\50\4d\58\f4\80\2d\75\63\9c\56\72\3b\c3\13\10\83\a4\60\6e\31\e1\78\52\7c\43\ec\4e\0a\b4\18")
(data 0 (i32.const 11536) "\30\30\30\31\30\32\30\33\30\34\30\35\30\36\30\37\30\38\30\39\31\30\31\31\31\32\31\33\31\34\31\35\31\36\31\37\31\38\31\39\32\30\32\31\32\32\32\33\32\34\32\35\32\36\32\37\32\38\32\39\33\30\33\31\33\32\33\33\33\34\33\35\33\36\33\37\33\38\33\39\34\30\34\31\34\32\34\33\34\34\34\35\34\36\34\37\34\38\34\39\35\30\35\31\35\32\35\33\35\34\35\35\35\36\35\37\35\38\35\39\36\30\36\31\36\32\36\33\36\34\36\35\36\36\36\37\36\38\36\39\37\30\37\31\37\32\37\33\37\34\37\35\37\36\37\37\37\38\37\39\38\30\38\31\38\32\38\33\38\34\38\35\38\36\38\37\38\38\38\39\39\30\39\31\39\32\39\33\39\34\39\35\39\36\39\37\39\38\39\39")
(data 0 (i32.const 10720) "\01\00\00\00\00\00\00\08\67\66\66\66\66\66\66\06\b9\1e\85\eb\51\b8\1e\05\fa\7e\6a\bc\74\93\18\04\2a\cb\10\c7\ba\b8\8d\06\22\3c\da\38\62\2d\3e\05\4e\63\7b\2d\e8\bd\31\04\16\d2\2b\af\a6\fc\b5\06\78\0e\23\8c\b8\63\5e\05\2d\a5\b5\09\fa\82\4b\04\ae\6e\ef\75\f6\37\df\06\58\25\59\5e\f8\5f\7f\05\47\84\7a\4b\60\e6\65\04\71\a0\5d\12\9a\70\09\07\c1\e6\4a\a8\e1\26\a1\05\67\85\d5\b9\e7\eb\80\04\0b\6f\22\f6\a5\ac\34\07\a3\25\b5\91\51\bd\c3\05\e9\ea\90\74\74\97\9c\04\0e\ab\b4\ed\53\f2\60\07\d8\88\90\24\43\28\e7\05\e0\d3\a6\83\02\ed\b8\04\66\b9\d7\05\04\48\8e\07\52\94\ac\04\d0\6c\0b\06\db\a9\23\6a\a6\f0\d5\04\2b\76\9f\76\3d\b4\bc\07\ef\c4\b2\2b\31\90\30\06\f3\03\8f\bc\8d\a6\f3\04\51\06\18\94\af\3d\ec\07\da\d1\ac\a9\bf\97\56\06\e2\a7\f0\ba\ff\12\12\05\e8\1f\5a\62\99\75\0e\04\a6\cc\29\6a\f5\88\7d\06\ec\d6\87\ee\5d\3a\31\05\56\12\d3\be\e4\61\27\04\bd\83\1e\fe\6d\69\a5\06\97\9c\4b\cb\24\21\51\05\ac\e3\a2\a2\50\e7\40\04\13\39\9e\6a\e7\3e\ce\06\dc\60\4b\55\ec\cb\71\05\17\e7\d5\dd\89\09\5b\04\be\71\89\fc\42\0f\f8\06\31\8e\07\ca\68\3f\93\05\28\d8\d2\d4\53\cc\75\04\d9\59\51\21\86\e0\22\07\47\ae\da\4d\6b\80\b5\05\39\58\15\0b\89\33\91\04\8e\f3\ee\44\db\b8\4e\07\0b\f6\8b\9d\e2\93\d8\05\d6\c4\3c\b1\1b\43\ad\04\bc\07\2e\b5\92\9e\7b\07\fd\d2\24\c4\db\7e\fc\05\fe\db\83\36\16\ff\c9\04\2f\93\6c\8a\23\98\a9\07\f3\a8\23\d5\82\46\21\06")
(data 0 (i32.const 11160) "\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\19\00\00\00\00\00\00\40\1f\00\00\00\00\00\00\88\13\00\00\00\00\00\00\6a\18\00\00\00\00\00\80\84\1e\00\00\00\00\00\d0\12\13\00\00\00\00\00\84\d7\17\00\00\00\00\00\65\cd\1d\00\00\00\00\20\5f\a0\12\00\00\00\00\e8\76\48\17\00\00\00\00\a2\94\1a\1d\00\00\00\40\e5\9c\30\12\00\00\00\90\1e\c4\bc\16\00\00\00\34\26\f5\6b\1c\00\00\80\e0\37\79\c3\11\00\00\a0\d8\85\57\34\16\00\00\c8\4e\67\6d\c1\1b\00\00\3d\91\60\e4\58\11\00\40\8c\b5\78\1d\af\15\00\50\ef\e2\d6\e4\1a\1b\00\92\d5\4d\06\cf\f0\10\80\f6\4a\e1\c7\02\2d\15\20\b4\9d\d9\79\43\78\1a\94\90\02\28\2c\2a\8b\10\b9\34\03\32\b7\f4\ad\14\e7\01\84\fe\e4\71\d9\19\30\81\12\1f\2f\e7\27\10\7c\21\d7\e6\fa\e0\31\14\db\e9\8c\a0\39\59\3e\19\52\24\b0\08\88\ef\8d\1f\b3\16\6e\05\b5\b5\b8\13\60\9c\c9\46\22\e3\a6\18\78\03\7c\d8\ea\9b\d0\1e\2b\82\4d\c7\72\61\42\13\b6\e2\20\79\cf\f9\12\18\64\1b\69\57\43\b8\17\1e\1e\b1\a1\16\2a\d3\ce\12\66\1d\4a\9c\f4\87\82\17\bf\a4\5c\c3\f1\29\63\1d\f7\e6\19\1a\37\fa\5d\12\b5\60\a0\e0\c4\78\f5\16\e3\78\c8\18\f6\d6\b2\1c\8d\4b\7d\cf\59\c6\ef\11\71\9e\5c\43\f0\b7\6b\16\0d\c6\33\54\ec\a5\06\1c")
(global $sp (mut i32) (i32.const 11736))
(global $bp (mut i32) (i32.const 11736))
(global $mem_address (mut i32) (i32.const 0))
(func $wasm_memory_size (result i32)
  memory.size
)
(func $wasm_memory_grow (param i32) (result i32)
  local.get 0
  memory.grow
)
(func $sqrt (param f64) (result f64)
  local.get 0
  f64.sqrt
)
(func $sqrt_32 (param f32) (result f32)
  local.get 0
  f32.sqrt
)
(func $unreachable 
  unreachable
)
(func $::struct::ciovec::buf (param i32) (param i32) (result i32)
  local.get 0
)
(func $::struct::ciovec::buf_len (param i32) (param i32) (result i32)
  local.get 1
)
(func $::struct::_ryu_floating_decimal_64::mantissa (param i64) (param i32) (result i64)
  local.get 0
)
(func $::struct::_ryu_floating_decimal_64::exponent (param i64) (param i32) (result i32)
  local.get 1
)
(func $::struct::_ryu_floating_decimal_32::mantissa (param i32) (param i32) (result i32)
  local.get 0
)
(func $::struct::_ryu_floating_decimal_32::exponent (param i32) (param i32) (result i32)
  local.get 1
)
(func $::struct::String::pointer (param i32) (param i32) (result i32)
  local.get 0
)
(func $::struct::String::length (param i32) (param i32) (result i32)
  local.get 1
)
(func $print (param i32) (param i32) 
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 40
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  global.set $mem_address
  global.get $mem_address
  local.get 0
  i32.store
  global.get $mem_address
  i32.const 4
  i32.add
  local.get 1
  i32.store
  global.get $bp
  i32.const 12
  i32.add
  global.get $bp
  i32.const 28
  i32.add
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.store
  global.get $bp
  i32.const 32
  i32.add
  global.get $bp
  i32.const 4
  i32.add
  i32.const 4
  i32.add
  i32.load
  i32.store
  global.get $bp
  i32.const 28
  i32.add
  i32.load
  global.get $bp
  i32.const 32
  i32.add
  i32.load
  call $::store::0
  global.get $bp
  i32.const 20
  i32.add
  i32.const 0
  i32.store
  block $b_0
    loop $l_0
      block $bi_0
        i32.const 1
        global.get $bp
        i32.const 12
        i32.add
        i32.const 1
        global.get $bp
        i32.const 20
        i32.add
        call $fd_write
        drop
        global.get $bp
        i32.const 24
        i32.add
        global.get $bp
        i32.const 12
        i32.add
        i32.const 4
        i32.add
        i32.store
        global.get $bp
        i32.const 20
        i32.add
        i32.load
        global.get $bp
        i32.const 24
        i32.add
        i32.load
        i32.load
        i32.ge_u
        (if 
          (then 
            br $b_0
          )
          (else 
            global.get $bp
            i32.const 12
            i32.add
            global.get $bp
            i32.const 12
            i32.add
            i32.load
            global.get $bp
            i32.const 20
            i32.add
            i32.load
            i32.add
            i32.store
            global.get $bp
            i32.const 24
            i32.add
            i32.load
            global.get $bp
            i32.const 24
            i32.add
            i32.load
            i32.load
            global.get $bp
            i32.const 20
            i32.add
            i32.load
            i32.sub
            i32.store
          )
        )
      end
      br $l_0
    end
  end
  global.get $sp
  i32.const 40
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
)
(func $println (param i32) (param i32) 
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 56
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  global.set $mem_address
  global.get $mem_address
  local.get 0
  i32.store
  global.get $mem_address
  i32.const 4
  i32.add
  local.get 1
  i32.store
  global.get $bp
  i32.const 12
  i32.add
  global.get $bp
  i32.const 36
  i32.add
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.store
  global.get $bp
  i32.const 40
  i32.add
  global.get $bp
  i32.const 4
  i32.add
  i32.const 4
  i32.add
  i32.load
  i32.store
  global.get $bp
  i32.const 36
  i32.add
  i32.load
  global.get $bp
  i32.const 40
  i32.add
  i32.load
  global.get $bp
  i32.const 44
  i32.add
  i32.const 0
  i32.const 1
  call $::struct::String::pointer
  i32.store
  global.get $bp
  i32.const 48
  i32.add
  i32.const 1
  i32.store
  global.get $bp
  i32.const 44
  i32.add
  i32.load
  global.get $bp
  i32.const 48
  i32.add
  i32.load
  call $::store::1
  global.get $bp
  i32.const 28
  i32.add
  i32.const 0
  i32.store
  block $b_0
    loop $l_0
      block $bi_0
        i32.const 1
        global.get $bp
        i32.const 12
        i32.add
        i32.const 2
        global.get $bp
        i32.const 28
        i32.add
        call $fd_write
        drop
        global.get $bp
        i32.const 32
        i32.add
        global.get $bp
        i32.const 12
        i32.add
        i32.const 4
        i32.add
        i32.store
        global.get $bp
        i32.const 28
        i32.add
        i32.load
        global.get $bp
        i32.const 32
        i32.add
        i32.load
        i32.load
        i32.gt_u
        (if 
          (then 
            br $b_0
          )
          (else 
            global.get $bp
            i32.const 12
            i32.add
            global.get $bp
            i32.const 12
            i32.add
            i32.load
            global.get $bp
            i32.const 28
            i32.add
            i32.load
            i32.add
            i32.store
            global.get $bp
            i32.const 32
            i32.add
            i32.load
            global.get $bp
            i32.const 32
            i32.add
            i32.load
            i32.load
            global.get $bp
            i32.const 28
            i32.add
            i32.load
            i32.sub
            i32.store
          )
        )
      end
      br $l_0
    end
  end
  global.get $sp
  i32.const 56
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
)
(func $println_bool (param i32) 
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 8
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  local.get 0
  i32.store8
  global.get $bp
  i32.const 4
  i32.add
  i32.load8_u
  (if 
    (then 
      i32.const 1
      i32.const 4
      call $println
    )
    (else 
      i32.const 5
      i32.const 5
      call $println
    )
  )
  global.get $sp
  i32.const 8
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
)
(func $count_digits (param i64) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 24
  i32.add
  global.set $sp
  global.get $bp
  i32.const 8
  i32.add
  local.get 0
  i64.store
  global.get $bp
  i32.const 16
  i32.add
  i32.const 0
  i32.store8
  block $b_0
    loop $l_0
      block $bi_0
        global.get $bp
        i32.const 8
        i32.add
        i64.load
        i64.const 9
        i64.le_u
        (if 
          (then 
            global.get $bp
            i32.const 16
            i32.add
            i32.load8_u
            i32.const 1
            i32.add
            global.get $sp
            i32.const 24
            i32.sub
            global.set $sp
            global.get $sp
            i32.load
            global.set $bp
            return
          )
          (else 
          )
        )
        global.get $bp
        i32.const 16
        i32.add
        global.get $bp
        i32.const 16
        i32.add
        i32.load8_u
        i32.const 1
        i32.add
        i32.store8
        global.get $bp
        i32.const 8
        i32.add
        global.get $bp
        i32.const 8
        i32.add
        i64.load
        i64.const 10
        i64.div_u
        i64.store
      end
      br $l_0
    end
  end
  call $unreachable
  unreachable
)
(func $f32_to_string (param f32) (result i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 16
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  local.get 0
  f32.store
  global.get $bp
  i32.const 8
  i32.add
  i32.const 16
  call $malloc
  i32.store
  global.get $bp
  i32.const 4
  i32.add
  f32.load
  global.get $bp
  i32.const 8
  i32.add
  i32.load
  call $ryu_f2s_buffered
  global.get $sp
  i32.const 16
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $f64_to_string (param f64) (result i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 24
  i32.add
  global.set $sp
  global.get $bp
  i32.const 8
  i32.add
  local.get 0
  f64.store
  global.get $bp
  i32.const 16
  i32.add
  i32.const 25
  call $malloc
  i32.store
  global.get $bp
  i32.const 8
  i32.add
  f64.load
  global.get $bp
  i32.const 16
  i32.add
  i32.load
  call $ryu_d2s_buffered
  global.get $sp
  i32.const 24
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $int_to_string (param i64) (result i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 48
  i32.add
  global.set $sp
  global.get $bp
  i32.const 8
  i32.add
  local.get 0
  i64.store
  global.get $bp
  i32.const 44
  i32.add
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  call $count_digits
  i32.store8
  global.get $bp
  i32.const 16
  i32.add
  global.get $bp
  i32.const 44
  i32.add
  i32.load8_u
  i32.const 1
  i32.sub
  i32.store
  global.get $bp
  i32.const 20
  i32.add
  global.get $bp
  i32.const 44
  i32.add
  i32.load8_u
  call $malloc
  i32.store
  global.get $bp
  i32.const 45
  i32.add
  i32.const 0
  i32.store8
  global.get $bp
  i32.const 24
  i32.add
  i32.const 0
  i32.store
  block $b_0
    loop $l_0
      block $bi_0
        global.get $bp
        i32.const 8
        i32.add
        i64.load
        i64.const 9
        i64.le_u
        (if 
          (then 
            global.get $bp
            i32.const 45
            i32.add
            global.get $bp
            i32.const 8
            i32.add
            i64.load
            i32.wrap_i64
            i32.store8
            global.get $bp
            i32.const 28
            i32.add
            global.get $bp
            i32.const 20
            i32.add
            i32.load
            global.get $bp
            i32.const 16
            i32.add
            i32.load
            i32.add
            global.get $bp
            i32.const 24
            i32.add
            i32.load
            i32.sub
            i32.store
            global.get $bp
            i32.const 28
            i32.add
            i32.load
            global.get $bp
            i32.const 45
            i32.add
            i32.load8_u
            i32.const 48
            i32.add
            i32.store8
            global.get $bp
            i32.const 24
            i32.add
            global.get $bp
            i32.const 24
            i32.add
            i32.load
            i32.const 1
            i32.add
            i32.store
            br $b_0
          )
          (else 
          )
        )
        global.get $bp
        i32.const 45
        i32.add
        global.get $bp
        i32.const 8
        i32.add
        i64.load
        i64.const 10
        i64.rem_u
        i32.wrap_i64
        i32.store8
        global.get $bp
        i32.const 8
        i32.add
        global.get $bp
        i32.const 8
        i32.add
        i64.load
        i64.const 10
        i64.div_u
        i64.store
        global.get $bp
        i32.const 32
        i32.add
        global.get $bp
        i32.const 20
        i32.add
        i32.load
        global.get $bp
        i32.const 16
        i32.add
        i32.load
        i32.add
        global.get $bp
        i32.const 24
        i32.add
        i32.load
        i32.sub
        i32.store
        global.get $bp
        i32.const 32
        i32.add
        i32.load
        global.get $bp
        i32.const 45
        i32.add
        i32.load8_u
        i32.const 48
        i32.add
        i32.store8
        global.get $bp
        i32.const 24
        i32.add
        global.get $bp
        i32.const 24
        i32.add
        i32.load
        i32.const 1
        i32.add
        i32.store
      end
      br $l_0
    end
  end
  global.get $bp
  i32.const 36
  i32.add
  global.get $bp
  i32.const 24
  i32.add
  i32.load
  i32.store
  global.get $bp
  i32.const 40
  i32.add
  global.get $bp
  i32.const 20
  i32.add
  i32.load
  i32.store
  global.get $bp
  i32.const 40
  i32.add
  i32.load
  global.get $bp
  i32.const 36
  i32.add
  i32.load
  global.get $sp
  i32.const 48
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $malloc (param i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 16
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  local.get 0
  i32.store
  global.get $bp
  i32.const 8
  i32.add
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 65536
  i32.div_u
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 65536
  i32.rem_u
  i32.const 0
  i32.ne
  i32.add
  i32.store
  global.get $bp
  i32.const 12
  i32.add
  global.get $bp
  i32.const 8
  i32.add
  i32.load
  call $wasm_memory_grow
  i32.const 65536
  i32.mul
  i32.store
  global.get $bp
  i32.const 12
  i32.add
  i32.load
  global.get $sp
  i32.const 16
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_decimalLength17 (param i64) (result i64)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 16
  i32.add
  global.set $sp
  global.get $bp
  i32.const 8
  i32.add
  local.get 0
  i64.store
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 100000000000000000
  i64.lt_u
  call $assert
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 10000000000000000
  i64.ge_u
  (if 
    (then 
      i64.const 17
      global.get $sp
      i32.const 16
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 1000000000000000
  i64.ge_u
  (if 
    (then 
      i64.const 16
      global.get $sp
      i32.const 16
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 100000000000000
  i64.ge_u
  (if 
    (then 
      i64.const 15
      global.get $sp
      i32.const 16
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 10000000000000
  i64.ge_u
  (if 
    (then 
      i64.const 14
      global.get $sp
      i32.const 16
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 1000000000000
  i64.ge_u
  (if 
    (then 
      i64.const 13
      global.get $sp
      i32.const 16
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 100000000000
  i64.ge_u
  (if 
    (then 
      i64.const 12
      global.get $sp
      i32.const 16
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 10000000000
  i64.ge_u
  (if 
    (then 
      i64.const 11
      global.get $sp
      i32.const 16
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 1000000000
  i64.ge_u
  (if 
    (then 
      i64.const 10
      global.get $sp
      i32.const 16
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 100000000
  i64.ge_u
  (if 
    (then 
      i64.const 9
      global.get $sp
      i32.const 16
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 10000000
  i64.ge_u
  (if 
    (then 
      i64.const 8
      global.get $sp
      i32.const 16
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 1000000
  i64.ge_u
  (if 
    (then 
      i64.const 7
      global.get $sp
      i32.const 16
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 100000
  i64.ge_u
  (if 
    (then 
      i64.const 6
      global.get $sp
      i32.const 16
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 10000
  i64.ge_u
  (if 
    (then 
      i64.const 5
      global.get $sp
      i32.const 16
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 1000
  i64.ge_u
  (if 
    (then 
      i64.const 4
      global.get $sp
      i32.const 16
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 100
  i64.ge_u
  (if 
    (then 
      i64.const 3
      global.get $sp
      i32.const 16
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 10
  i64.ge_u
  (if 
    (then 
      i64.const 2
      global.get $sp
      i32.const 16
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  i64.const 1
  global.get $sp
  i32.const 16
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_d2d (param i64) (param i32) (result i64) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 264
  i32.add
  global.set $sp
  global.get $bp
  i32.const 8
  i32.add
  local.get 0
  i64.store
  global.get $bp
  i32.const 168
  i32.add
  local.get 1
  i32.store
  global.get $bp
  i32.const 172
  i32.add
  i32.const 0
  i32.store
  global.get $bp
  i32.const 16
  i32.add
  i64.const 0
  i64.store
  global.get $bp
  i32.const 168
  i32.add
  i32.load
  i32.const 0
  i32.eq
  (if 
    (then 
      global.get $bp
      i32.const 172
      i32.add
      i32.const -1076
      i32.store
      global.get $bp
      i32.const 16
      i32.add
      global.get $bp
      i32.const 8
      i32.add
      i64.load
      i64.store
    )
    (else 
      global.get $bp
      i32.const 172
      i32.add
      global.get $bp
      i32.const 168
      i32.add
      i32.load
      i32.const 1023
      i32.sub
      i32.const 52
      i32.sub
      i32.const 2
      i32.sub
      i32.store
      global.get $bp
      i32.const 16
      i32.add
      i64.const 4503599627370496
      global.get $bp
      i32.const 8
      i32.add
      i64.load
      i64.or
      i64.store
    )
  )
  global.get $bp
  i32.const 252
  i32.add
  global.get $bp
  i32.const 16
  i32.add
  i64.load
  i64.const 1
  i64.and
  i64.const 0
  i64.eq
  i32.store8
  global.get $bp
  i32.const 253
  i32.add
  global.get $bp
  i32.const 252
  i32.add
  i32.load8_u
  i32.store8
  global.get $bp
  i32.const 24
  i32.add
  i64.const 4
  global.get $bp
  i32.const 16
  i32.add
  i64.load
  i64.mul
  i64.store
  global.get $bp
  i32.const 176
  i32.add
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 0
  i64.ne
  (if (result i32)
    (then 
      i32.const 1
    )
    (else 
      global.get $bp
      i32.const 168
      i32.add
      i32.load
      i32.const 1
      i32.le_u
    )
  )
  i32.store
  global.get $bp
  i32.const 32
  i32.add
  i64.const 0
  i64.store
  global.get $bp
  i32.const 40
  i32.add
  i64.const 0
  i64.store
  global.get $bp
  i32.const 48
  i32.add
  i64.const 0
  i64.store
  global.get $bp
  i32.const 180
  i32.add
  i32.const 0
  i32.store
  global.get $bp
  i32.const 254
  i32.add
  i32.const 0
  i32.store8
  global.get $bp
  i32.const 255
  i32.add
  i32.const 0
  i32.store8
  global.get $bp
  i32.const 172
  i32.add
  i32.load
  i32.const 0
  i32.ge_s
  (if 
    (then 
      global.get $bp
      i32.const 184
      i32.add
      global.get $bp
      i32.const 172
      i32.add
      i32.load
      call $_ryu_log10Pow2
      global.get $bp
      i32.const 172
      i32.add
      i32.load
      i32.const 3
      i32.gt_s
      i32.sub
      i32.store
      global.get $bp
      i32.const 180
      i32.add
      global.get $bp
      i32.const 184
      i32.add
      i32.load
      i32.store
      global.get $bp
      i32.const 188
      i32.add
      i32.const 125
      global.get $bp
      i32.const 184
      i32.add
      i32.load
      call $_ryu_pow5bits
      i32.add
      i32.const 1
      i32.sub
      i32.store
      global.get $bp
      i32.const 192
      i32.add
      global.get $bp
      i32.const 172
      i32.add
      i32.load
      i32.const 4294967295
      i32.xor
      i32.const 1
      i32.add
      global.get $bp
      i32.const 184
      i32.add
      i32.load
      i32.add
      global.get $bp
      i32.const 188
      i32.add
      i32.load
      i32.add
      i32.store
      global.get $bp
      i32.const 32
      i32.add
      global.get $bp
      i32.const 16
      i32.add
      i64.load
      i32.const 32
      global.get $bp
      i32.const 184
      i32.add
      i32.load
      i32.const 16
      i32.mul
      i32.add
      global.get $bp
      i32.const 192
      i32.add
      i32.load
      global.get $bp
      i32.const 40
      i32.add
      global.get $bp
      i32.const 48
      i32.add
      global.get $bp
      i32.const 176
      i32.add
      i32.load
      call $_ryu_mulShiftAll64
      i64.store
      global.get $bp
      i32.const 184
      i32.add
      i32.load
      i32.const 21
      i32.le_u
      (if 
        (then 
          global.get $bp
          i32.const 196
          i32.add
          global.get $bp
          i32.const 24
          i32.add
          i64.load
          i32.wrap_i64
          i32.const 5
          global.get $bp
          i32.const 24
          i32.add
          i64.load
          call $_ryu_div5
          i32.wrap_i64
          i32.mul
          i32.sub
          i32.store
          global.get $bp
          i32.const 196
          i32.add
          i32.load
          i32.const 0
          i32.eq
          (if 
            (then 
              global.get $bp
              i32.const 255
              i32.add
              global.get $bp
              i32.const 24
              i32.add
              i64.load
              global.get $bp
              i32.const 184
              i32.add
              i32.load
              call $_ryu_multipleOfPowerOf5
              i32.store8
            )
            (else 
              global.get $bp
              i32.const 253
              i32.add
              i32.load8_u
              (if 
                (then 
                  global.get $bp
                  i32.const 254
                  i32.add
                  global.get $bp
                  i32.const 24
                  i32.add
                  i64.load
                  i64.const 1
                  i64.sub
                  global.get $bp
                  i32.const 176
                  i32.add
                  i32.load
                  i64.extend_i32_u
                  i64.sub
                  global.get $bp
                  i32.const 184
                  i32.add
                  i32.load
                  call $_ryu_multipleOfPowerOf5
                  i32.store8
                )
                (else 
                  global.get $bp
                  i32.const 40
                  i32.add
                  global.get $bp
                  i32.const 40
                  i32.add
                  i64.load
                  global.get $bp
                  i32.const 24
                  i32.add
                  i64.load
                  i64.const 2
                  i64.add
                  global.get $bp
                  i32.const 184
                  i32.add
                  i32.load
                  call $_ryu_multipleOfPowerOf5
                  i64.extend_i32_u
                  i64.sub
                  i64.store
                )
              )
            )
          )
        )
        (else 
        )
      )
    )
    (else 
      global.get $bp
      i32.const 200
      i32.add
      global.get $bp
      i32.const 172
      i32.add
      i32.load
      i32.const 4294967295
      i32.xor
      i32.const 1
      i32.add
      call $_ryu_log10Pow5
      global.get $bp
      i32.const 172
      i32.add
      i32.load
      i32.const 4294967295
      i32.xor
      i32.const 1
      i32.add
      i32.const 1
      i32.gt_s
      i32.sub
      i32.store
      global.get $bp
      i32.const 180
      i32.add
      global.get $bp
      i32.const 200
      i32.add
      i32.load
      global.get $bp
      i32.const 172
      i32.add
      i32.load
      i32.add
      i32.store
      global.get $bp
      i32.const 204
      i32.add
      global.get $bp
      i32.const 172
      i32.add
      i32.load
      i32.const 4294967295
      i32.xor
      i32.const 1
      i32.add
      global.get $bp
      i32.const 200
      i32.add
      i32.load
      i32.sub
      i32.store
      global.get $bp
      i32.const 208
      i32.add
      global.get $bp
      i32.const 204
      i32.add
      i32.load
      call $_ryu_pow5bits
      i32.const 125
      i32.sub
      i32.store
      global.get $bp
      i32.const 212
      i32.add
      global.get $bp
      i32.const 200
      i32.add
      i32.load
      global.get $bp
      i32.const 208
      i32.add
      i32.load
      i32.sub
      i32.store
      global.get $bp
      i32.const 32
      i32.add
      global.get $bp
      i32.const 16
      i32.add
      i64.load
      i32.const 5504
      global.get $bp
      i32.const 204
      i32.add
      i32.load
      i32.const 16
      i32.mul
      i32.add
      global.get $bp
      i32.const 212
      i32.add
      i32.load
      global.get $bp
      i32.const 40
      i32.add
      global.get $bp
      i32.const 48
      i32.add
      global.get $bp
      i32.const 176
      i32.add
      i32.load
      call $_ryu_mulShiftAll64
      i64.store
      global.get $bp
      i32.const 200
      i32.add
      i32.load
      i32.const 1
      i32.le_u
      (if 
        (then 
          global.get $bp
          i32.const 255
          i32.add
          i32.const 1
          i32.store8
          global.get $bp
          i32.const 253
          i32.add
          i32.load8_u
          (if 
            (then 
              global.get $bp
              i32.const 254
              i32.add
              global.get $bp
              i32.const 176
              i32.add
              i32.load
              i32.const 1
              i32.eq
              i32.store8
            )
            (else 
              global.get $bp
              i32.const 40
              i32.add
              global.get $bp
              i32.const 40
              i32.add
              i64.load
              i64.const 1
              i64.sub
              i64.store
            )
          )
        )
        (else 
          global.get $bp
          i32.const 200
          i32.add
          i32.load
          i32.const 63
          i32.lt_u
          (if 
            (then 
              global.get $bp
              i32.const 255
              i32.add
              global.get $bp
              i32.const 24
              i32.add
              i64.load
              global.get $bp
              i32.const 200
              i32.add
              i32.load
              call $_ryu_multipleOfPowerOf2
              i32.store8
            )
            (else 
            )
          )
        )
      )
    )
  )
  global.get $bp
  i32.const 216
  i32.add
  i32.const 0
  i32.store
  global.get $bp
  i32.const 256
  i32.add
  i32.const 0
  i32.store8
  global.get $bp
  i32.const 56
  i32.add
  i64.const 0
  i64.store
  global.get $bp
  i32.const 254
  i32.add
  i32.load8_u
  (if (result i32)
    (then 
      i32.const 1
    )
    (else 
      global.get $bp
      i32.const 255
      i32.add
      i32.load8_u
    )
  )
  (if 
    (then 
      block $b_0
        loop $l_0
          block $bi_0
            global.get $bp
            i32.const 64
            i32.add
            global.get $bp
            i32.const 40
            i32.add
            i64.load
            call $_ryu_div10
            i64.store
            global.get $bp
            i32.const 72
            i32.add
            global.get $bp
            i32.const 48
            i32.add
            i64.load
            call $_ryu_div10
            i64.store
            global.get $bp
            i32.const 64
            i32.add
            i64.load
            global.get $bp
            i32.const 72
            i32.add
            i64.load
            i64.le_u
            (if 
              (then 
                br $b_0
              )
              (else 
              )
            )
            global.get $bp
            i32.const 220
            i32.add
            global.get $bp
            i32.const 48
            i32.add
            i64.load
            i32.wrap_i64
            i32.const 10
            global.get $bp
            i32.const 72
            i32.add
            i64.load
            i32.wrap_i64
            i32.mul
            i32.sub
            i32.store
            global.get $bp
            i32.const 80
            i32.add
            global.get $bp
            i32.const 32
            i32.add
            i64.load
            call $_ryu_div10
            i64.store
            global.get $bp
            i32.const 224
            i32.add
            global.get $bp
            i32.const 32
            i32.add
            i64.load
            i32.wrap_i64
            i32.const 10
            global.get $bp
            i32.const 80
            i32.add
            i64.load
            i32.wrap_i64
            i32.mul
            i32.sub
            i32.store
            global.get $bp
            i32.const 254
            i32.add
            global.get $bp
            i32.const 254
            i32.add
            i32.load8_u
            global.get $bp
            i32.const 220
            i32.add
            i32.load
            i32.const 0
            i32.eq
            i32.and
            i32.store8
            global.get $bp
            i32.const 255
            i32.add
            global.get $bp
            i32.const 255
            i32.add
            i32.load8_u
            global.get $bp
            i32.const 256
            i32.add
            i32.load8_u
            i32.const 0
            i32.eq
            i32.and
            i32.store8
            global.get $bp
            i32.const 256
            i32.add
            global.get $bp
            i32.const 224
            i32.add
            i32.load
            i32.store8
            global.get $bp
            i32.const 32
            i32.add
            global.get $bp
            i32.const 80
            i32.add
            i64.load
            i64.store
            global.get $bp
            i32.const 40
            i32.add
            global.get $bp
            i32.const 64
            i32.add
            i64.load
            i64.store
            global.get $bp
            i32.const 48
            i32.add
            global.get $bp
            i32.const 72
            i32.add
            i64.load
            i64.store
            global.get $bp
            i32.const 216
            i32.add
            global.get $bp
            i32.const 216
            i32.add
            i32.load
            i32.const 1
            i32.add
            i32.store
          end
          br $l_0
        end
      end
      global.get $bp
      i32.const 254
      i32.add
      i32.load8_u
      (if 
        (then 
          block $b_0
            loop $l_0
              block $bi_0
                global.get $bp
                i32.const 88
                i32.add
                global.get $bp
                i32.const 48
                i32.add
                i64.load
                call $_ryu_div10
                i64.store
                global.get $bp
                i32.const 228
                i32.add
                global.get $bp
                i32.const 48
                i32.add
                i64.load
                i32.wrap_i64
                i32.const 10
                global.get $bp
                i32.const 88
                i32.add
                i64.load
                i32.wrap_i64
                i32.mul
                i32.sub
                i32.store
                global.get $bp
                i32.const 228
                i32.add
                i32.load
                i32.const 0
                i32.ne
                (if 
                  (then 
                    br $b_0
                  )
                  (else 
                  )
                )
                global.get $bp
                i32.const 96
                i32.add
                global.get $bp
                i32.const 40
                i32.add
                i64.load
                call $_ryu_div10
                i64.store
                global.get $bp
                i32.const 104
                i32.add
                global.get $bp
                i32.const 32
                i32.add
                i64.load
                call $_ryu_div10
                i64.store
                global.get $bp
                i32.const 232
                i32.add
                global.get $bp
                i32.const 32
                i32.add
                i64.load
                i32.wrap_i64
                i32.const 10
                global.get $bp
                i32.const 104
                i32.add
                i64.load
                i32.wrap_i64
                i32.mul
                i32.sub
                i32.store
                global.get $bp
                i32.const 255
                i32.add
                global.get $bp
                i32.const 255
                i32.add
                i32.load8_u
                global.get $bp
                i32.const 256
                i32.add
                i32.load8_u
                i32.const 0
                i32.eq
                i32.and
                i32.store8
                global.get $bp
                i32.const 256
                i32.add
                global.get $bp
                i32.const 232
                i32.add
                i32.load
                i32.store8
                global.get $bp
                i32.const 32
                i32.add
                global.get $bp
                i32.const 104
                i32.add
                i64.load
                i64.store
                global.get $bp
                i32.const 40
                i32.add
                global.get $bp
                i32.const 96
                i32.add
                i64.load
                i64.store
                global.get $bp
                i32.const 48
                i32.add
                global.get $bp
                i32.const 88
                i32.add
                i64.load
                i64.store
                global.get $bp
                i32.const 216
                i32.add
                global.get $bp
                i32.const 216
                i32.add
                i32.load
                i32.const 1
                i32.add
                i32.store
              end
              br $l_0
            end
          end
        )
        (else 
        )
      )
      global.get $bp
      i32.const 255
      i32.add
      i32.load8_u
      (if (result i32)
        (then 
          global.get $bp
          i32.const 256
          i32.add
          i32.load8_u
          i32.const 5
          i32.eq
        )
        (else 
          i32.const 0
        )
      )
      (if (result i32)
        (then 
          global.get $bp
          i32.const 32
          i32.add
          i64.load
          i64.const 2
          i64.rem_u
          i64.const 0
          i64.eq
        )
        (else 
          i32.const 0
        )
      )
      (if 
        (then 
          global.get $bp
          i32.const 256
          i32.add
          i32.const 4
          i32.store8
        )
        (else 
        )
      )
      global.get $bp
      i32.const 56
      i32.add
      global.get $bp
      i32.const 32
      i32.add
      i64.load
      global.get $bp
      i32.const 32
      i32.add
      i64.load
      global.get $bp
      i32.const 48
      i32.add
      i64.load
      i64.eq
      (if (result i32)
        (then 
          global.get $bp
          i32.const 253
          i32.add
          i32.load8_u
          i32.eqz
          (if (result i32)
            (then 
              i32.const 1
            )
            (else 
              global.get $bp
              i32.const 254
              i32.add
              i32.load8_u
              i32.eqz
            )
          )
        )
        (else 
          i32.const 0
        )
      )
      (if (result i32)
        (then 
          i32.const 1
        )
        (else 
          global.get $bp
          i32.const 256
          i32.add
          i32.load8_u
          i32.const 5
          i32.ge_u
        )
      )
      i64.extend_i32_u
      i64.add
      i64.store
    )
    (else 
      global.get $bp
      i32.const 257
      i32.add
      i32.const 0
      i32.store8
      global.get $bp
      i32.const 112
      i32.add
      global.get $bp
      i32.const 40
      i32.add
      i64.load
      call $_ryu_div100
      i64.store
      global.get $bp
      i32.const 120
      i32.add
      global.get $bp
      i32.const 48
      i32.add
      i64.load
      call $_ryu_div100
      i64.store
      global.get $bp
      i32.const 112
      i32.add
      i64.load
      global.get $bp
      i32.const 120
      i32.add
      i64.load
      i64.gt_u
      (if 
        (then 
          global.get $bp
          i32.const 128
          i32.add
          global.get $bp
          i32.const 32
          i32.add
          i64.load
          call $_ryu_div100
          i64.store
          global.get $bp
          i32.const 236
          i32.add
          global.get $bp
          i32.const 32
          i32.add
          i64.load
          i32.wrap_i64
          i32.const 100
          global.get $bp
          i32.const 128
          i32.add
          i64.load
          i32.wrap_i64
          i32.mul
          i32.sub
          i32.store
          global.get $bp
          i32.const 257
          i32.add
          global.get $bp
          i32.const 236
          i32.add
          i32.load
          i32.const 50
          i32.ge_u
          i32.store8
          global.get $bp
          i32.const 32
          i32.add
          global.get $bp
          i32.const 128
          i32.add
          i64.load
          i64.store
          global.get $bp
          i32.const 40
          i32.add
          global.get $bp
          i32.const 112
          i32.add
          i64.load
          i64.store
          global.get $bp
          i32.const 48
          i32.add
          global.get $bp
          i32.const 120
          i32.add
          i64.load
          i64.store
          global.get $bp
          i32.const 216
          i32.add
          global.get $bp
          i32.const 216
          i32.add
          i32.load
          i32.const 2
          i32.add
          i32.store
        )
        (else 
        )
      )
      block $b_0
        loop $l_0
          block $bi_0
            global.get $bp
            i32.const 136
            i32.add
            global.get $bp
            i32.const 40
            i32.add
            i64.load
            call $_ryu_div10
            i64.store
            global.get $bp
            i32.const 144
            i32.add
            global.get $bp
            i32.const 48
            i32.add
            i64.load
            call $_ryu_div10
            i64.store
            global.get $bp
            i32.const 136
            i32.add
            i64.load
            global.get $bp
            i32.const 144
            i32.add
            i64.load
            i64.le_u
            (if 
              (then 
                br $b_0
              )
              (else 
              )
            )
            global.get $bp
            i32.const 152
            i32.add
            global.get $bp
            i32.const 32
            i32.add
            i64.load
            call $_ryu_div10
            i64.store
            global.get $bp
            i32.const 240
            i32.add
            global.get $bp
            i32.const 32
            i32.add
            i64.load
            i32.wrap_i64
            i32.const 10
            global.get $bp
            i32.const 152
            i32.add
            i64.load
            i32.wrap_i64
            i32.mul
            i32.sub
            i32.store
            global.get $bp
            i32.const 257
            i32.add
            global.get $bp
            i32.const 240
            i32.add
            i32.load
            i32.const 5
            i32.ge_u
            i32.store8
            global.get $bp
            i32.const 32
            i32.add
            global.get $bp
            i32.const 152
            i32.add
            i64.load
            i64.store
            global.get $bp
            i32.const 40
            i32.add
            global.get $bp
            i32.const 136
            i32.add
            i64.load
            i64.store
            global.get $bp
            i32.const 48
            i32.add
            global.get $bp
            i32.const 144
            i32.add
            i64.load
            i64.store
            global.get $bp
            i32.const 216
            i32.add
            global.get $bp
            i32.const 216
            i32.add
            i32.load
            i32.const 1
            i32.add
            i32.store
          end
          br $l_0
        end
      end
      global.get $bp
      i32.const 56
      i32.add
      global.get $bp
      i32.const 32
      i32.add
      i64.load
      global.get $bp
      i32.const 32
      i32.add
      i64.load
      global.get $bp
      i32.const 48
      i32.add
      i64.load
      i64.eq
      (if (result i32)
        (then 
          i32.const 1
        )
        (else 
          global.get $bp
          i32.const 257
          i32.add
          i32.load8_u
        )
      )
      i64.extend_i32_u
      i64.add
      i64.store
    )
  )
  global.get $bp
  i32.const 244
  i32.add
  global.get $bp
  i32.const 180
  i32.add
  i32.load
  global.get $bp
  i32.const 216
  i32.add
  i32.load
  i32.add
  i32.store
  global.get $bp
  i32.const 248
  i32.add
  global.get $bp
  i32.const 244
  i32.add
  i32.load
  i32.store
  global.get $bp
  i32.const 160
  i32.add
  global.get $bp
  i32.const 56
  i32.add
  i64.load
  i64.store
  global.get $bp
  i32.const 160
  i32.add
  i64.load
  global.get $bp
  i32.const 248
  i32.add
  i32.load
  global.get $sp
  i32.const 264
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_d2s_to_chars (param i64) (param i32) (param i32) (param i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 120
  i32.add
  global.set $sp
  global.get $bp
  i32.const 8
  i32.add
  global.set $mem_address
  global.get $mem_address
  local.get 0
  i64.store
  global.get $mem_address
  i32.const 8
  i32.add
  local.get 1
  i32.store
  global.get $bp
  i32.const 116
  i32.add
  local.get 2
  i32.store8
  global.get $bp
  i32.const 40
  i32.add
  local.get 3
  i32.store
  global.get $bp
  i32.const 44
  i32.add
  i32.const 0
  i32.store
  global.get $bp
  i32.const 116
  i32.add
  i32.load8_u
  (if 
    (then 
      global.get $bp
      i32.const 40
      i32.add
      i32.load
      global.get $bp
      i32.const 44
      i32.add
      i32.load
      call $_ryu_offset_ptr_forward
      i32.const 10
      i32.const 1
      call $::struct::String::pointer
      i32.load8_u
      i32.store8
      global.get $bp
      i32.const 44
      i32.add
      global.get $bp
      i32.const 44
      i32.add
      i32.load
      i32.const 1
      i32.add
      i32.store
    )
    (else 
    )
  )
  global.get $bp
  i32.const 24
  i32.add
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.store
  global.get $bp
  i32.const 48
  i32.add
  global.get $bp
  i32.const 24
  i32.add
  i64.load
  call $_ryu_decimalLength17
  i32.wrap_i64
  i32.store
  global.get $bp
  i32.const 52
  i32.add
  i32.const 0
  i32.store
  global.get $bp
  i32.const 24
  i32.add
  i64.load
  i64.const 32
  i64.shr_u
  i64.const 0
  i64.ne
  (if 
    (then 
      global.get $bp
      i32.const 32
      i32.add
      global.get $bp
      i32.const 24
      i32.add
      i64.load
      call $_ryu_div1e8
      i64.store
      global.get $bp
      i32.const 56
      i32.add
      global.get $bp
      i32.const 24
      i32.add
      i64.load
      i32.wrap_i64
      i32.const 100000000
      global.get $bp
      i32.const 32
      i32.add
      i64.load
      i32.wrap_i64
      i32.mul
      i32.sub
      i32.store
      global.get $bp
      i32.const 24
      i32.add
      global.get $bp
      i32.const 32
      i32.add
      i64.load
      i64.store
      global.get $bp
      i32.const 60
      i32.add
      global.get $bp
      i32.const 56
      i32.add
      i32.load
      i32.const 10000
      i32.rem_u
      i32.store
      global.get $bp
      i32.const 56
      i32.add
      global.get $bp
      i32.const 56
      i32.add
      i32.load
      i32.const 10000
      i32.div_u
      i32.store
      global.get $bp
      i32.const 64
      i32.add
      global.get $bp
      i32.const 56
      i32.add
      i32.load
      i32.const 10000
      i32.rem_u
      i32.store
      global.get $bp
      i32.const 68
      i32.add
      global.get $bp
      i32.const 60
      i32.add
      i32.load
      i32.const 100
      i32.rem_u
      i32.const 1
      i32.shl
      i32.store
      global.get $bp
      i32.const 72
      i32.add
      global.get $bp
      i32.const 60
      i32.add
      i32.load
      i32.const 100
      i32.div_u
      i32.const 1
      i32.shl
      i32.store
      global.get $bp
      i32.const 76
      i32.add
      global.get $bp
      i32.const 64
      i32.add
      i32.load
      i32.const 100
      i32.rem_u
      i32.const 1
      i32.shl
      i32.store
      global.get $bp
      i32.const 80
      i32.add
      global.get $bp
      i32.const 64
      i32.add
      i32.load
      i32.const 100
      i32.div_u
      i32.const 1
      i32.shl
      i32.store
      global.get $bp
      i32.const 40
      i32.add
      i32.load
      global.get $bp
      i32.const 44
      i32.add
      i32.load
      global.get $bp
      i32.const 48
      i32.add
      i32.load
      i32.add
      global.get $bp
      i32.const 52
      i32.add
      i32.load
      i32.sub
      i32.const 1
      i32.sub
      call $_ryu_offset_ptr_forward
      i32.const 11536
      global.get $bp
      i32.const 68
      i32.add
      i32.load
      i32.add
      i32.const 2
      call $_ryu_memcpy
      global.get $bp
      i32.const 40
      i32.add
      i32.load
      global.get $bp
      i32.const 44
      i32.add
      i32.load
      global.get $bp
      i32.const 48
      i32.add
      i32.load
      i32.add
      global.get $bp
      i32.const 52
      i32.add
      i32.load
      i32.sub
      i32.const 3
      i32.sub
      call $_ryu_offset_ptr_forward
      i32.const 11536
      global.get $bp
      i32.const 72
      i32.add
      i32.load
      i32.add
      i32.const 2
      call $_ryu_memcpy
      global.get $bp
      i32.const 40
      i32.add
      i32.load
      global.get $bp
      i32.const 44
      i32.add
      i32.load
      global.get $bp
      i32.const 48
      i32.add
      i32.load
      i32.add
      global.get $bp
      i32.const 52
      i32.add
      i32.load
      i32.sub
      i32.const 5
      i32.sub
      call $_ryu_offset_ptr_forward
      i32.const 11536
      global.get $bp
      i32.const 76
      i32.add
      i32.load
      i32.add
      i32.const 2
      call $_ryu_memcpy
      global.get $bp
      i32.const 40
      i32.add
      i32.load
      global.get $bp
      i32.const 44
      i32.add
      i32.load
      global.get $bp
      i32.const 48
      i32.add
      i32.load
      i32.add
      global.get $bp
      i32.const 52
      i32.add
      i32.load
      i32.sub
      i32.const 7
      i32.sub
      call $_ryu_offset_ptr_forward
      i32.const 11536
      global.get $bp
      i32.const 80
      i32.add
      i32.load
      i32.add
      i32.const 2
      call $_ryu_memcpy
      global.get $bp
      i32.const 52
      i32.add
      global.get $bp
      i32.const 52
      i32.add
      i32.load
      i32.const 8
      i32.add
      i32.store
    )
    (else 
    )
  )
  global.get $bp
  i32.const 84
  i32.add
  global.get $bp
  i32.const 24
  i32.add
  i64.load
  i32.wrap_i64
  i32.store
  block $b_0
    loop $l_0
      block $bi_0
        global.get $bp
        i32.const 84
        i32.add
        i32.load
        i32.const 10000
        i32.lt_u
        (if 
          (then 
            br $b_0
          )
          (else 
          )
        )
        global.get $bp
        i32.const 88
        i32.add
        global.get $bp
        i32.const 84
        i32.add
        i32.load
        i32.const 10000
        i32.rem_u
        i32.store
        global.get $bp
        i32.const 84
        i32.add
        global.get $bp
        i32.const 84
        i32.add
        i32.load
        i32.const 10000
        i32.div_u
        i32.store
        global.get $bp
        i32.const 92
        i32.add
        global.get $bp
        i32.const 88
        i32.add
        i32.load
        i32.const 100
        i32.rem_u
        i32.const 1
        i32.shl
        i32.store
        global.get $bp
        i32.const 96
        i32.add
        global.get $bp
        i32.const 88
        i32.add
        i32.load
        i32.const 100
        i32.div_u
        i32.const 1
        i32.shl
        i32.store
        global.get $bp
        i32.const 40
        i32.add
        i32.load
        global.get $bp
        i32.const 44
        i32.add
        i32.load
        global.get $bp
        i32.const 48
        i32.add
        i32.load
        i32.add
        global.get $bp
        i32.const 52
        i32.add
        i32.load
        i32.sub
        i32.const 1
        i32.sub
        call $_ryu_offset_ptr_forward
        i32.const 11536
        global.get $bp
        i32.const 92
        i32.add
        i32.load
        i32.add
        i32.const 2
        call $_ryu_memcpy
        global.get $bp
        i32.const 40
        i32.add
        i32.load
        global.get $bp
        i32.const 44
        i32.add
        i32.load
        global.get $bp
        i32.const 48
        i32.add
        i32.load
        i32.add
        global.get $bp
        i32.const 52
        i32.add
        i32.load
        i32.sub
        i32.const 3
        i32.sub
        call $_ryu_offset_ptr_forward
        i32.const 11536
        global.get $bp
        i32.const 96
        i32.add
        i32.load
        i32.add
        i32.const 2
        call $_ryu_memcpy
        global.get $bp
        i32.const 52
        i32.add
        global.get $bp
        i32.const 52
        i32.add
        i32.load
        i32.const 4
        i32.add
        i32.store
      end
      br $l_0
    end
  end
  global.get $bp
  i32.const 84
  i32.add
  i32.load
  i32.const 100
  i32.ge_u
  (if 
    (then 
      global.get $bp
      i32.const 100
      i32.add
      global.get $bp
      i32.const 84
      i32.add
      i32.load
      i32.const 100
      i32.rem_u
      i32.const 1
      i32.shl
      i32.store
      global.get $bp
      i32.const 84
      i32.add
      global.get $bp
      i32.const 84
      i32.add
      i32.load
      i32.const 100
      i32.div_u
      i32.store
      global.get $bp
      i32.const 40
      i32.add
      i32.load
      global.get $bp
      i32.const 44
      i32.add
      i32.load
      global.get $bp
      i32.const 48
      i32.add
      i32.load
      i32.add
      global.get $bp
      i32.const 52
      i32.add
      i32.load
      i32.sub
      i32.const 1
      i32.sub
      call $_ryu_offset_ptr_forward
      i32.const 11536
      global.get $bp
      i32.const 100
      i32.add
      i32.load
      i32.add
      i32.const 2
      call $_ryu_memcpy
      global.get $bp
      i32.const 52
      i32.add
      global.get $bp
      i32.const 52
      i32.add
      i32.load
      i32.const 2
      i32.add
      i32.store
    )
    (else 
    )
  )
  global.get $bp
  i32.const 84
  i32.add
  i32.load
  i32.const 10
  i32.ge_u
  (if 
    (then 
      global.get $bp
      i32.const 104
      i32.add
      global.get $bp
      i32.const 84
      i32.add
      i32.load
      i32.const 1
      i32.shl
      i32.store
      global.get $bp
      i32.const 40
      i32.add
      i32.load
      global.get $bp
      i32.const 44
      i32.add
      i32.load
      global.get $bp
      i32.const 48
      i32.add
      i32.load
      i32.add
      global.get $bp
      i32.const 52
      i32.add
      i32.load
      i32.sub
      call $_ryu_offset_ptr_forward
      i32.const 11536
      global.get $bp
      i32.const 104
      i32.add
      i32.load
      i32.const 1
      i32.add
      i32.add
      i32.load8_u
      i32.store8
      global.get $bp
      i32.const 40
      i32.add
      i32.load
      global.get $bp
      i32.const 44
      i32.add
      i32.load
      call $_ryu_offset_ptr_forward
      i32.const 11536
      global.get $bp
      i32.const 104
      i32.add
      i32.load
      i32.add
      i32.load8_u
      i32.store8
    )
    (else 
      global.get $bp
      i32.const 40
      i32.add
      i32.load
      global.get $bp
      i32.const 44
      i32.add
      i32.load
      call $_ryu_offset_ptr_forward
      i32.const 11
      i32.const 1
      call $::struct::String::pointer
      i32.load8_u
      global.get $bp
      i32.const 84
      i32.add
      i32.load
      i32.add
      i32.store8
    )
  )
  global.get $bp
  i32.const 48
  i32.add
  i32.load
  i32.const 1
  i32.gt_u
  (if 
    (then 
      global.get $bp
      i32.const 40
      i32.add
      i32.load
      global.get $bp
      i32.const 44
      i32.add
      i32.load
      i32.const 1
      i32.add
      call $_ryu_offset_ptr_forward
      i32.const 12
      i32.const 1
      call $::struct::String::pointer
      i32.load8_u
      i32.store8
      global.get $bp
      i32.const 44
      i32.add
      global.get $bp
      i32.const 44
      i32.add
      i32.load
      global.get $bp
      i32.const 48
      i32.add
      i32.load
      i32.add
      i32.const 1
      i32.add
      i32.store
    )
    (else 
      global.get $bp
      i32.const 44
      i32.add
      global.get $bp
      i32.const 44
      i32.add
      i32.load
      i32.const 1
      i32.add
      i32.store
    )
  )
  global.get $bp
  i32.const 40
  i32.add
  i32.load
  global.get $bp
  i32.const 44
  i32.add
  i32.load
  call $_ryu_offset_ptr_forward
  i32.const 13
  i32.const 1
  call $::struct::String::pointer
  i32.load8_u
  i32.store8
  global.get $bp
  i32.const 44
  i32.add
  global.get $bp
  i32.const 44
  i32.add
  i32.load
  i32.const 1
  i32.add
  i32.store
  global.get $bp
  i32.const 108
  i32.add
  global.get $bp
  i32.const 8
  i32.add
  i32.const 8
  i32.add
  i32.load
  global.get $bp
  i32.const 48
  i32.add
  i32.load
  i32.add
  i32.const 1
  i32.sub
  i32.store
  global.get $bp
  i32.const 108
  i32.add
  i32.load
  i32.const 0
  i32.lt_s
  (if 
    (then 
      global.get $bp
      i32.const 40
      i32.add
      i32.load
      global.get $bp
      i32.const 44
      i32.add
      i32.load
      call $_ryu_offset_ptr_forward
      i32.const 10
      i32.const 1
      call $::struct::String::pointer
      i32.load8_u
      i32.store8
      global.get $bp
      i32.const 44
      i32.add
      global.get $bp
      i32.const 44
      i32.add
      i32.load
      i32.const 1
      i32.add
      i32.store
      global.get $bp
      i32.const 108
      i32.add
      global.get $bp
      i32.const 108
      i32.add
      i32.load
      i32.const 4294967295
      i32.xor
      i32.const 1
      i32.add
      i32.store
    )
    (else 
    )
  )
  global.get $bp
  i32.const 108
  i32.add
  i32.load
  i32.const 100
  i32.ge_s
  (if 
    (then 
      global.get $bp
      i32.const 112
      i32.add
      global.get $bp
      i32.const 108
      i32.add
      i32.load
      i32.const 10
      i32.rem_s
      i32.store
      global.get $bp
      i32.const 40
      i32.add
      i32.load
      global.get $bp
      i32.const 44
      i32.add
      i32.load
      call $_ryu_offset_ptr_forward
      i32.const 11536
      i32.const 2
      global.get $bp
      i32.const 108
      i32.add
      i32.load
      i32.const 10
      i32.div_s
      i32.mul
      i32.add
      i32.const 2
      call $_ryu_memcpy
      global.get $bp
      i32.const 40
      i32.add
      i32.load
      global.get $bp
      i32.const 44
      i32.add
      i32.load
      i32.const 2
      i32.add
      call $_ryu_offset_ptr_forward
      i32.const 11
      i32.const 1
      call $::struct::String::pointer
      i32.load8_u
      global.get $bp
      i32.const 112
      i32.add
      i32.load
      i32.add
      i32.store8
      global.get $bp
      i32.const 44
      i32.add
      global.get $bp
      i32.const 44
      i32.add
      i32.load
      i32.const 3
      i32.add
      i32.store
    )
    (else 
      global.get $bp
      i32.const 108
      i32.add
      i32.load
      i32.const 10
      i32.ge_s
      (if 
        (then 
          global.get $bp
          i32.const 40
          i32.add
          i32.load
          global.get $bp
          i32.const 44
          i32.add
          i32.load
          call $_ryu_offset_ptr_forward
          i32.const 11536
          i32.const 2
          global.get $bp
          i32.const 108
          i32.add
          i32.load
          i32.mul
          i32.add
          i32.const 2
          call $_ryu_memcpy
          global.get $bp
          i32.const 44
          i32.add
          global.get $bp
          i32.const 44
          i32.add
          i32.load
          i32.const 2
          i32.add
          i32.store
        )
        (else 
          global.get $bp
          i32.const 40
          i32.add
          i32.load
          global.get $bp
          i32.const 44
          i32.add
          i32.load
          call $_ryu_offset_ptr_forward
          i32.const 11
          i32.const 1
          call $::struct::String::pointer
          i32.load8_u
          global.get $bp
          i32.const 108
          i32.add
          i32.load
          i32.add
          i32.store8
          global.get $bp
          i32.const 44
          i32.add
          global.get $bp
          i32.const 44
          i32.add
          i32.load
          i32.const 1
          i32.add
          i32.store
        )
      )
    )
  )
  global.get $bp
  i32.const 44
  i32.add
  i32.load
  global.get $sp
  i32.const 120
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_d2d_small_int (param i64) (param i32) (param i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 56
  i32.add
  global.set $sp
  global.get $bp
  i32.const 8
  i32.add
  local.get 0
  i64.store
  global.get $bp
  i32.const 40
  i32.add
  local.get 1
  i32.store
  global.get $bp
  i32.const 44
  i32.add
  local.get 2
  i32.store
  global.get $bp
  i32.const 16
  i32.add
  i64.const 4503599627370496
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.or
  i64.store
  global.get $bp
  i32.const 48
  i32.add
  global.get $bp
  i32.const 40
  i32.add
  i32.load
  i32.const 1023
  i32.sub
  i32.const 52
  i32.sub
  i32.store
  global.get $bp
  i32.const 48
  i32.add
  i32.load
  i32.const 0
  i32.gt_s
  (if 
    (then 
      i32.const 0
      global.get $sp
      i32.const 56
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 48
  i32.add
  i32.load
  i32.const -52
  i32.lt_s
  (if 
    (then 
      i32.const 0
      global.get $sp
      i32.const 56
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 24
  i32.add
  i64.const 1
  global.get $bp
  i32.const 48
  i32.add
  i32.load
  i32.const 4294967295
  i32.xor
  i32.const 1
  i32.add
  i64.extend_i32_u
  i64.shl
  i64.const 1
  i64.sub
  i64.store
  global.get $bp
  i32.const 32
  i32.add
  global.get $bp
  i32.const 16
  i32.add
  i64.load
  global.get $bp
  i32.const 24
  i32.add
  i64.load
  i64.and
  i64.store
  global.get $bp
  i32.const 32
  i32.add
  i64.load
  i64.const 0
  i64.ne
  (if 
    (then 
      i32.const 0
      global.get $sp
      i32.const 56
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 44
  i32.add
  i32.load
  global.get $bp
  i32.const 16
  i32.add
  i64.load
  global.get $bp
  i32.const 48
  i32.add
  i32.load
  i32.const 4294967295
  i32.xor
  i32.const 1
  i32.add
  i64.extend_i32_u
  i64.shr_u
  i64.store
  global.get $bp
  i32.const 44
  i32.add
  i32.load
  i32.const 8
  i32.add
  i32.const 0
  i32.store
  i32.const 1
  global.get $sp
  i32.const 56
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_d2s_buffered_n (param f64) (param i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 88
  i32.add
  global.set $sp
  global.get $bp
  i32.const 8
  i32.add
  local.get 0
  f64.store
  global.get $bp
  i32.const 64
  i32.add
  local.get 1
  i32.store
  global.get $bp
  i32.const 16
  i32.add
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.store
  global.get $bp
  i32.const 80
  i32.add
  global.get $bp
  i32.const 16
  i32.add
  i64.load
  i64.const 63
  i64.shr_u
  i64.const 1
  i64.and
  i64.const 0
  i64.ne
  i32.store8
  global.get $bp
  i32.const 24
  i32.add
  global.get $bp
  i32.const 16
  i32.add
  i64.load
  i64.const 4503599627370495
  i64.and
  i64.store
  global.get $bp
  i32.const 68
  i32.add
  global.get $bp
  i32.const 16
  i32.add
  i64.load
  i64.const 52
  i64.shr_u
  i64.const 2047
  i64.and
  i32.wrap_i64
  i32.store
  global.get $bp
  i32.const 68
  i32.add
  i32.load
  i32.const 2047
  i32.eq
  (if (result i32)
    (then 
      i32.const 1
    )
    (else 
      global.get $bp
      i32.const 68
      i32.add
      i32.load
      i32.const 0
      i32.eq
      (if (result i32)
        (then 
          global.get $bp
          i32.const 24
          i32.add
          i64.load
          i64.const 0
          i64.eq
        )
        (else 
          i32.const 0
        )
      )
    )
  )
  (if 
    (then 
      global.get $bp
      i32.const 64
      i32.add
      i32.load
      global.get $bp
      i32.const 80
      i32.add
      i32.load8_u
      global.get $bp
      i32.const 68
      i32.add
      i32.load
      i32.const 0
      i32.gt_u
      global.get $bp
      i32.const 24
      i32.add
      i64.load
      i64.const 0
      i64.gt_u
      call $_ryu_copy_special_str
      global.get $sp
      i32.const 88
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 32
  i32.add
  global.get $bp
  i32.const 56
  i32.add
  i64.const 0
  i64.store
  global.get $bp
  i32.const 76
  i32.add
  i32.const 0
  i32.store
  global.get $bp
  i32.const 56
  i32.add
  i64.load
  global.get $bp
  i32.const 76
  i32.add
  i32.load
  call $::store::2
  global.get $bp
  i32.const 81
  i32.add
  global.get $bp
  i32.const 24
  i32.add
  i64.load
  global.get $bp
  i32.const 68
  i32.add
  i32.load
  global.get $bp
  i32.const 32
  i32.add
  call $_ryu_d2d_small_int
  i32.store8
  global.get $bp
  i32.const 81
  i32.add
  i32.load8_u
  (if 
    (then 
      block $b_0
        loop $l_0
          block $bi_0
            global.get $bp
            i32.const 48
            i32.add
            global.get $bp
            i32.const 32
            i32.add
            i64.load
            call $_ryu_div10
            i64.store
            global.get $bp
            i32.const 72
            i32.add
            global.get $bp
            i32.const 32
            i32.add
            i64.load
            i32.wrap_i64
            i32.const 10
            global.get $bp
            i32.const 48
            i32.add
            i64.load
            i32.wrap_i64
            i32.mul
            i32.sub
            i32.store
            global.get $bp
            i32.const 72
            i32.add
            i32.load
            i32.const 0
            i32.ne
            (if 
              (then 
                br $b_0
              )
              (else 
              )
            )
            global.get $bp
            i32.const 32
            i32.add
            global.get $bp
            i32.const 48
            i32.add
            i64.load
            i64.store
            global.get $bp
            i32.const 32
            i32.add
            i32.const 8
            i32.add
            global.get $bp
            i32.const 32
            i32.add
            i32.const 8
            i32.add
            i32.load
            i32.const 1
            i32.add
            i32.store
          end
          br $l_0
        end
      end
    )
    (else 
      global.get $bp
      i32.const 32
      i32.add
      global.get $bp
      i32.const 24
      i32.add
      i64.load
      global.get $bp
      i32.const 68
      i32.add
      i32.load
      call $_ryu_d2d
      call $::store::2
    )
  )
  global.get $bp
  i32.const 32
  i32.add
  global.set $mem_address
  global.get $mem_address
  i64.load
  global.get $mem_address
  i32.const 8
  i32.add
  i32.load
  global.get $bp
  i32.const 80
  i32.add
  i32.load8_u
  global.get $bp
  i32.const 64
  i32.add
  i32.load
  call $_ryu_d2s_to_chars
  global.get $sp
  i32.const 88
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $ryu_d2s_buffered (param f64) (param i32) (result i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 32
  i32.add
  global.set $sp
  global.get $bp
  i32.const 8
  i32.add
  local.get 0
  f64.store
  global.get $bp
  i32.const 16
  i32.add
  local.get 1
  i32.store
  global.get $bp
  i32.const 20
  i32.add
  global.get $bp
  i32.const 8
  i32.add
  f64.load
  global.get $bp
  i32.const 16
  i32.add
  i32.load
  call $_ryu_d2s_buffered_n
  i32.store
  global.get $bp
  i32.const 24
  i32.add
  global.get $bp
  i32.const 16
  i32.add
  i32.load
  i32.store
  global.get $bp
  i32.const 28
  i32.add
  global.get $bp
  i32.const 20
  i32.add
  i32.load
  i32.store
  global.get $bp
  i32.const 24
  i32.add
  i32.load
  global.get $bp
  i32.const 28
  i32.add
  i32.load
  global.get $sp
  i32.const 32
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_umul128 (param i64) (param i64) (param i32) (result i64)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 136
  i32.add
  global.set $sp
  global.get $bp
  i32.const 8
  i32.add
  local.get 0
  i64.store
  global.get $bp
  i32.const 16
  i32.add
  local.get 1
  i64.store
  global.get $bp
  i32.const 88
  i32.add
  local.get 2
  i32.store
  global.get $bp
  i32.const 92
  i32.add
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i32.wrap_i64
  i32.store
  global.get $bp
  i32.const 96
  i32.add
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 32
  i64.shr_u
  i32.wrap_i64
  i32.store
  global.get $bp
  i32.const 100
  i32.add
  global.get $bp
  i32.const 16
  i32.add
  i64.load
  i32.wrap_i64
  i32.store
  global.get $bp
  i32.const 104
  i32.add
  global.get $bp
  i32.const 16
  i32.add
  i64.load
  i64.const 32
  i64.shr_u
  i32.wrap_i64
  i32.store
  global.get $bp
  i32.const 24
  i32.add
  global.get $bp
  i32.const 92
  i32.add
  i32.load
  i64.extend_i32_u
  global.get $bp
  i32.const 100
  i32.add
  i32.load
  i64.extend_i32_u
  i64.mul
  i64.store
  global.get $bp
  i32.const 32
  i32.add
  global.get $bp
  i32.const 92
  i32.add
  i32.load
  i64.extend_i32_u
  global.get $bp
  i32.const 104
  i32.add
  i32.load
  i64.extend_i32_u
  i64.mul
  i64.store
  global.get $bp
  i32.const 40
  i32.add
  global.get $bp
  i32.const 96
  i32.add
  i32.load
  i64.extend_i32_u
  global.get $bp
  i32.const 100
  i32.add
  i32.load
  i64.extend_i32_u
  i64.mul
  i64.store
  global.get $bp
  i32.const 48
  i32.add
  global.get $bp
  i32.const 96
  i32.add
  i32.load
  i64.extend_i32_u
  global.get $bp
  i32.const 104
  i32.add
  i32.load
  i64.extend_i32_u
  i64.mul
  i64.store
  global.get $bp
  i32.const 108
  i32.add
  global.get $bp
  i32.const 24
  i32.add
  i64.load
  i32.wrap_i64
  i32.store
  global.get $bp
  i32.const 112
  i32.add
  global.get $bp
  i32.const 24
  i32.add
  i64.load
  i64.const 32
  i64.shr_u
  i32.wrap_i64
  i32.store
  global.get $bp
  i32.const 56
  i32.add
  global.get $bp
  i32.const 40
  i32.add
  i64.load
  global.get $bp
  i32.const 112
  i32.add
  i32.load
  i64.extend_i32_u
  i64.add
  i64.store
  global.get $bp
  i32.const 116
  i32.add
  global.get $bp
  i32.const 56
  i32.add
  i64.load
  i32.wrap_i64
  i32.store
  global.get $bp
  i32.const 120
  i32.add
  global.get $bp
  i32.const 56
  i32.add
  i64.load
  i64.const 32
  i64.shr_u
  i32.wrap_i64
  i32.store
  global.get $bp
  i32.const 64
  i32.add
  global.get $bp
  i32.const 32
  i32.add
  i64.load
  global.get $bp
  i32.const 116
  i32.add
  i32.load
  i64.extend_i32_u
  i64.add
  i64.store
  global.get $bp
  i32.const 124
  i32.add
  global.get $bp
  i32.const 64
  i32.add
  i64.load
  i32.wrap_i64
  i32.store
  global.get $bp
  i32.const 128
  i32.add
  global.get $bp
  i32.const 64
  i32.add
  i64.load
  i64.const 32
  i64.shr_u
  i32.wrap_i64
  i32.store
  global.get $bp
  i32.const 72
  i32.add
  global.get $bp
  i32.const 48
  i32.add
  i64.load
  global.get $bp
  i32.const 120
  i32.add
  i32.load
  i64.extend_i32_u
  i64.add
  global.get $bp
  i32.const 128
  i32.add
  i32.load
  i64.extend_i32_u
  i64.add
  i64.store
  global.get $bp
  i32.const 80
  i32.add
  global.get $bp
  i32.const 124
  i32.add
  i32.load
  i64.extend_i32_u
  i64.const 32
  i64.shl
  global.get $bp
  i32.const 108
  i32.add
  i32.load
  i64.extend_i32_u
  i64.or
  i64.store
  global.get $bp
  i32.const 88
  i32.add
  i32.load
  global.get $bp
  i32.const 72
  i32.add
  i64.load
  i64.store
  global.get $bp
  i32.const 80
  i32.add
  i64.load
  global.get $sp
  i32.const 136
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_shiftright128 (param i64) (param i64) (param i32) (result i64)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 32
  i32.add
  global.set $sp
  global.get $bp
  i32.const 8
  i32.add
  local.get 0
  i64.store
  global.get $bp
  i32.const 16
  i32.add
  local.get 1
  i64.store
  global.get $bp
  i32.const 24
  i32.add
  local.get 2
  i32.store
  global.get $bp
  i32.const 24
  i32.add
  i32.load
  i32.const 64
  i32.lt_u
  call $assert
  global.get $bp
  i32.const 24
  i32.add
  i32.load
  i32.const 0
  i32.gt_u
  call $assert
  global.get $bp
  i32.const 16
  i32.add
  i64.load
  i32.const 64
  global.get $bp
  i32.const 24
  i32.add
  i32.load
  i32.sub
  i64.extend_i32_u
  i64.shl
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  global.get $bp
  i32.const 24
  i32.add
  i32.load
  i64.extend_i32_u
  i64.shr_u
  i64.or
  global.get $sp
  i32.const 32
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_div5 (param i64) (result i64)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 16
  i32.add
  global.set $sp
  global.get $bp
  i32.const 8
  i32.add
  local.get 0
  i64.store
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 5
  i64.div_u
  global.get $sp
  i32.const 16
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_div10 (param i64) (result i64)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 16
  i32.add
  global.set $sp
  global.get $bp
  i32.const 8
  i32.add
  local.get 0
  i64.store
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 10
  i64.div_u
  global.get $sp
  i32.const 16
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_div100 (param i64) (result i64)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 16
  i32.add
  global.set $sp
  global.get $bp
  i32.const 8
  i32.add
  local.get 0
  i64.store
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 100
  i64.div_u
  global.get $sp
  i32.const 16
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_div1e8 (param i64) (result i64)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 16
  i32.add
  global.set $sp
  global.get $bp
  i32.const 8
  i32.add
  local.get 0
  i64.store
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 100000000
  i64.div_u
  global.get $sp
  i32.const 16
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_div1e9 (param i64) (result i64)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 16
  i32.add
  global.set $sp
  global.get $bp
  i32.const 8
  i32.add
  local.get 0
  i64.store
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 1000000000
  i64.div_u
  global.get $sp
  i32.const 16
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_mod1e9 (param i64) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 16
  i32.add
  global.set $sp
  global.get $bp
  i32.const 8
  i32.add
  local.get 0
  i64.store
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 1000000000
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  call $_ryu_div1e9
  i64.mul
  i64.sub
  i32.wrap_i64
  global.get $sp
  i32.const 16
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_pow5Factor (param i64) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 40
  i32.add
  global.set $sp
  global.get $bp
  i32.const 8
  i32.add
  local.get 0
  i64.store
  global.get $bp
  i32.const 16
  i32.add
  i64.const 14757395258967641293
  i64.store
  global.get $bp
  i32.const 24
  i32.add
  i64.const 3689348814741910323
  i64.store
  global.get $bp
  i32.const 32
  i32.add
  i32.const 0
  i32.store
  block $b_0
    loop $l_0
      block $bi_0
        global.get $bp
        i32.const 8
        i32.add
        i64.load
        i64.const 0
        i64.ne
        call $assert
        global.get $bp
        i32.const 8
        i32.add
        global.get $bp
        i32.const 8
        i32.add
        i64.load
        global.get $bp
        i32.const 16
        i32.add
        i64.load
        i64.mul
        i64.store
        global.get $bp
        i32.const 8
        i32.add
        i64.load
        global.get $bp
        i32.const 24
        i32.add
        i64.load
        i64.gt_u
        (if 
          (then 
            br $b_0
          )
          (else 
          )
        )
        global.get $bp
        i32.const 32
        i32.add
        global.get $bp
        i32.const 32
        i32.add
        i32.load
        i32.const 1
        i32.add
        i32.store
      end
      br $l_0
    end
  end
  global.get $bp
  i32.const 32
  i32.add
  i32.load
  global.get $sp
  i32.const 40
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_multipleOfPowerOf5 (param i64) (param i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 24
  i32.add
  global.set $sp
  global.get $bp
  i32.const 8
  i32.add
  local.get 0
  i64.store
  global.get $bp
  i32.const 16
  i32.add
  local.get 1
  i32.store
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  call $_ryu_pow5Factor
  global.get $bp
  i32.const 16
  i32.add
  i32.load
  i32.ge_u
  global.get $sp
  i32.const 24
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_multipleOfPowerOf2 (param i64) (param i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 24
  i32.add
  global.set $sp
  global.get $bp
  i32.const 8
  i32.add
  local.get 0
  i64.store
  global.get $bp
  i32.const 16
  i32.add
  local.get 1
  i32.store
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 0
  i64.ne
  call $assert
  global.get $bp
  i32.const 16
  i32.add
  i32.load
  i32.const 64
  i32.lt_u
  call $assert
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i32.const 1
  global.get $bp
  i32.const 16
  i32.add
  i32.load
  i32.shl
  i32.const 1
  i32.sub
  i64.extend_i32_u
  i64.and
  i64.const 0
  i64.eq
  global.get $sp
  i32.const 24
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_mulShift64 (param i64) (param i32) (param i32) (result i64)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 56
  i32.add
  global.set $sp
  global.get $bp
  i32.const 8
  i32.add
  local.get 0
  i64.store
  global.get $bp
  i32.const 48
  i32.add
  local.get 1
  i32.store
  global.get $bp
  i32.const 52
  i32.add
  local.get 2
  i32.store
  global.get $bp
  i32.const 16
  i32.add
  i64.const 0
  i64.store
  global.get $bp
  i32.const 24
  i32.add
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  global.get $bp
  i32.const 48
  i32.add
  i32.load
  i32.const 8
  i32.add
  i64.load
  global.get $bp
  i32.const 16
  i32.add
  call $_ryu_umul128
  i64.store
  global.get $bp
  i32.const 32
  i32.add
  i64.const 0
  i64.store
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  global.get $bp
  i32.const 48
  i32.add
  i32.load
  i64.load
  global.get $bp
  i32.const 32
  i32.add
  call $_ryu_umul128
  drop
  global.get $bp
  i32.const 40
  i32.add
  global.get $bp
  i32.const 32
  i32.add
  i64.load
  global.get $bp
  i32.const 24
  i32.add
  i64.load
  i64.add
  i64.store
  global.get $bp
  i32.const 40
  i32.add
  i64.load
  global.get $bp
  i32.const 32
  i32.add
  i64.load
  i64.lt_u
  (if 
    (then 
      global.get $bp
      i32.const 16
      i32.add
      global.get $bp
      i32.const 16
      i32.add
      i64.load
      i64.const 1
      i64.add
      i64.store
    )
    (else 
    )
  )
  global.get $bp
  i32.const 40
  i32.add
  i64.load
  global.get $bp
  i32.const 16
  i32.add
  i64.load
  global.get $bp
  i32.const 52
  i32.add
  i32.load
  i32.const 64
  i32.sub
  call $_ryu_shiftright128
  global.get $sp
  i32.const 56
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_mulShiftAll64 (param i64) (param i32) (param i32) (param i32) (param i32) (param i32) (result i64)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 168
  i32.add
  global.set $sp
  global.get $bp
  i32.const 8
  i32.add
  local.get 0
  i64.store
  global.get $bp
  i32.const 144
  i32.add
  local.get 1
  i32.store
  global.get $bp
  i32.const 148
  i32.add
  local.get 2
  i32.store
  global.get $bp
  i32.const 152
  i32.add
  local.get 3
  i32.store
  global.get $bp
  i32.const 156
  i32.add
  local.get 4
  i32.store
  global.get $bp
  i32.const 160
  i32.add
  local.get 5
  i32.store
  global.get $bp
  i32.const 8
  i32.add
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 1
  i64.shl
  i64.store
  global.get $bp
  i32.const 16
  i32.add
  i64.const 0
  i64.store
  global.get $bp
  i32.const 24
  i32.add
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  global.get $bp
  i32.const 144
  i32.add
  i32.load
  i64.load
  global.get $bp
  i32.const 16
  i32.add
  call $_ryu_umul128
  i64.store
  global.get $bp
  i32.const 32
  i32.add
  i64.const 0
  i64.store
  global.get $bp
  i32.const 40
  i32.add
  global.get $bp
  i32.const 16
  i32.add
  i64.load
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  global.get $bp
  i32.const 144
  i32.add
  i32.load
  i32.const 8
  i32.add
  i64.load
  global.get $bp
  i32.const 32
  i32.add
  call $_ryu_umul128
  i64.add
  i64.store
  global.get $bp
  i32.const 32
  i32.add
  global.get $bp
  i32.const 32
  i32.add
  i64.load
  global.get $bp
  i32.const 40
  i32.add
  i64.load
  global.get $bp
  i32.const 16
  i32.add
  i64.load
  i64.lt_u
  i64.extend_i32_u
  i64.add
  i64.store
  global.get $bp
  i32.const 48
  i32.add
  global.get $bp
  i32.const 24
  i32.add
  i64.load
  global.get $bp
  i32.const 144
  i32.add
  i32.load
  i64.load
  i64.add
  i64.store
  global.get $bp
  i32.const 56
  i32.add
  global.get $bp
  i32.const 40
  i32.add
  i64.load
  global.get $bp
  i32.const 144
  i32.add
  i32.load
  i32.const 8
  i32.add
  i64.load
  i64.add
  global.get $bp
  i32.const 48
  i32.add
  i64.load
  global.get $bp
  i32.const 24
  i32.add
  i64.load
  i64.lt_u
  i64.extend_i32_u
  i64.add
  i64.store
  global.get $bp
  i32.const 64
  i32.add
  global.get $bp
  i32.const 32
  i32.add
  i64.load
  global.get $bp
  i32.const 56
  i32.add
  i64.load
  global.get $bp
  i32.const 40
  i32.add
  i64.load
  i64.lt_u
  i64.extend_i32_u
  i64.add
  i64.store
  global.get $bp
  i32.const 152
  i32.add
  i32.load
  global.get $bp
  i32.const 56
  i32.add
  i64.load
  global.get $bp
  i32.const 64
  i32.add
  i64.load
  global.get $bp
  i32.const 148
  i32.add
  i32.load
  i32.const 64
  i32.sub
  i32.const 1
  i32.sub
  call $_ryu_shiftright128
  i64.store
  global.get $bp
  i32.const 160
  i32.add
  i32.load
  i32.const 1
  i32.eq
  (if 
    (then 
      global.get $bp
      i32.const 72
      i32.add
      global.get $bp
      i32.const 24
      i32.add
      i64.load
      global.get $bp
      i32.const 144
      i32.add
      i32.load
      i64.load
      i64.sub
      i64.store
      global.get $bp
      i32.const 80
      i32.add
      global.get $bp
      i32.const 40
      i32.add
      i64.load
      global.get $bp
      i32.const 144
      i32.add
      i32.load
      i32.const 8
      i32.add
      i64.load
      i64.sub
      global.get $bp
      i32.const 72
      i32.add
      i64.load
      global.get $bp
      i32.const 24
      i32.add
      i64.load
      i64.gt_u
      i64.extend_i32_u
      i64.sub
      i64.store
      global.get $bp
      i32.const 88
      i32.add
      global.get $bp
      i32.const 32
      i32.add
      i64.load
      global.get $bp
      i32.const 80
      i32.add
      i64.load
      global.get $bp
      i32.const 40
      i32.add
      i64.load
      i64.gt_u
      i64.extend_i32_u
      i64.sub
      i64.store
      global.get $bp
      i32.const 156
      i32.add
      i32.load
      global.get $bp
      i32.const 80
      i32.add
      i64.load
      global.get $bp
      i32.const 88
      i32.add
      i64.load
      global.get $bp
      i32.const 148
      i32.add
      i32.load
      i32.const 64
      i32.sub
      i32.const 1
      i32.sub
      call $_ryu_shiftright128
      i64.store
    )
    (else 
      global.get $bp
      i32.const 96
      i32.add
      global.get $bp
      i32.const 24
      i32.add
      i64.load
      global.get $bp
      i32.const 24
      i32.add
      i64.load
      i64.add
      i64.store
      global.get $bp
      i32.const 104
      i32.add
      global.get $bp
      i32.const 40
      i32.add
      i64.load
      global.get $bp
      i32.const 40
      i32.add
      i64.load
      i64.add
      global.get $bp
      i32.const 96
      i32.add
      i64.load
      global.get $bp
      i32.const 24
      i32.add
      i64.load
      i64.lt_u
      i64.extend_i32_u
      i64.add
      i64.store
      global.get $bp
      i32.const 112
      i32.add
      global.get $bp
      i32.const 32
      i32.add
      i64.load
      global.get $bp
      i32.const 32
      i32.add
      i64.load
      i64.add
      global.get $bp
      i32.const 104
      i32.add
      i64.load
      global.get $bp
      i32.const 40
      i32.add
      i64.load
      i64.lt_u
      i64.extend_i32_u
      i64.add
      i64.store
      global.get $bp
      i32.const 120
      i32.add
      global.get $bp
      i32.const 96
      i32.add
      i64.load
      global.get $bp
      i32.const 144
      i32.add
      i32.load
      i64.load
      i64.sub
      i64.store
      global.get $bp
      i32.const 128
      i32.add
      global.get $bp
      i32.const 104
      i32.add
      i64.load
      global.get $bp
      i32.const 144
      i32.add
      i32.load
      i32.const 8
      i32.add
      i64.load
      i64.sub
      global.get $bp
      i32.const 120
      i32.add
      i64.load
      global.get $bp
      i32.const 96
      i32.add
      i64.load
      i64.gt_u
      i64.extend_i32_u
      i64.sub
      i64.store
      global.get $bp
      i32.const 136
      i32.add
      global.get $bp
      i32.const 112
      i32.add
      i64.load
      global.get $bp
      i32.const 128
      i32.add
      i64.load
      global.get $bp
      i32.const 104
      i32.add
      i64.load
      i64.gt_u
      i64.extend_i32_u
      i64.sub
      i64.store
      global.get $bp
      i32.const 156
      i32.add
      i32.load
      global.get $bp
      i32.const 128
      i32.add
      i64.load
      global.get $bp
      i32.const 136
      i32.add
      i64.load
      global.get $bp
      i32.const 148
      i32.add
      i32.load
      i32.const 64
      i32.sub
      call $_ryu_shiftright128
      i64.store
    )
  )
  global.get $bp
  i32.const 40
  i32.add
  i64.load
  global.get $bp
  i32.const 32
  i32.add
  i64.load
  global.get $bp
  i32.const 148
  i32.add
  i32.load
  i32.const 64
  i32.sub
  i32.const 1
  i32.sub
  call $_ryu_shiftright128
  global.get $sp
  i32.const 168
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_decimalLength9 (param i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 8
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  local.get 0
  i32.store
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 1000000000
  i32.lt_u
  call $assert
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 100000000
  i32.ge_u
  (if 
    (then 
      i32.const 9
      global.get $sp
      i32.const 8
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 10000000
  i32.ge_u
  (if 
    (then 
      i32.const 8
      global.get $sp
      i32.const 8
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 1000000
  i32.ge_u
  (if 
    (then 
      i32.const 7
      global.get $sp
      i32.const 8
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 100000
  i32.ge_u
  (if 
    (then 
      i32.const 6
      global.get $sp
      i32.const 8
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 10000
  i32.ge_u
  (if 
    (then 
      i32.const 5
      global.get $sp
      i32.const 8
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 1000
  i32.ge_u
  (if 
    (then 
      i32.const 4
      global.get $sp
      i32.const 8
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 100
  i32.ge_u
  (if 
    (then 
      i32.const 3
      global.get $sp
      i32.const 8
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 10
  i32.ge_u
  (if 
    (then 
      i32.const 2
      global.get $sp
      i32.const 8
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  i32.const 1
  global.get $sp
  i32.const 8
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_log2pow5 (param i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 8
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  local.get 0
  i32.store
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 0
  i32.ge_s
  call $assert
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 3528
  i32.le_s
  call $assert
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 1217359
  i32.mul
  i32.const 19
  i32.shr_u
  global.get $sp
  i32.const 8
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_pow5bits (param i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 8
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  local.get 0
  i32.store
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 0
  i32.ge_s
  call $assert
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 3528
  i32.le_s
  call $assert
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 1217359
  i32.mul
  i32.const 19
  i32.shr_u
  i32.const 1
  i32.add
  global.get $sp
  i32.const 8
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_ceil__ryu_log2pow5 (param i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 8
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  local.get 0
  i32.store
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  call $_ryu_log2pow5
  i32.const 1
  i32.add
  global.get $sp
  i32.const 8
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_log10Pow2 (param i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 8
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  local.get 0
  i32.store
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 0
  i32.ge_s
  call $assert
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 1650
  i32.le_s
  call $assert
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 78913
  i32.mul
  i32.const 18
  i32.shr_u
  global.get $sp
  i32.const 8
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_log10Pow5 (param i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 8
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  local.get 0
  i32.store
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 0
  i32.ge_s
  call $assert
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 2620
  i32.le_s
  call $assert
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 732923
  i32.mul
  i32.const 20
  i32.shr_u
  global.get $sp
  i32.const 8
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_copy_special_str (param i32) (param i32) (param i32) (param i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 40
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  local.get 0
  i32.store
  global.get $bp
  i32.const 32
  i32.add
  local.get 1
  i32.store8
  global.get $bp
  i32.const 33
  i32.add
  local.get 2
  i32.store8
  global.get $bp
  i32.const 34
  i32.add
  local.get 3
  i32.store8
  global.get $bp
  i32.const 34
  i32.add
  i32.load8_u
  (if 
    (then 
      global.get $bp
      i32.const 8
      i32.add
      i32.const 14
      i32.const 3
      call $::store::3
      global.get $bp
      i32.const 4
      i32.add
      i32.load
      global.get $bp
      i32.const 8
      i32.add
      i32.load
      global.get $bp
      i32.const 8
      i32.add
      i32.const 4
      i32.add
      i32.load
      call $_ryu_memcpy
      global.get $bp
      i32.const 8
      i32.add
      i32.const 4
      i32.add
      i32.load
      global.get $sp
      i32.const 40
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 32
  i32.add
  i32.load8_u
  (if 
    (then 
      global.get $bp
      i32.const 4
      i32.add
      i32.load
      i32.const 10
      i32.const 1
      call $::struct::String::pointer
      i32.load8_u
      i32.store8
    )
    (else 
    )
  )
  global.get $bp
  i32.const 33
  i32.add
  i32.load8_u
  (if 
    (then 
      global.get $bp
      i32.const 16
      i32.add
      i32.const 17
      i32.const 8
      call $::store::3
      global.get $bp
      i32.const 4
      i32.add
      i32.load
      global.get $bp
      i32.const 32
      i32.add
      i32.load8_u
      call $_ryu_offset_ptr_forward
      global.get $bp
      i32.const 16
      i32.add
      i32.load
      global.get $bp
      i32.const 16
      i32.add
      i32.const 4
      i32.add
      i32.load
      call $_ryu_memcpy
      global.get $bp
      i32.const 32
      i32.add
      i32.load8_u
      global.get $bp
      i32.const 16
      i32.add
      i32.const 4
      i32.add
      i32.load
      i32.add
      global.get $sp
      i32.const 40
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 24
  i32.add
  i32.const 25
  i32.const 3
  call $::store::3
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  global.get $bp
  i32.const 32
  i32.add
  i32.load8_u
  call $_ryu_offset_ptr_forward
  global.get $bp
  i32.const 24
  i32.add
  i32.load
  global.get $bp
  i32.const 24
  i32.add
  i32.const 4
  i32.add
  i32.load
  call $_ryu_memcpy
  global.get $bp
  i32.const 32
  i32.add
  i32.load8_u
  global.get $bp
  i32.const 24
  i32.add
  i32.const 4
  i32.add
  i32.load
  i32.add
  global.get $sp
  i32.const 40
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_offset_ptr_forward (param i32) (param i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 16
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  local.get 0
  i32.store
  global.get $bp
  i32.const 8
  i32.add
  local.get 1
  i32.store
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  global.get $bp
  i32.const 8
  i32.add
  i32.load
  i32.add
  global.get $sp
  i32.const 16
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_memcpy (param i32) (param i32) (param i32) 
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 24
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  local.get 0
  i32.store
  global.get $bp
  i32.const 8
  i32.add
  local.get 1
  i32.store
  global.get $bp
  i32.const 12
  i32.add
  local.get 2
  i32.store
  global.get $bp
  i32.const 16
  i32.add
  i32.const 0
  i32.store
  global.get $bp
  i32.const 20
  i32.add
  global.get $bp
  i32.const 12
  i32.add
  i32.load
  i32.store
  block $b_0
    loop $l_0
      block $bi_0
        global.get $bp
        i32.const 16
        i32.add
        i32.load
        global.get $bp
        i32.const 20
        i32.add
        i32.load
        i32.ge_u
        (if 
          (then 
            br $b_0
          )
        )
        global.get $bp
        i32.const 4
        i32.add
        i32.load
        global.get $bp
        i32.const 16
        i32.add
        i32.load
        i32.add
        global.get $bp
        i32.const 8
        i32.add
        i32.load
        global.get $bp
        i32.const 16
        i32.add
        i32.load
        i32.add
        i32.load8_u
        i32.store8
      end
      global.get $bp
      i32.const 16
      i32.add
      global.get $bp
      i32.const 16
      i32.add
      i32.load
      i32.const 1
      i32.add
      i32.store
      br $l_0
    end
  end
  global.get $sp
  i32.const 24
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
)
(func $_ryu_f2d (param i32) (param i32) (result i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 112
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  local.get 0
  i32.store
  global.get $bp
  i32.const 8
  i32.add
  local.get 1
  i32.store
  global.get $bp
  i32.const 12
  i32.add
  i32.const 0
  i32.store
  global.get $bp
  i32.const 16
  i32.add
  i32.const 0
  i32.store
  global.get $bp
  i32.const 8
  i32.add
  i32.load
  i32.const 0
  i32.eq
  (if 
    (then 
      global.get $bp
      i32.const 12
      i32.add
      i32.const -151
      i32.store
      global.get $bp
      i32.const 16
      i32.add
      global.get $bp
      i32.const 4
      i32.add
      i32.load
      i32.store
    )
    (else 
      global.get $bp
      i32.const 12
      i32.add
      global.get $bp
      i32.const 8
      i32.add
      i32.load
      i32.const 127
      i32.sub
      i32.const 23
      i32.sub
      i32.const 2
      i32.sub
      i32.store
      global.get $bp
      i32.const 16
      i32.add
      i32.const 8388608
      global.get $bp
      i32.const 4
      i32.add
      i32.load
      i32.or
      i32.store
    )
  )
  global.get $bp
  i32.const 104
  i32.add
  global.get $bp
  i32.const 16
  i32.add
  i32.load
  i32.const 1
  i32.and
  i32.const 0
  i32.eq
  i32.store8
  global.get $bp
  i32.const 105
  i32.add
  global.get $bp
  i32.const 104
  i32.add
  i32.load8_u
  i32.store8
  global.get $bp
  i32.const 20
  i32.add
  i32.const 4
  global.get $bp
  i32.const 16
  i32.add
  i32.load
  i32.mul
  i32.store
  global.get $bp
  i32.const 24
  i32.add
  i32.const 4
  global.get $bp
  i32.const 16
  i32.add
  i32.load
  i32.mul
  i32.const 2
  i32.add
  i32.store
  global.get $bp
  i32.const 28
  i32.add
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 0
  i32.ne
  (if (result i32)
    (then 
      i32.const 1
    )
    (else 
      global.get $bp
      i32.const 8
      i32.add
      i32.load
      i32.const 1
      i32.le_u
    )
  )
  i32.store
  global.get $bp
  i32.const 32
  i32.add
  i32.const 4
  global.get $bp
  i32.const 16
  i32.add
  i32.load
  i32.mul
  i32.const 1
  i32.sub
  global.get $bp
  i32.const 28
  i32.add
  i32.load
  i32.sub
  i32.store
  global.get $bp
  i32.const 36
  i32.add
  i32.const 0
  i32.store
  global.get $bp
  i32.const 40
  i32.add
  i32.const 0
  i32.store
  global.get $bp
  i32.const 44
  i32.add
  i32.const 0
  i32.store
  global.get $bp
  i32.const 48
  i32.add
  i32.const 0
  i32.store
  global.get $bp
  i32.const 106
  i32.add
  i32.const 0
  i32.store8
  global.get $bp
  i32.const 107
  i32.add
  i32.const 0
  i32.store8
  global.get $bp
  i32.const 108
  i32.add
  i32.const 0
  i32.store8
  global.get $bp
  i32.const 12
  i32.add
  i32.load
  i32.const 0
  i32.ge_s
  (if 
    (then 
      global.get $bp
      i32.const 52
      i32.add
      global.get $bp
      i32.const 12
      i32.add
      i32.load
      call $_ryu_log10Pow2
      i32.store
      global.get $bp
      i32.const 48
      i32.add
      global.get $bp
      i32.const 52
      i32.add
      i32.load
      i32.store
      global.get $bp
      i32.const 56
      i32.add
      i32.const 59
      global.get $bp
      i32.const 52
      i32.add
      i32.load
      call $_ryu_pow5bits
      i32.add
      i32.const 1
      i32.sub
      i32.store
      global.get $bp
      i32.const 60
      i32.add
      global.get $bp
      i32.const 12
      i32.add
      i32.load
      i32.const 4294967295
      i32.xor
      i32.const 1
      i32.add
      global.get $bp
      i32.const 52
      i32.add
      i32.load
      i32.add
      global.get $bp
      i32.const 56
      i32.add
      i32.load
      i32.add
      i32.store
      global.get $bp
      i32.const 36
      i32.add
      global.get $bp
      i32.const 20
      i32.add
      i32.load
      global.get $bp
      i32.const 52
      i32.add
      i32.load
      global.get $bp
      i32.const 60
      i32.add
      i32.load
      call $mulPow5InvDivPow2
      i32.store
      global.get $bp
      i32.const 40
      i32.add
      global.get $bp
      i32.const 24
      i32.add
      i32.load
      global.get $bp
      i32.const 52
      i32.add
      i32.load
      global.get $bp
      i32.const 60
      i32.add
      i32.load
      call $mulPow5InvDivPow2
      i32.store
      global.get $bp
      i32.const 44
      i32.add
      global.get $bp
      i32.const 32
      i32.add
      i32.load
      global.get $bp
      i32.const 52
      i32.add
      i32.load
      global.get $bp
      i32.const 60
      i32.add
      i32.load
      call $mulPow5InvDivPow2
      i32.store
      global.get $bp
      i32.const 52
      i32.add
      i32.load
      i32.const 0
      i32.ne
      (if (result i32)
        (then 
          global.get $bp
          i32.const 40
          i32.add
          i32.load
          i32.const 1
          i32.sub
          i32.const 10
          i32.div_u
          global.get $bp
          i32.const 44
          i32.add
          i32.load
          i32.const 10
          i32.div_u
          i32.le_u
        )
        (else 
          i32.const 0
        )
      )
      (if 
        (then 
          global.get $bp
          i32.const 64
          i32.add
          i32.const 59
          global.get $bp
          i32.const 52
          i32.add
          i32.load
          i32.const 1
          i32.sub
          call $_ryu_pow5bits
          i32.add
          i32.const 1
          i32.sub
          i32.store
          global.get $bp
          i32.const 108
          i32.add
          global.get $bp
          i32.const 20
          i32.add
          i32.load
          global.get $bp
          i32.const 52
          i32.add
          i32.load
          i32.const 1
          i32.sub
          global.get $bp
          i32.const 12
          i32.add
          i32.load
          i32.const 4294967295
          i32.xor
          i32.const 1
          i32.add
          global.get $bp
          i32.const 52
          i32.add
          i32.load
          i32.add
          i32.const 1
          i32.sub
          global.get $bp
          i32.const 64
          i32.add
          i32.load
          i32.add
          call $mulPow5InvDivPow2
          i32.const 10
          i32.rem_u
          i32.store8
        )
        (else 
        )
      )
      global.get $bp
      i32.const 52
      i32.add
      i32.load
      i32.const 9
      i32.le_u
      (if 
        (then 
          global.get $bp
          i32.const 20
          i32.add
          i32.load
          i32.const 5
          i32.rem_u
          i32.const 0
          i32.eq
          (if 
            (then 
              global.get $bp
              i32.const 107
              i32.add
              global.get $bp
              i32.const 20
              i32.add
              i32.load
              global.get $bp
              i32.const 52
              i32.add
              i32.load
              call $multipleOfPowerOf5_32
              i32.store8
            )
            (else 
              global.get $bp
              i32.const 105
              i32.add
              i32.load8_u
              (if 
                (then 
                  global.get $bp
                  i32.const 106
                  i32.add
                  global.get $bp
                  i32.const 32
                  i32.add
                  i32.load
                  global.get $bp
                  i32.const 52
                  i32.add
                  i32.load
                  call $multipleOfPowerOf5_32
                  i32.store8
                )
                (else 
                  global.get $bp
                  i32.const 40
                  i32.add
                  global.get $bp
                  i32.const 40
                  i32.add
                  i32.load
                  global.get $bp
                  i32.const 24
                  i32.add
                  i32.load
                  global.get $bp
                  i32.const 52
                  i32.add
                  i32.load
                  call $multipleOfPowerOf5_32
                  i32.sub
                  i32.store
                )
              )
            )
          )
        )
        (else 
        )
      )
    )
    (else 
      global.get $bp
      i32.const 68
      i32.add
      global.get $bp
      i32.const 12
      i32.add
      i32.load
      i32.const 4294967295
      i32.xor
      i32.const 1
      i32.add
      call $_ryu_log10Pow5
      i32.store
      global.get $bp
      i32.const 48
      i32.add
      global.get $bp
      i32.const 68
      i32.add
      i32.load
      global.get $bp
      i32.const 12
      i32.add
      i32.load
      i32.add
      i32.store
      global.get $bp
      i32.const 72
      i32.add
      global.get $bp
      i32.const 12
      i32.add
      i32.load
      i32.const 4294967295
      i32.xor
      i32.const 1
      i32.add
      global.get $bp
      i32.const 68
      i32.add
      i32.load
      i32.sub
      i32.store
      global.get $bp
      i32.const 76
      i32.add
      global.get $bp
      i32.const 72
      i32.add
      i32.load
      call $_ryu_pow5bits
      i32.const 61
      i32.sub
      i32.store
      global.get $bp
      i32.const 80
      i32.add
      global.get $bp
      i32.const 68
      i32.add
      i32.load
      global.get $bp
      i32.const 76
      i32.add
      i32.load
      i32.sub
      i32.store
      global.get $bp
      i32.const 36
      i32.add
      global.get $bp
      i32.const 20
      i32.add
      i32.load
      global.get $bp
      i32.const 72
      i32.add
      i32.load
      global.get $bp
      i32.const 80
      i32.add
      i32.load
      call $mulPow5divPow2
      i32.store
      global.get $bp
      i32.const 40
      i32.add
      global.get $bp
      i32.const 24
      i32.add
      i32.load
      global.get $bp
      i32.const 72
      i32.add
      i32.load
      global.get $bp
      i32.const 80
      i32.add
      i32.load
      call $mulPow5divPow2
      i32.store
      global.get $bp
      i32.const 44
      i32.add
      global.get $bp
      i32.const 32
      i32.add
      i32.load
      global.get $bp
      i32.const 72
      i32.add
      i32.load
      global.get $bp
      i32.const 80
      i32.add
      i32.load
      call $mulPow5divPow2
      i32.store
      global.get $bp
      i32.const 68
      i32.add
      i32.load
      i32.const 0
      i32.ne
      (if (result i32)
        (then 
          global.get $bp
          i32.const 40
          i32.add
          i32.load
          i32.const 1
          i32.sub
          i32.const 10
          i32.div_u
          global.get $bp
          i32.const 44
          i32.add
          i32.load
          i32.const 10
          i32.div_u
          i32.le_u
        )
        (else 
          i32.const 0
        )
      )
      (if 
        (then 
          global.get $bp
          i32.const 80
          i32.add
          global.get $bp
          i32.const 68
          i32.add
          i32.load
          i32.const 1
          i32.sub
          global.get $bp
          i32.const 72
          i32.add
          i32.load
          i32.const 1
          i32.add
          call $_ryu_pow5bits
          i32.const 61
          i32.sub
          i32.sub
          i32.store
          global.get $bp
          i32.const 108
          i32.add
          global.get $bp
          i32.const 20
          i32.add
          i32.load
          global.get $bp
          i32.const 72
          i32.add
          i32.load
          i32.const 1
          i32.add
          global.get $bp
          i32.const 80
          i32.add
          i32.load
          call $mulPow5divPow2
          i32.const 10
          i32.rem_u
          i32.store8
        )
        (else 
        )
      )
      global.get $bp
      i32.const 68
      i32.add
      i32.load
      i32.const 1
      i32.le_u
      (if 
        (then 
          global.get $bp
          i32.const 107
          i32.add
          i32.const 1
          i32.store8
          global.get $bp
          i32.const 105
          i32.add
          i32.load8_u
          (if 
            (then 
              global.get $bp
              i32.const 106
              i32.add
              global.get $bp
              i32.const 28
              i32.add
              i32.load
              i32.const 1
              i32.eq
              i32.store8
            )
            (else 
              global.get $bp
              i32.const 40
              i32.add
              global.get $bp
              i32.const 40
              i32.add
              i32.load
              i32.const 1
              i32.sub
              i32.store
            )
          )
        )
        (else 
          global.get $bp
          i32.const 68
          i32.add
          i32.load
          i32.const 31
          i32.lt_u
          (if 
            (then 
              global.get $bp
              i32.const 107
              i32.add
              global.get $bp
              i32.const 20
              i32.add
              i32.load
              global.get $bp
              i32.const 68
              i32.add
              i32.load
              i32.const 1
              i32.sub
              call $multipleOfPowerOf2_32
              i32.store8
            )
            (else 
            )
          )
        )
      )
    )
  )
  global.get $bp
  i32.const 84
  i32.add
  i32.const 0
  i32.store
  global.get $bp
  i32.const 88
  i32.add
  i32.const 0
  i32.store
  global.get $bp
  i32.const 106
  i32.add
  i32.load8_u
  (if (result i32)
    (then 
      i32.const 1
    )
    (else 
      global.get $bp
      i32.const 107
      i32.add
      i32.load8_u
    )
  )
  (if 
    (then 
      block $b_0
        loop $l_0
          block $bi_0
            global.get $bp
            i32.const 40
            i32.add
            i32.load
            i32.const 10
            i32.div_u
            global.get $bp
            i32.const 44
            i32.add
            i32.load
            i32.const 10
            i32.div_u
            i32.gt_u
            i32.eqz
            (if 
              (then 
                br $b_0
              )
              (else 
              )
            )
            global.get $bp
            i32.const 106
            i32.add
            global.get $bp
            i32.const 106
            i32.add
            i32.load8_u
            global.get $bp
            i32.const 44
            i32.add
            i32.load
            i32.const 10
            i32.rem_u
            i32.const 0
            i32.eq
            i32.and
            i32.store8
            global.get $bp
            i32.const 107
            i32.add
            global.get $bp
            i32.const 107
            i32.add
            i32.load8_u
            global.get $bp
            i32.const 108
            i32.add
            i32.load8_u
            i32.const 0
            i32.eq
            i32.and
            i32.store8
            global.get $bp
            i32.const 108
            i32.add
            global.get $bp
            i32.const 36
            i32.add
            i32.load
            i32.const 10
            i32.rem_u
            i32.store8
            global.get $bp
            i32.const 36
            i32.add
            global.get $bp
            i32.const 36
            i32.add
            i32.load
            i32.const 10
            i32.div_u
            i32.store
            global.get $bp
            i32.const 40
            i32.add
            global.get $bp
            i32.const 40
            i32.add
            i32.load
            i32.const 10
            i32.div_u
            i32.store
            global.get $bp
            i32.const 44
            i32.add
            global.get $bp
            i32.const 44
            i32.add
            i32.load
            i32.const 10
            i32.div_u
            i32.store
            global.get $bp
            i32.const 84
            i32.add
            global.get $bp
            i32.const 84
            i32.add
            i32.load
            i32.const 1
            i32.add
            i32.store
          end
          br $l_0
        end
      end
      global.get $bp
      i32.const 106
      i32.add
      i32.load8_u
      (if 
        (then 
          block $b_0
            loop $l_0
              block $bi_0
                global.get $bp
                i32.const 44
                i32.add
                i32.load
                i32.const 10
                i32.rem_u
                i32.const 0
                i32.ne
                (if 
                  (then 
                    br $b_0
                  )
                  (else 
                  )
                )
                global.get $bp
                i32.const 107
                i32.add
                global.get $bp
                i32.const 107
                i32.add
                i32.load8_u
                global.get $bp
                i32.const 108
                i32.add
                i32.load8_u
                i32.const 0
                i32.eq
                i32.and
                i32.store8
                global.get $bp
                i32.const 108
                i32.add
                global.get $bp
                i32.const 36
                i32.add
                i32.load
                i32.const 10
                i32.rem_u
                i32.store8
                global.get $bp
                i32.const 36
                i32.add
                global.get $bp
                i32.const 36
                i32.add
                i32.load
                i32.const 10
                i32.div_u
                i32.store
                global.get $bp
                i32.const 40
                i32.add
                global.get $bp
                i32.const 40
                i32.add
                i32.load
                i32.const 10
                i32.div_u
                i32.store
                global.get $bp
                i32.const 44
                i32.add
                global.get $bp
                i32.const 44
                i32.add
                i32.load
                i32.const 10
                i32.div_u
                i32.store
                global.get $bp
                i32.const 84
                i32.add
                global.get $bp
                i32.const 84
                i32.add
                i32.load
                i32.const 1
                i32.add
                i32.store
              end
              br $l_0
            end
          end
        )
        (else 
        )
      )
      global.get $bp
      i32.const 107
      i32.add
      i32.load8_u
      (if (result i32)
        (then 
          global.get $bp
          i32.const 108
          i32.add
          i32.load8_u
          i32.const 5
          i32.eq
        )
        (else 
          i32.const 0
        )
      )
      (if (result i32)
        (then 
          global.get $bp
          i32.const 36
          i32.add
          i32.load
          i32.const 2
          i32.rem_u
          i32.const 0
          i32.eq
        )
        (else 
          i32.const 0
        )
      )
      (if 
        (then 
          global.get $bp
          i32.const 108
          i32.add
          i32.const 4
          i32.store8
        )
        (else 
        )
      )
      global.get $bp
      i32.const 88
      i32.add
      global.get $bp
      i32.const 36
      i32.add
      i32.load
      global.get $bp
      i32.const 36
      i32.add
      i32.load
      global.get $bp
      i32.const 44
      i32.add
      i32.load
      i32.eq
      (if (result i32)
        (then 
          global.get $bp
          i32.const 105
          i32.add
          i32.load8_u
          i32.eqz
          (if (result i32)
            (then 
              i32.const 1
            )
            (else 
              global.get $bp
              i32.const 106
              i32.add
              i32.load8_u
              i32.eqz
            )
          )
        )
        (else 
          i32.const 0
        )
      )
      (if (result i32)
        (then 
          i32.const 1
        )
        (else 
          global.get $bp
          i32.const 108
          i32.add
          i32.load8_u
          i32.const 5
          i32.ge_u
        )
      )
      i32.add
      i32.store
    )
    (else 
      block $b_0
        loop $l_0
          block $bi_0
            global.get $bp
            i32.const 40
            i32.add
            i32.load
            i32.const 10
            i32.div_u
            global.get $bp
            i32.const 44
            i32.add
            i32.load
            i32.const 10
            i32.div_u
            i32.gt_u
            i32.eqz
            (if 
              (then 
                br $b_0
              )
              (else 
              )
            )
            global.get $bp
            i32.const 108
            i32.add
            global.get $bp
            i32.const 36
            i32.add
            i32.load
            i32.const 10
            i32.rem_u
            i32.store8
            global.get $bp
            i32.const 36
            i32.add
            global.get $bp
            i32.const 36
            i32.add
            i32.load
            i32.const 10
            i32.div_u
            i32.store
            global.get $bp
            i32.const 40
            i32.add
            global.get $bp
            i32.const 40
            i32.add
            i32.load
            i32.const 10
            i32.div_u
            i32.store
            global.get $bp
            i32.const 44
            i32.add
            global.get $bp
            i32.const 44
            i32.add
            i32.load
            i32.const 10
            i32.div_u
            i32.store
            global.get $bp
            i32.const 84
            i32.add
            global.get $bp
            i32.const 84
            i32.add
            i32.load
            i32.const 1
            i32.add
            i32.store
          end
          br $l_0
        end
      end
      global.get $bp
      i32.const 88
      i32.add
      global.get $bp
      i32.const 36
      i32.add
      i32.load
      global.get $bp
      i32.const 36
      i32.add
      i32.load
      global.get $bp
      i32.const 44
      i32.add
      i32.load
      i32.eq
      (if (result i32)
        (then 
          i32.const 1
        )
        (else 
          global.get $bp
          i32.const 108
          i32.add
          i32.load8_u
          i32.const 5
          i32.ge_u
        )
      )
      i32.add
      i32.store
    )
  )
  global.get $bp
  i32.const 92
  i32.add
  global.get $bp
  i32.const 48
  i32.add
  i32.load
  global.get $bp
  i32.const 84
  i32.add
  i32.load
  i32.add
  i32.store
  global.get $bp
  i32.const 96
  i32.add
  global.get $bp
  i32.const 92
  i32.add
  i32.load
  i32.store
  global.get $bp
  i32.const 100
  i32.add
  global.get $bp
  i32.const 88
  i32.add
  i32.load
  i32.store
  global.get $bp
  i32.const 100
  i32.add
  i32.load
  global.get $bp
  i32.const 96
  i32.add
  i32.load
  global.get $sp
  i32.const 112
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_f2s_to_chars (param i32) (param i32) (param i32) (param i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 64
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  global.set $mem_address
  global.get $mem_address
  local.get 0
  i32.store
  global.get $mem_address
  i32.const 4
  i32.add
  local.get 1
  i32.store
  global.get $bp
  i32.const 56
  i32.add
  local.get 2
  i32.store8
  global.get $bp
  i32.const 12
  i32.add
  local.get 3
  i32.store
  global.get $bp
  i32.const 16
  i32.add
  i32.const 0
  i32.store
  global.get $bp
  i32.const 56
  i32.add
  i32.load8_u
  (if 
    (then 
      global.get $bp
      i32.const 12
      i32.add
      i32.load
      global.get $bp
      i32.const 16
      i32.add
      i32.load
      call $_ryu_offset_ptr_forward
      i32.const 10
      i32.const 1
      call $::struct::String::pointer
      i32.load8_u
      i32.store8
      global.get $bp
      i32.const 16
      i32.add
      global.get $bp
      i32.const 16
      i32.add
      i32.load
      i32.const 1
      i32.add
      i32.store
    )
    (else 
    )
  )
  global.get $bp
  i32.const 20
  i32.add
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.store
  global.get $bp
  i32.const 24
  i32.add
  global.get $bp
  i32.const 20
  i32.add
  i32.load
  call $_ryu_decimalLength9
  i32.store
  global.get $bp
  i32.const 28
  i32.add
  i32.const 0
  i32.store
  block $b_0
    loop $l_0
      block $bi_0
        global.get $bp
        i32.const 20
        i32.add
        i32.load
        i32.const 10000
        i32.lt_u
        (if 
          (then 
            br $b_0
          )
          (else 
          )
        )
        global.get $bp
        i32.const 32
        i32.add
        global.get $bp
        i32.const 20
        i32.add
        i32.load
        i32.const 10000
        i32.rem_u
        i32.store
        global.get $bp
        i32.const 20
        i32.add
        global.get $bp
        i32.const 20
        i32.add
        i32.load
        i32.const 10000
        i32.div_u
        i32.store
        global.get $bp
        i32.const 36
        i32.add
        global.get $bp
        i32.const 32
        i32.add
        i32.load
        i32.const 100
        i32.rem_u
        i32.const 1
        i32.shl
        i32.store
        global.get $bp
        i32.const 40
        i32.add
        global.get $bp
        i32.const 32
        i32.add
        i32.load
        i32.const 100
        i32.div_u
        i32.const 1
        i32.shl
        i32.store
        global.get $bp
        i32.const 12
        i32.add
        i32.load
        global.get $bp
        i32.const 16
        i32.add
        i32.load
        global.get $bp
        i32.const 24
        i32.add
        i32.load
        i32.add
        global.get $bp
        i32.const 28
        i32.add
        i32.load
        i32.sub
        i32.const 1
        i32.sub
        call $_ryu_offset_ptr_forward
        i32.const 11536
        global.get $bp
        i32.const 36
        i32.add
        i32.load
        i32.add
        i32.const 2
        call $_ryu_memcpy
        global.get $bp
        i32.const 12
        i32.add
        i32.load
        global.get $bp
        i32.const 16
        i32.add
        i32.load
        global.get $bp
        i32.const 24
        i32.add
        i32.load
        i32.add
        global.get $bp
        i32.const 28
        i32.add
        i32.load
        i32.sub
        i32.const 3
        i32.sub
        call $_ryu_offset_ptr_forward
        i32.const 11536
        global.get $bp
        i32.const 40
        i32.add
        i32.load
        i32.add
        i32.const 2
        call $_ryu_memcpy
        global.get $bp
        i32.const 28
        i32.add
        global.get $bp
        i32.const 28
        i32.add
        i32.load
        i32.const 4
        i32.add
        i32.store
      end
      br $l_0
    end
  end
  global.get $bp
  i32.const 20
  i32.add
  i32.load
  i32.const 100
  i32.ge_u
  (if 
    (then 
      global.get $bp
      i32.const 44
      i32.add
      global.get $bp
      i32.const 20
      i32.add
      i32.load
      i32.const 100
      i32.rem_u
      i32.const 1
      i32.shl
      i32.store
      global.get $bp
      i32.const 20
      i32.add
      global.get $bp
      i32.const 20
      i32.add
      i32.load
      i32.const 100
      i32.div_u
      i32.store
      global.get $bp
      i32.const 12
      i32.add
      i32.load
      global.get $bp
      i32.const 16
      i32.add
      i32.load
      global.get $bp
      i32.const 24
      i32.add
      i32.load
      i32.add
      global.get $bp
      i32.const 28
      i32.add
      i32.load
      i32.sub
      i32.const 1
      i32.sub
      call $_ryu_offset_ptr_forward
      i32.const 11536
      global.get $bp
      i32.const 44
      i32.add
      i32.load
      i32.add
      i32.const 2
      call $_ryu_memcpy
      global.get $bp
      i32.const 28
      i32.add
      global.get $bp
      i32.const 28
      i32.add
      i32.load
      i32.const 2
      i32.add
      i32.store
    )
    (else 
    )
  )
  global.get $bp
  i32.const 20
  i32.add
  i32.load
  i32.const 10
  i32.ge_u
  (if 
    (then 
      global.get $bp
      i32.const 48
      i32.add
      global.get $bp
      i32.const 20
      i32.add
      i32.load
      i32.const 1
      i32.shl
      i32.store
      global.get $bp
      i32.const 12
      i32.add
      i32.load
      global.get $bp
      i32.const 16
      i32.add
      i32.load
      global.get $bp
      i32.const 24
      i32.add
      i32.load
      i32.add
      global.get $bp
      i32.const 28
      i32.add
      i32.load
      i32.sub
      call $_ryu_offset_ptr_forward
      i32.const 11536
      global.get $bp
      i32.const 48
      i32.add
      i32.load
      i32.const 1
      i32.add
      i32.add
      i32.load8_u
      i32.store8
      global.get $bp
      i32.const 12
      i32.add
      i32.load
      global.get $bp
      i32.const 16
      i32.add
      i32.load
      call $_ryu_offset_ptr_forward
      i32.const 11536
      global.get $bp
      i32.const 48
      i32.add
      i32.load
      i32.add
      i32.load8_u
      i32.store8
    )
    (else 
      global.get $bp
      i32.const 12
      i32.add
      i32.load
      global.get $bp
      i32.const 16
      i32.add
      i32.load
      call $_ryu_offset_ptr_forward
      i32.const 11
      i32.const 1
      call $::struct::String::pointer
      i32.load8_u
      global.get $bp
      i32.const 20
      i32.add
      i32.load
      i32.add
      i32.store8
    )
  )
  global.get $bp
  i32.const 24
  i32.add
  i32.load
  i32.const 1
  i32.gt_u
  (if 
    (then 
      global.get $bp
      i32.const 12
      i32.add
      i32.load
      global.get $bp
      i32.const 16
      i32.add
      i32.load
      i32.const 1
      i32.add
      call $_ryu_offset_ptr_forward
      i32.const 12
      i32.const 1
      call $::struct::String::pointer
      i32.load8_u
      i32.store8
      global.get $bp
      i32.const 16
      i32.add
      global.get $bp
      i32.const 16
      i32.add
      i32.load
      global.get $bp
      i32.const 24
      i32.add
      i32.load
      i32.add
      i32.const 1
      i32.add
      i32.store
    )
    (else 
      global.get $bp
      i32.const 16
      i32.add
      global.get $bp
      i32.const 16
      i32.add
      i32.load
      i32.const 1
      i32.add
      i32.store
    )
  )
  global.get $bp
  i32.const 12
  i32.add
  i32.load
  global.get $bp
  i32.const 16
  i32.add
  i32.load
  call $_ryu_offset_ptr_forward
  i32.const 13
  i32.const 1
  call $::struct::String::pointer
  i32.load8_u
  i32.store8
  global.get $bp
  i32.const 16
  i32.add
  global.get $bp
  i32.const 16
  i32.add
  i32.load
  i32.const 1
  i32.add
  i32.store
  global.get $bp
  i32.const 52
  i32.add
  global.get $bp
  i32.const 4
  i32.add
  i32.const 4
  i32.add
  i32.load
  global.get $bp
  i32.const 24
  i32.add
  i32.load
  i32.add
  i32.const 1
  i32.sub
  i32.store
  global.get $bp
  i32.const 52
  i32.add
  i32.load
  i32.const 0
  i32.lt_s
  (if 
    (then 
      global.get $bp
      i32.const 12
      i32.add
      i32.load
      global.get $bp
      i32.const 16
      i32.add
      i32.load
      call $_ryu_offset_ptr_forward
      i32.const 10
      i32.const 1
      call $::struct::String::pointer
      i32.load8_u
      i32.store8
      global.get $bp
      i32.const 16
      i32.add
      global.get $bp
      i32.const 16
      i32.add
      i32.load
      i32.const 1
      i32.add
      i32.store
      global.get $bp
      i32.const 52
      i32.add
      global.get $bp
      i32.const 52
      i32.add
      i32.load
      i32.const 4294967295
      i32.xor
      i32.const 1
      i32.add
      i32.store
    )
    (else 
    )
  )
  global.get $bp
  i32.const 52
  i32.add
  i32.load
  i32.const 10
  i32.ge_s
  (if 
    (then 
      global.get $bp
      i32.const 12
      i32.add
      i32.load
      global.get $bp
      i32.const 16
      i32.add
      i32.load
      call $_ryu_offset_ptr_forward
      i32.const 11536
      i32.const 2
      global.get $bp
      i32.const 52
      i32.add
      i32.load
      i32.mul
      i32.add
      i32.const 2
      call $_ryu_memcpy
      global.get $bp
      i32.const 16
      i32.add
      global.get $bp
      i32.const 16
      i32.add
      i32.load
      i32.const 2
      i32.add
      i32.store
    )
    (else 
      global.get $bp
      i32.const 12
      i32.add
      i32.load
      global.get $bp
      i32.const 16
      i32.add
      i32.load
      call $_ryu_offset_ptr_forward
      i32.const 11
      i32.const 1
      call $::struct::String::pointer
      i32.load8_u
      global.get $bp
      i32.const 52
      i32.add
      i32.load
      i32.add
      i32.store8
      global.get $bp
      i32.const 16
      i32.add
      global.get $bp
      i32.const 16
      i32.add
      i32.load
      i32.const 1
      i32.add
      i32.store
    )
  )
  global.get $bp
  i32.const 16
  i32.add
  i32.load
  global.get $sp
  i32.const 64
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $_ryu_f2s_buffered_n (param f32) (param i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 40
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  local.get 0
  f32.store
  global.get $bp
  i32.const 8
  i32.add
  local.get 1
  i32.store
  global.get $bp
  i32.const 12
  i32.add
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.store
  global.get $bp
  i32.const 32
  i32.add
  global.get $bp
  i32.const 12
  i32.add
  i32.load
  i32.const 31
  i32.shr_u
  i32.const 1
  i32.and
  i32.const 0
  i32.ne
  i32.store8
  global.get $bp
  i32.const 16
  i32.add
  global.get $bp
  i32.const 12
  i32.add
  i32.load
  i32.const 8388607
  i32.and
  i32.store
  global.get $bp
  i32.const 20
  i32.add
  global.get $bp
  i32.const 12
  i32.add
  i32.load
  i32.const 23
  i32.shr_u
  i32.const 255
  i32.and
  i32.store
  global.get $bp
  i32.const 20
  i32.add
  i32.load
  i32.const 255
  i32.eq
  (if (result i32)
    (then 
      i32.const 1
    )
    (else 
      global.get $bp
      i32.const 20
      i32.add
      i32.load
      i32.const 0
      i32.eq
      (if (result i32)
        (then 
          global.get $bp
          i32.const 16
          i32.add
          i32.load
          i32.const 0
          i32.eq
        )
        (else 
          i32.const 0
        )
      )
    )
  )
  (if 
    (then 
      global.get $bp
      i32.const 8
      i32.add
      i32.load
      global.get $bp
      i32.const 32
      i32.add
      i32.load8_u
      global.get $bp
      i32.const 20
      i32.add
      i32.load
      i32.const 0
      i32.gt_u
      global.get $bp
      i32.const 16
      i32.add
      i32.load
      i32.const 0
      i32.gt_u
      call $_ryu_copy_special_str
      global.get $sp
      i32.const 40
      i32.sub
      global.set $sp
      global.get $sp
      i32.load
      global.set $bp
      return
    )
    (else 
    )
  )
  global.get $bp
  i32.const 24
  i32.add
  global.get $bp
  i32.const 16
  i32.add
  i32.load
  global.get $bp
  i32.const 20
  i32.add
  i32.load
  call $_ryu_f2d
  call $::store::4
  global.get $bp
  i32.const 24
  i32.add
  global.set $mem_address
  global.get $mem_address
  i32.load
  global.get $mem_address
  i32.const 4
  i32.add
  i32.load
  global.get $bp
  i32.const 32
  i32.add
  i32.load8_u
  global.get $bp
  i32.const 8
  i32.add
  i32.load
  call $_ryu_f2s_to_chars
  global.get $sp
  i32.const 40
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $ryu_f2s_buffered (param f32) (param i32) (result i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 24
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  local.get 0
  f32.store
  global.get $bp
  i32.const 8
  i32.add
  local.get 1
  i32.store
  global.get $bp
  i32.const 12
  i32.add
  global.get $bp
  i32.const 4
  i32.add
  f32.load
  global.get $bp
  i32.const 8
  i32.add
  i32.load
  call $_ryu_f2s_buffered_n
  i32.store
  global.get $bp
  i32.const 16
  i32.add
  global.get $bp
  i32.const 8
  i32.add
  i32.load
  i32.store
  global.get $bp
  i32.const 20
  i32.add
  global.get $bp
  i32.const 12
  i32.add
  i32.load
  i32.store
  global.get $bp
  i32.const 16
  i32.add
  i32.load
  global.get $bp
  i32.const 20
  i32.add
  i32.load
  global.get $sp
  i32.const 24
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $pow5factor_32 (param i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 24
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  local.get 0
  i32.store
  global.get $bp
  i32.const 8
  i32.add
  i32.const 0
  i32.store
  block $b_0
    loop $l_0
      block $bi_0
        global.get $bp
        i32.const 4
        i32.add
        i32.load
        i32.const 0
        i32.ne
        call $assert
        global.get $bp
        i32.const 12
        i32.add
        global.get $bp
        i32.const 4
        i32.add
        i32.load
        i32.const 5
        i32.div_u
        i32.store
        global.get $bp
        i32.const 16
        i32.add
        global.get $bp
        i32.const 4
        i32.add
        i32.load
        i32.const 5
        i32.rem_u
        i32.store
        global.get $bp
        i32.const 16
        i32.add
        i32.load
        i32.const 0
        i32.ne
        (if 
          (then 
            br $b_0
          )
          (else 
          )
        )
        global.get $bp
        i32.const 4
        i32.add
        global.get $bp
        i32.const 12
        i32.add
        i32.load
        i32.store
        global.get $bp
        i32.const 8
        i32.add
        global.get $bp
        i32.const 8
        i32.add
        i32.load
        i32.const 1
        i32.add
        i32.store
      end
      br $l_0
    end
  end
  global.get $bp
  i32.const 8
  i32.add
  i32.load
  global.get $sp
  i32.const 24
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $multipleOfPowerOf5_32 (param i32) (param i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 16
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  local.get 0
  i32.store
  global.get $bp
  i32.const 8
  i32.add
  local.get 1
  i32.store
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  call $pow5factor_32
  global.get $bp
  i32.const 8
  i32.add
  i32.load
  i32.ge_u
  global.get $sp
  i32.const 16
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $multipleOfPowerOf2_32 (param i32) (param i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 16
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  local.get 0
  i32.store
  global.get $bp
  i32.const 8
  i32.add
  local.get 1
  i32.store
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 1
  global.get $bp
  i32.const 8
  i32.add
  i32.load
  i32.shl
  i32.const 1
  i32.sub
  i32.and
  i32.const 0
  i32.eq
  global.get $sp
  i32.const 16
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $mulShift32 (param i32) (param i64) (param i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 64
  i32.add
  global.set $sp
  global.get $bp
  i32.const 48
  i32.add
  local.get 0
  i32.store
  global.get $bp
  i32.const 8
  i32.add
  local.get 1
  i64.store
  global.get $bp
  i32.const 52
  i32.add
  local.get 2
  i32.store
  global.get $bp
  i32.const 52
  i32.add
  i32.load
  i32.const 32
  i32.gt_s
  call $assert
  global.get $bp
  i32.const 56
  i32.add
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i32.wrap_i64
  i32.store
  global.get $bp
  i32.const 60
  i32.add
  global.get $bp
  i32.const 8
  i32.add
  i64.load
  i64.const 32
  i64.shr_u
  i32.wrap_i64
  i32.store
  global.get $bp
  i32.const 16
  i32.add
  global.get $bp
  i32.const 48
  i32.add
  i32.load
  i64.extend_i32_u
  global.get $bp
  i32.const 56
  i32.add
  i32.load
  i64.extend_i32_u
  i64.mul
  i64.store
  global.get $bp
  i32.const 24
  i32.add
  global.get $bp
  i32.const 48
  i32.add
  i32.load
  i64.extend_i32_u
  global.get $bp
  i32.const 60
  i32.add
  i32.load
  i64.extend_i32_u
  i64.mul
  i64.store
  global.get $bp
  i32.const 32
  i32.add
  global.get $bp
  i32.const 16
  i32.add
  i64.load
  i64.const 32
  i64.shr_u
  global.get $bp
  i32.const 24
  i32.add
  i64.load
  i64.add
  i64.store
  global.get $bp
  i32.const 40
  i32.add
  global.get $bp
  i32.const 32
  i32.add
  i64.load
  global.get $bp
  i32.const 52
  i32.add
  i32.load
  i32.const 32
  i32.sub
  i64.extend_i32_u
  i64.shr_u
  i64.store
  global.get $bp
  i32.const 40
  i32.add
  i64.load
  i64.const 4294967295
  i64.le_u
  call $assert
  global.get $bp
  i32.const 40
  i32.add
  i64.load
  i32.wrap_i64
  global.get $sp
  i32.const 64
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $mulPow5InvDivPow2 (param i32) (param i32) (param i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 16
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  local.get 0
  i32.store
  global.get $bp
  i32.const 8
  i32.add
  local.get 1
  i32.store
  global.get $bp
  i32.const 12
  i32.add
  local.get 2
  i32.store
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 10720
  global.get $bp
  i32.const 8
  i32.add
  i32.load
  i32.const 8
  i32.mul
  i32.add
  i64.load
  global.get $bp
  i32.const 12
  i32.add
  i32.load
  call $mulShift32
  global.get $sp
  i32.const 16
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $mulPow5divPow2 (param i32) (param i32) (param i32) (result i32)
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 16
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  local.get 0
  i32.store
  global.get $bp
  i32.const 8
  i32.add
  local.get 1
  i32.store
  global.get $bp
  i32.const 12
  i32.add
  local.get 2
  i32.store
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 11160
  global.get $bp
  i32.const 8
  i32.add
  i32.load
  i32.const 8
  i32.mul
  i32.add
  i64.load
  global.get $bp
  i32.const 12
  i32.add
  i32.load
  call $mulShift32
  global.get $sp
  i32.const 16
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
  return
)
(func $assert (param i32) 
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 8
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  local.get 0
  i32.store8
  global.get $bp
  i32.const 4
  i32.add
  i32.load8_u
  i32.eqz
  (if 
    (then 
      call $unreachable
    )
    (else 
    )
  )
  global.get $sp
  i32.const 8
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
)
(func $main 
  global.get $sp
  global.get $bp
  i32.store
  global.get $sp
  global.set $bp
  global.get $sp
  i32.const 16
  i32.add
  global.set $sp
  global.get $bp
  i32.const 4
  i32.add
  i32.const 1
  i32.store
  global.get $bp
  i32.const 8
  i32.add
  global.get $bp
  i32.const 4
  i32.add
  i32.load
  i32.const 4294967295
  i32.xor
  i32.const 1
  i32.add
  i32.store
  global.get $bp
  i32.const 12
  i32.add
  global.get $bp
  i32.const 13
  i32.add
  i32.const 0
  i32.const 1
  call $::store::5
  global.get $bp
  i32.const 13
  i32.add
  global.get $bp
  i32.const 8
  i32.add
  i32.load
  i32.add
  i32.load8_u
  i32.store8
  global.get $bp
  i32.const 12
  i32.add
  i32.load8_u
  call $println_bool
  global.get $sp
  i32.const 16
  i32.sub
  global.set $sp
  global.get $sp
  i32.load
  global.set $bp
)
(func $::store::0 (param i32) (param i32) (param i32)
  local.get 0
  local.get 1
  i32.store
  local.get 0
  i32.const 4
  i32.add
  local.get 2
  i32.store
)
(func $::store::1 (param i32) (param i32) (param i32) (param i32) (param i32)
  local.get 0
  local.get 1
  i32.store
  local.get 0
  i32.const 4
  i32.add
  local.get 2
  i32.store
  local.get 0
  i32.const 8
  i32.add
  local.get 3
  i32.store
  local.get 0
  i32.const 12
  i32.add
  local.get 4
  i32.store
)
(func $::store::2 (param i32) (param i64) (param i32)
  local.get 0
  local.get 1
  i64.store
  local.get 0
  i32.const 8
  i32.add
  local.get 2
  i32.store
)
(func $::store::3 (param i32) (param i32) (param i32)
  local.get 0
  local.get 1
  i32.store
  local.get 0
  i32.const 4
  i32.add
  local.get 2
  i32.store
)
(func $::store::4 (param i32) (param i32) (param i32)
  local.get 0
  local.get 1
  i32.store
  local.get 0
  i32.const 4
  i32.add
  local.get 2
  i32.store
)
(func $::store::5 (param i32) (param i32) (param i32)
  local.get 0
  local.get 1
  i32.store8
  local.get 0
  i32.const 1
  i32.add
  local.get 2
  i32.store8
)
